<#
// Copyright (c) Six Labors.
// Licensed under the Six Labors Split License.
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ output extension=".cs" #>
<#

    void GenerateFromMethods(string pixelType)
    {
		#>

    /// <summary>
    /// Converts all pixels in 'source` span of <see cref="<#=pixelType#>"/> into a span of <typeparamref name="TPixel"/>-s.
    /// </summary>
    /// <param name="configuration">A <see cref="Configuration"/> to configure internal operations.</param>
    /// <param name="source">The source <see cref="Span{T}"/> of <see cref="<#=pixelType#>"/> data.</param>
    /// <param name="destination">The <see cref="Span{T}"/> to the destination pixels.</param>
    public virtual void From<#=pixelType#>(Configuration configuration, ReadOnlySpan<<#=pixelType#>> source, Span<TPixel> destination)
    {
        Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

        ref <#=pixelType#> sourceBase = ref MemoryMarshal.GetReference(source);
        ref TPixel destinationBase = ref MemoryMarshal.GetReference(destination);

        for (nuint i = 0; i < (uint)source.Length; i++)
        {
            Unsafe.Add(ref destinationBase, i) = TPixel.From<#=pixelType#>(Unsafe.Add(ref sourceBase, i));
        }
    }

    /// <summary>
    /// A helper for <see cref="From<#=pixelType#>(Configuration, ReadOnlySpan{<#=pixelType#>}, Span{TPixel})"/> that expects a byte span.
    /// The layout of the data in 'sourceBytes' must be compatible with <see cref="<#=pixelType#>"/> layout.
    /// </summary>
    /// <param name="configuration">A <see cref="Configuration"/> to configure internal operations.</param>
    /// <param name="sourceBytes">The <see cref="ReadOnlySpan{T}"/> to the source bytes.</param>
    /// <param name="destination">The <see cref="Span{T}"/> to the destination pixels.</param>
    /// <param name="count">The number of pixels to convert.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void From<#=pixelType#>Bytes(Configuration configuration, ReadOnlySpan<byte> sourceBytes, Span<TPixel> destination, int count)
    {
        this.From<#=pixelType#>(configuration, MemoryMarshal.Cast<byte, <#=pixelType#>>(sourceBytes).Slice(0, count), destination);
    }

<#
    }

    void GenerateToDestFormatMethods(string pixelType)
    {
        #>
    /// <summary>
    /// Converts all pixels of the 'source` span to a span of <see cref="<#=pixelType#>"/>-s.
    /// </summary>
    /// <param name="configuration">A <see cref="Configuration"/> to configure internal operations</param>
    /// <param name="source">The span of source pixels</param>
    /// <param name="destination">The destination span of <see cref="<#=pixelType#>"/> data.</param>
    public virtual void To<#=pixelType#>(Configuration configuration, ReadOnlySpan<TPixel> source, Span<<#=pixelType#>> destination)
    {
        Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

        ref TPixel sourceBase = ref MemoryMarshal.GetReference(source);
        ref <#=pixelType#> destinationBase = ref MemoryMarshal.GetReference(destination);

        for (nuint i = 0; i < (uint)source.Length; i++)
        {
            Unsafe.Add(ref destinationBase, i) = <#=pixelType#>.FromScaledVector4(Unsafe.Add(ref sourceBase, i).ToScaledVector4());
        }
    }

    /// <summary>
    /// A helper for <see cref="To<#=pixelType#>(Configuration, ReadOnlySpan{TPixel}, Span{<#=pixelType#>})"/> that expects a byte span as destination.
    /// The layout of the data in 'destination' must be compatible with <see cref="<#=pixelType#>"/> layout.
    /// </summary>
    /// <param name="configuration">A <see cref="Configuration"/> to configure internal operations</param>
    /// <param name="source">The <see cref="Span{T}"/> to the source pixels.</param>
    /// <param name="destination">The <see cref="Span{T}"/> to the destination bytes.</param>
    /// <param name="count">The number of pixels to convert.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void To<#=pixelType#>Bytes(Configuration configuration, ReadOnlySpan<TPixel> source, Span<byte> destination, int count)
    {
        this.To<#=pixelType#>(configuration, source.Slice(0, count), MemoryMarshal.Cast<byte, <#=pixelType#>>(destination));
    }
<#
    }

#>
// Copyright (c) Six Labors.
// Licensed under the Six Labors Split License.
// <auto-generated />

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SixLabors.ImageSharp.PixelFormats;

public partial class PixelOperations<TPixel>
{<#

GenerateFromMethods("Argb32");
GenerateToDestFormatMethods("Argb32");

GenerateFromMethods("Abgr32");
GenerateToDestFormatMethods("Abgr32");

GenerateFromMethods("Bgr24");
GenerateToDestFormatMethods("Bgr24");

GenerateFromMethods("Bgra32");
GenerateToDestFormatMethods("Bgra32");

GenerateFromMethods("L8");
GenerateToDestFormatMethods("L8");

GenerateFromMethods("L16");
GenerateToDestFormatMethods("L16");

GenerateFromMethods("La16");
GenerateToDestFormatMethods("La16");

GenerateFromMethods("La32");
GenerateToDestFormatMethods("La32");

GenerateFromMethods("Rgb24");
GenerateToDestFormatMethods("Rgb24");

GenerateFromMethods("Rgba32");
GenerateToDestFormatMethods("Rgba32");

GenerateFromMethods("Rgb48");
GenerateToDestFormatMethods("Rgb48");

GenerateFromMethods("Rgba64");
GenerateToDestFormatMethods("Rgba64");

GenerateFromMethods("Bgra5551");
GenerateToDestFormatMethods("Bgra5551");

#>}
