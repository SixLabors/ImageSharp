// Copyright (c) Six Labors.
// Licensed under the Six Labors Split License.

// <auto-generated />

using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using SixLabors.ImageSharp.PixelFormats.Utils;

namespace SixLabors.ImageSharp.PixelFormats;

/// <content>
/// Provides optimized overrides for bulk operations.
/// </content>
public partial struct Rgb48
{
    /// <summary>
    /// Provides optimized overrides for bulk operations.
    /// </summary>
    internal partial class PixelOperations : PixelOperations<Rgb48>
    {
        /// <inheritdoc />
        public override void FromRgb48(Configuration configuration, ReadOnlySpan<Rgb48> source, Span<Rgb48> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            source.CopyTo(destination.Slice(0, source.Length));
        }

        /// <inheritdoc />
        public override void ToRgb48(Configuration configuration, ReadOnlySpan<Rgb48> source, Span<Rgb48> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            source.CopyTo(destination.Slice(0, source.Length));
        }

        /// <inheritdoc />
        public override void ToArgb32(
            Configuration configuration,
            ReadOnlySpan<Rgb48> source,
            Span<Argb32> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            ref Rgb48 sourceBase = ref MemoryMarshal.GetReference(source);
            ref Argb32 destinationBase = ref MemoryMarshal.GetReference(destination);

            for (nuint i = 0; i < (uint)source.Length; i++)
            {
                Unsafe.Add(ref destinationBase, i) = Argb32.FromRgb48(Unsafe.Add(ref sourceBase, i));
            }
        }

        /// <inheritdoc />
        public override void ToAbgr32(
            Configuration configuration,
            ReadOnlySpan<Rgb48> source,
            Span<Abgr32> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            ref Rgb48 sourceBase = ref MemoryMarshal.GetReference(source);
            ref Abgr32 destinationBase = ref MemoryMarshal.GetReference(destination);

            for (nuint i = 0; i < (uint)source.Length; i++)
            {
                Unsafe.Add(ref destinationBase, i) = Abgr32.FromRgb48(Unsafe.Add(ref sourceBase, i));
            }
        }

        /// <inheritdoc />
        public override void ToBgr24(
            Configuration configuration,
            ReadOnlySpan<Rgb48> source,
            Span<Bgr24> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            ref Rgb48 sourceBase = ref MemoryMarshal.GetReference(source);
            ref Bgr24 destinationBase = ref MemoryMarshal.GetReference(destination);

            for (nuint i = 0; i < (uint)source.Length; i++)
            {
                Unsafe.Add(ref destinationBase, i) = Bgr24.FromRgb48(Unsafe.Add(ref sourceBase, i));
            }
        }

        /// <inheritdoc />
        public override void ToBgra32(
            Configuration configuration,
            ReadOnlySpan<Rgb48> source,
            Span<Bgra32> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            ref Rgb48 sourceBase = ref MemoryMarshal.GetReference(source);
            ref Bgra32 destinationBase = ref MemoryMarshal.GetReference(destination);

            for (nuint i = 0; i < (uint)source.Length; i++)
            {
                Unsafe.Add(ref destinationBase, i) = Bgra32.FromRgb48(Unsafe.Add(ref sourceBase, i));
            }
        }

        /// <inheritdoc />
        public override void ToL8(
            Configuration configuration,
            ReadOnlySpan<Rgb48> source,
            Span<L8> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            ref Rgb48 sourceBase = ref MemoryMarshal.GetReference(source);
            ref L8 destinationBase = ref MemoryMarshal.GetReference(destination);

            for (nuint i = 0; i < (uint)source.Length; i++)
            {
                Unsafe.Add(ref destinationBase, i) = L8.FromRgb48(Unsafe.Add(ref sourceBase, i));
            }
        }

        /// <inheritdoc />
        public override void ToL16(
            Configuration configuration,
            ReadOnlySpan<Rgb48> source,
            Span<L16> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            ref Rgb48 sourceBase = ref MemoryMarshal.GetReference(source);
            ref L16 destinationBase = ref MemoryMarshal.GetReference(destination);

            for (nuint i = 0; i < (uint)source.Length; i++)
            {
                Unsafe.Add(ref destinationBase, i) = L16.FromRgb48(Unsafe.Add(ref sourceBase, i));
            }
        }

        /// <inheritdoc />
        public override void ToLa16(
            Configuration configuration,
            ReadOnlySpan<Rgb48> source,
            Span<La16> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            ref Rgb48 sourceBase = ref MemoryMarshal.GetReference(source);
            ref La16 destinationBase = ref MemoryMarshal.GetReference(destination);

            for (nuint i = 0; i < (uint)source.Length; i++)
            {
                Unsafe.Add(ref destinationBase, i) = La16.FromRgb48(Unsafe.Add(ref sourceBase, i));
            }
        }

        /// <inheritdoc />
        public override void ToLa32(
            Configuration configuration,
            ReadOnlySpan<Rgb48> source,
            Span<La32> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            ref Rgb48 sourceBase = ref MemoryMarshal.GetReference(source);
            ref La32 destinationBase = ref MemoryMarshal.GetReference(destination);

            for (nuint i = 0; i < (uint)source.Length; i++)
            {
                Unsafe.Add(ref destinationBase, i) = La32.FromRgb48(Unsafe.Add(ref sourceBase, i));
            }
        }

        /// <inheritdoc />
        public override void ToRgb24(
            Configuration configuration,
            ReadOnlySpan<Rgb48> source,
            Span<Rgb24> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            ref Rgb48 sourceBase = ref MemoryMarshal.GetReference(source);
            ref Rgb24 destinationBase = ref MemoryMarshal.GetReference(destination);

            for (nuint i = 0; i < (uint)source.Length; i++)
            {
                Unsafe.Add(ref destinationBase, i) = Rgb24.FromRgb48(Unsafe.Add(ref sourceBase, i));
            }
        }

        /// <inheritdoc />
        public override void ToRgba32(
            Configuration configuration,
            ReadOnlySpan<Rgb48> source,
            Span<Rgba32> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            ref Rgb48 sourceBase = ref MemoryMarshal.GetReference(source);
            ref Rgba32 destinationBase = ref MemoryMarshal.GetReference(destination);

            for (nuint i = 0; i < (uint)source.Length; i++)
            {
                Unsafe.Add(ref destinationBase, i) = Rgba32.FromRgb48(Unsafe.Add(ref sourceBase, i));
            }
        }

        /// <inheritdoc />
        public override void ToRgba64(
            Configuration configuration,
            ReadOnlySpan<Rgb48> source,
            Span<Rgba64> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            ref Rgb48 sourceBase = ref MemoryMarshal.GetReference(source);
            ref Rgba64 destinationBase = ref MemoryMarshal.GetReference(destination);

            for (nuint i = 0; i < (uint)source.Length; i++)
            {
                Unsafe.Add(ref destinationBase, i) = Rgba64.FromRgb48(Unsafe.Add(ref sourceBase, i));
            }
        }

        /// <inheritdoc />
        public override void ToBgra5551(
            Configuration configuration,
            ReadOnlySpan<Rgb48> source,
            Span<Bgra5551> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            ref Rgb48 sourceBase = ref MemoryMarshal.GetReference(source);
            ref Bgra5551 destinationBase = ref MemoryMarshal.GetReference(destination);

            for (nuint i = 0; i < (uint)source.Length; i++)
            {
                Unsafe.Add(ref destinationBase, i) = Bgra5551.FromRgb48(Unsafe.Add(ref sourceBase, i));
            }
        }

        /// <inheritdoc />
        public override void From<TSourcePixel>(
            Configuration configuration,
            ReadOnlySpan<TSourcePixel> source,
            Span<Rgb48> destination)
        {
            PixelOperations<TSourcePixel>.Instance.ToRgb48(configuration, source, destination.Slice(0, source.Length));
        }
    }
}
