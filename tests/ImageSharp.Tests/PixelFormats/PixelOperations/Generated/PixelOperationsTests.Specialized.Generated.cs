// Copyright (c) Six Labors.
// Licensed under the Six Labors Split License.

// <auto-generated />

using SixLabors.ImageSharp.PixelFormats;
using Xunit;
using Xunit.Abstractions;


namespace SixLabors.ImageSharp.Tests.PixelFormats.PixelOperations;

public partial class PixelOperationsTests
{
    
    public partial class A8_OperationsTests : PixelOperationsTests<A8>
    {
        public A8_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = A8.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class Argb32_OperationsTests : PixelOperationsTests<Argb32>
    {
        public Argb32_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Argb32.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class Abgr32_OperationsTests : PixelOperationsTests<Abgr32>
    {
        public Abgr32_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Abgr32.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class Bgr24_OperationsTests : PixelOperationsTests<Bgr24>
    {
        public Bgr24_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Bgr24.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.None, alphaRepresentation);
        }
    }

    public partial class Bgr565_OperationsTests : PixelOperationsTests<Bgr565>
    {
        public Bgr565_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Bgr565.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.None, alphaRepresentation);
        }
    }

    public partial class Bgra32_OperationsTests : PixelOperationsTests<Bgra32>
    {
        public Bgra32_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Bgra32.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class Bgra4444_OperationsTests : PixelOperationsTests<Bgra4444>
    {
        public Bgra4444_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Bgra4444.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class Bgra5551_OperationsTests : PixelOperationsTests<Bgra5551>
    {
        public Bgra5551_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Bgra5551.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class Byte4_OperationsTests : PixelOperationsTests<Byte4>
    {
        public Byte4_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Byte4.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class HalfSingle_OperationsTests : PixelOperationsTests<HalfSingle>
    {
        public HalfSingle_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = HalfSingle.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.None, alphaRepresentation);
        }
    }

    public partial class HalfVector2_OperationsTests : PixelOperationsTests<HalfVector2>
    {
        public HalfVector2_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = HalfVector2.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.None, alphaRepresentation);
        }
    }

    public partial class HalfVector4_OperationsTests : PixelOperationsTests<HalfVector4>
    {
        public HalfVector4_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = HalfVector4.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class L16_OperationsTests : PixelOperationsTests<L16>
    {
        public L16_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = L16.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.None, alphaRepresentation);
        }
    }

    public partial class L8_OperationsTests : PixelOperationsTests<L8>
    {
        public L8_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = L8.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.None, alphaRepresentation);
        }
    }

    public partial class La16_OperationsTests : PixelOperationsTests<La16>
    {
        public La16_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = La16.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class La32_OperationsTests : PixelOperationsTests<La32>
    {
        public La32_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = La32.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class NormalizedByte2_OperationsTests : PixelOperationsTests<NormalizedByte2>
    {
        public NormalizedByte2_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = NormalizedByte2.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.None, alphaRepresentation);
        }
    }

    public partial class NormalizedByte4_OperationsTests : PixelOperationsTests<NormalizedByte4>
    {
        public NormalizedByte4_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = NormalizedByte4.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class NormalizedShort2_OperationsTests : PixelOperationsTests<NormalizedShort2>
    {
        public NormalizedShort2_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = NormalizedShort2.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.None, alphaRepresentation);
        }
    }

    public partial class NormalizedShort4_OperationsTests : PixelOperationsTests<NormalizedShort4>
    {
        public NormalizedShort4_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = NormalizedShort4.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class Rg32_OperationsTests : PixelOperationsTests<Rg32>
    {
        public Rg32_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Rg32.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.None, alphaRepresentation);
        }
    }

    public partial class Rgb24_OperationsTests : PixelOperationsTests<Rgb24>
    {
        public Rgb24_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Rgb24.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.None, alphaRepresentation);
        }
    }

    public partial class Rgb48_OperationsTests : PixelOperationsTests<Rgb48>
    {
        public Rgb48_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Rgb48.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.None, alphaRepresentation);
        }
    }

    public partial class Rgba1010102_OperationsTests : PixelOperationsTests<Rgba1010102>
    {
        public Rgba1010102_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Rgba1010102.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class Rgba32_OperationsTests : PixelOperationsTests<Rgba32>
    {
        public Rgba32_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Rgba32.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class Rgba64_OperationsTests : PixelOperationsTests<Rgba64>
    {
        public Rgba64_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Rgba64.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class RgbaVector_OperationsTests : PixelOperationsTests<RgbaVector>
    {
        public RgbaVector_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = RgbaVector.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }

    public partial class Short2_OperationsTests : PixelOperationsTests<Short2>
    {
        public Short2_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Short2.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.None, alphaRepresentation);
        }
    }

    public partial class Short4_OperationsTests : PixelOperationsTests<Short4>
    {
        public Short4_OperationsTests(ITestOutputHelper output)
            : base(output)
        {
        }

        [Fact]
        public void PixelTypeInfoHasCorrectAlphaRepresentation()
        {
            var alphaRepresentation = Short4.GetPixelTypeInfo().AlphaRepresentation;
            Assert.Equal(PixelAlphaRepresentation.Unassociated, alphaRepresentation);
        }
    }
}
