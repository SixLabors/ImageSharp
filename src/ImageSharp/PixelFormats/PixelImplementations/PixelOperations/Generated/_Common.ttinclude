<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// Copyright (c) Six Labors.
// Licensed under the Six Labors Split License.

// <auto-generated />

using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using SixLabors.ImageSharp.PixelFormats.Utils;
<#+
    private static readonly string[] CommonPixelTypes =
    {
        "Argb32",
        "Abgr32",
        "Bgr24",
        "Bgra32",
        "L8",
        "L16",
        "La16",
        "La32",
        "Rgb24",
        "Rgba32",
        "Rgb48",
        "Rgba64",
        "Bgra5551"
    };

    private static readonly string[] OptimizedPixelTypes =
    {
        "Rgba32",
        "Argb32",
        "Abgr32",
        "Bgra32",
        "Rgb24",
        "Bgr24"
    };

    // Types with Rgba32-combatable to/from Vector4 conversion
    private static readonly string[] Rgba32CompatibleTypes =
    {
        "Argb32",
        "Abgr32",
        "Bgra32",
        "Rgb24",
        "Bgr24"
    };

    void GenerateGenericConverterMethods(string pixelType)
    {
#>

        /// <inheritdoc />
        public override void From<TSourcePixel>(
            Configuration configuration,
            ReadOnlySpan<TSourcePixel> source,
            Span<<#=pixelType#>> destination)
        {
            PixelOperations<TSourcePixel>.Instance.To<#=pixelType#>(configuration, source, destination.Slice(0, source.Length));
        }
<#+
    }

    void GenerateDefaultSelfConversionMethods(string pixelType)
    {
#>/// <inheritdoc />
        public override void From<#=pixelType#>(Configuration configuration, ReadOnlySpan<<#=pixelType#>> source, Span<<#=pixelType#>> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            source.CopyTo(destination.Slice(0, source.Length));
        }

        /// <inheritdoc />
        public override void To<#=pixelType#>(Configuration configuration, ReadOnlySpan<<#=pixelType#>> source, Span<<#=pixelType#>> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            source.CopyTo(destination.Slice(0, source.Length));
        }
<#+
    }

    void GenerateDefaultConvertToMethod(string fromPixelType, string toPixelType)
    {
#>

        /// <inheritdoc />
        public override void To<#=toPixelType#>(
            Configuration configuration,
            ReadOnlySpan<<#=fromPixelType#>> source,
            Span<<#=toPixelType#>> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            ref <#=fromPixelType#> sourceBase = ref MemoryMarshal.GetReference(source);
            ref <#=toPixelType#> destinationBase = ref MemoryMarshal.GetReference(destination);

            for (nuint i = 0; i < (uint)source.Length; i++)
            {
                Unsafe.Add(ref destinationBase, i) = <#=toPixelType#>.From<#=fromPixelType#>(Unsafe.Add(ref sourceBase, i));
            }
        }
<#+
    }

    void GenerateOptimized32BitConversionMethods(string thisPixelType, string otherPixelType)
    {
    #>
    
        /// <inheritdoc />
        public override void To<#=otherPixelType#>(
            Configuration configuration,
            ReadOnlySpan<<#=thisPixelType#>> source,
            Span<<#=otherPixelType#>> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            ReadOnlySpan<byte> sourceBytes = MemoryMarshal.Cast<<#=thisPixelType#>, byte>(source);
            Span<byte> destinationBytes = MemoryMarshal.Cast<<#=otherPixelType#>, byte>(destination);
            PixelConverter.From<#=thisPixelType#>.To<#=otherPixelType#>(sourceBytes, destinationBytes);
        }
        
        /// <inheritdoc />
        public override void From<#=otherPixelType#>(
            Configuration configuration,
            ReadOnlySpan<<#=otherPixelType#>> source,
            Span<<#=thisPixelType#>> destination)
        {
            Guard.NotNull(configuration, nameof(configuration));
            Guard.DestinationShouldNotBeTooShort(source, destination, nameof(destination));

            ReadOnlySpan<byte> sourceBytes = MemoryMarshal.Cast<<#=otherPixelType#>, byte>(source);
            Span<byte> destinationBytes = MemoryMarshal.Cast<<#=thisPixelType#>, byte>(destination);
            PixelConverter.From<#=otherPixelType#>.To<#=thisPixelType#>(sourceBytes, destinationBytes);
        }        
<#+
    }

    void GenerateRgba32CompatibleVector4ConversionMethods(string pixelType, bool hasAlpha)
    {
           string removeTheseModifiers = "PixelConversionModifiers.Scale";
           if (!hasAlpha)
           {
               removeTheseModifiers += " | PixelConversionModifiers.Premultiply";
           }
#>

        /// <inheritdoc />
        public override void FromVector4Destructive(
            Configuration configuration,
            Span<Vector4> sourceVectors,
            Span<<#=pixelType#>> destination,
            PixelConversionModifiers modifiers)
        {
            Vector4Converters.RgbaCompatible.FromVector4(configuration, this, sourceVectors, destination, modifiers.Remove(<#=removeTheseModifiers#>));
        }

        /// <inheritdoc />
        public override void ToVector4(
            Configuration configuration,
            ReadOnlySpan<<#=pixelType#>> source,
            Span<Vector4> destination,
            PixelConversionModifiers modifiers)
        {
            Vector4Converters.RgbaCompatible.ToVector4(configuration, this, source, destination, modifiers.Remove(<#=removeTheseModifiers#>));
        }
<#+
    }

    void GenerateAllDefaultConversionMethods(string pixelType)
    {
        GenerateDefaultSelfConversionMethods(pixelType);

        if (Rgba32CompatibleTypes.Contains(pixelType))
        {
            GenerateRgba32CompatibleVector4ConversionMethods(pixelType, pixelType.EndsWith("32"));
        }

        var matching32BitTypes = OptimizedPixelTypes.Contains(pixelType) ?
            OptimizedPixelTypes.Where(p => p != pixelType) :
            Enumerable.Empty<string>();

        foreach (string destPixelType in matching32BitTypes)
        {
            GenerateOptimized32BitConversionMethods(pixelType, destPixelType);
        }

        var otherCommonNon32Types = CommonPixelTypes
            .Where(p => p != pixelType)
            .Except(matching32BitTypes);

        foreach (string destPixelType in otherCommonNon32Types)
        {
            GenerateDefaultConvertToMethod(pixelType, destPixelType);
        }

        GenerateGenericConverterMethods(pixelType);
    }
#>
