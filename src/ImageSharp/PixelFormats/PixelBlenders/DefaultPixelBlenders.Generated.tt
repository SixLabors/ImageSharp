<#
// Copyright (c) Six Labors.
// Licensed under the Six Labors Split License.
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Copyright (c) Six Labors.
// Licensed under the Six Labors Split License.

// <auto-generated />
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;

namespace SixLabors.ImageSharp.PixelFormats.PixelBlenders;

/// <summary>
/// Collection of Porter Duff alpha blending functions applying different composition models.
/// </summary>
/// <remarks>
/// These functions are designed to be a general solution for all color cases,
/// that is, they take in account the alpha value of both the backdrop
/// and source, and there's no need to alpha-premultiply neither the backdrop
/// nor the source.
/// Note there are faster functions for when the backdrop color is known
/// to be opaque
/// </remarks>
internal static class DefaultPixelBlenders<TPixel>
    where TPixel : unmanaged, IPixel<TPixel>
{

<#
var composers = new []{
    "Src",
    "SrcAtop",
    "SrcOver",
    "SrcIn",
    "SrcOut",
    "Dest",
    "DestAtop",
    "DestOver",
    "DestIn",
    "DestOut",
    "Clear",
    "Xor",
};

var blenders = new []{
    "Normal",
    "Multiply",
    "Add",
    "Subtract",
    "Screen",
    "Darken",
    "Lighten",
    "Overlay",
    "HardLight"
};

    foreach(var composer in composers) {
    foreach(var blender in blenders) {

        var blender_composer= $"{blender}{composer}";
#>
    /// <summary>
    /// A pixel blender that implements the "<#= blender_composer#>" composition equation.
    /// </summary>
    public class <#= blender_composer#> : PixelBlender<TPixel>
    {
        /// <summary>
        /// Gets the static instance of this blender.
        /// </summary>
        public static <#=blender_composer#> Instance { get; } = new <#=blender_composer#>();

        /// <inheritdoc />
        public override TPixel Blend(TPixel background, TPixel source, float amount)
        {
            return TPixel.FromScaledVector4(PorterDuffFunctions.<#=blender_composer#>(background.ToScaledVector4(), source.ToScaledVector4(), Numerics.Clamp(amount, 0, 1)));
        }

        /// <inheritdoc />
        protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, float amount)
        {
            amount = Numerics.Clamp(amount, 0, 1);

            if (Avx2.IsSupported && destination.Length >= 2)
            {
                // Divide by 2 as 4 elements per Vector4 and 8 per Vector256<float>
                ref Vector256<float> destinationBase = ref Unsafe.As<Vector4, Vector256<float>>(ref MemoryMarshal.GetReference(destination));
                ref Vector256<float> destinationLast = ref Unsafe.Add(ref destinationBase, (uint)destination.Length / 2u);

                ref Vector256<float> backgroundBase = ref Unsafe.As<Vector4, Vector256<float>>(ref MemoryMarshal.GetReference(background));
                ref Vector256<float> sourceBase = ref Unsafe.As<Vector4, Vector256<float>>(ref MemoryMarshal.GetReference(source));
                Vector256<float> opacity = Vector256.Create(amount);

                while (Unsafe.IsAddressLessThan(ref destinationBase, ref destinationLast))
                {
                    destinationBase = PorterDuffFunctions.<#=blender_composer#>(backgroundBase, sourceBase, opacity);
                    destinationBase = ref Unsafe.Add(ref destinationBase, 1);
                    backgroundBase = ref Unsafe.Add(ref backgroundBase, 1);
                    sourceBase = ref Unsafe.Add(ref sourceBase, 1);
                }

                if (Numerics.Modulo2(destination.Length) != 0)
                {
                    // Vector4 fits neatly in pairs. Any overlap has to be equal to 1.
                    int i = destination.Length - 1;
                    destination[i] = PorterDuffFunctions.<#=blender_composer#>(background[i], source[i], amount);
                }
            }
            else
            {
                for (int i = 0; i < destination.Length; i++)
                {
                    destination[i] = PorterDuffFunctions.<#=blender_composer#>(background[i], source[i], amount);
                }
            }
        }

        /// <inheritdoc />
        protected override void BlendFunction(Span<Vector4> destination, ReadOnlySpan<Vector4> background, ReadOnlySpan<Vector4> source, ReadOnlySpan<float> amount)
        {
            if (Avx2.IsSupported && destination.Length >= 2)
            {
                // Divide by 2 as 4 elements per Vector4 and 8 per Vector256<float>
                ref Vector256<float> destinationBase = ref Unsafe.As<Vector4, Vector256<float>>(ref MemoryMarshal.GetReference(destination));
                ref Vector256<float> destinationLast = ref Unsafe.Add(ref destinationBase, (uint)destination.Length / 2u);

                ref Vector256<float> backgroundBase = ref Unsafe.As<Vector4, Vector256<float>>(ref MemoryMarshal.GetReference(background));
                ref Vector256<float> sourceBase = ref Unsafe.As<Vector4, Vector256<float>>(ref MemoryMarshal.GetReference(source));
                ref float amountBase = ref MemoryMarshal.GetReference(amount);

                Vector256<float> vOne = Vector256.Create(1F);

                while (Unsafe.IsAddressLessThan(ref destinationBase, ref destinationLast))
                {
                    // We need to create a Vector256<float> containing the current and next amount values
                    // taking up each half of the Vector256<float> and then clamp them.
                    Vector256<float> opacity = Vector256.Create(
                        Vector128.Create(amountBase),
                        Vector128.Create(Unsafe.Add(ref amountBase, 1)));
                    opacity = Avx.Min(Avx.Max(Vector256<float>.Zero, opacity), vOne);

                    destinationBase = PorterDuffFunctions.<#=blender_composer#>(backgroundBase, sourceBase, opacity);
                    destinationBase = ref Unsafe.Add(ref destinationBase, 1);
                    backgroundBase = ref Unsafe.Add(ref backgroundBase, 1);
                    sourceBase = ref Unsafe.Add(ref sourceBase, 1);
                    amountBase = ref Unsafe.Add(ref amountBase, 2);
                }

                if (Numerics.Modulo2(destination.Length) != 0)
                {
                    // Vector4 fits neatly in pairs. Any overlap has to be equal to 1.
                    int i = destination.Length - 1;
                    destination[i] = PorterDuffFunctions.<#=blender_composer#>(background[i], source[i], Numerics.Clamp(amount[i], 0, 1F));
                }
            }
            else
            {
                for (int i = 0; i < destination.Length; i++)
                {
                    destination[i] = PorterDuffFunctions.<#=blender_composer#>(background[i], source[i], Numerics.Clamp(amount[i], 0, 1F));
                }
            }
        }
    }

<#
    }
}

#>
}
