// Copyright (c) Six Labors.
// Licensed under the Six Labors Split License.

// <auto-generated />

using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;

namespace SixLabors.ImageSharp.PixelFormats.PixelBlenders;

internal static partial class PorterDuffFunctions
{

    /// <summary>
    /// Returns the result of the "NormalSrc" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 NormalSrc(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return source;
    }

    /// <summary>
    /// Returns the result of the "NormalSrc compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> NormalSrc(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

    /// <summary>
    /// Returns the result of the "NormalSrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 NormalSrcAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(backdrop, source, Normal(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "NormalSrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> NormalSrcAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(backdrop, source, Normal(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "NormalSrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 NormalSrcOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(backdrop, source, Normal(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "NormalSrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> NormalSrcOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(backdrop, source, Normal(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "NormalSrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 NormalSrcIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "NormalSrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> NormalSrcIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "NormalSrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 NormalSrcOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "NormalSrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> NormalSrcOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "NormalDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 NormalDest(Vector4 backdrop, Vector4 source, float opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "NormalDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> NormalDest(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "NormalDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 NormalDestAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(source, backdrop, Normal(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "NormalDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> NormalDestAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(source, backdrop, Normal(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "NormalDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 NormalDestOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(source, backdrop, Normal(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "NormalDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> NormalDestOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(source, backdrop, Normal(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "NormalDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 NormalDestIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "NormalDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> NormalDestIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "NormalDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 NormalDestOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "NormalDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> NormalDestOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "NormalXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 NormalXor(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Xor(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "NormalXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> NormalXor(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Xor(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "NormalClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 NormalClear(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Clear(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "NormalClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> NormalClear(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Clear(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));


    /// <summary>
    /// Returns the result of the "NormalSrc" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel NormalSrc<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(NormalSrc(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "NormalSrcAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel NormalSrcAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(NormalSrcAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "NormalSrcOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel NormalSrcOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(NormalSrcOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "NormalSrcIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel NormalSrcIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(NormalSrcIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "NormalSrcOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel NormalSrcOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(NormalSrcOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "NormalDest" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel NormalDest<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(NormalDest(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "NormalDestAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel NormalDestAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(NormalDestAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "NormalDestOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel NormalDestOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(NormalDestOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "NormalDestIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel NormalDestIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(NormalDestIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "NormalDestOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel NormalDestOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(NormalDestOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "NormalClear" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel NormalClear<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(NormalClear(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "NormalXor" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel NormalXor<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(NormalXor(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "MultiplySrc" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 MultiplySrc(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return source;
    }

    /// <summary>
    /// Returns the result of the "MultiplySrc compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> MultiplySrc(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

    /// <summary>
    /// Returns the result of the "MultiplySrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 MultiplySrcAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(backdrop, source, Multiply(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "MultiplySrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> MultiplySrcAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(backdrop, source, Multiply(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "MultiplySrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 MultiplySrcOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(backdrop, source, Multiply(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "MultiplySrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> MultiplySrcOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(backdrop, source, Multiply(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "MultiplySrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 MultiplySrcIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "MultiplySrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> MultiplySrcIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "MultiplySrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 MultiplySrcOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "MultiplySrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> MultiplySrcOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "MultiplyDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 MultiplyDest(Vector4 backdrop, Vector4 source, float opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "MultiplyDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> MultiplyDest(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "MultiplyDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 MultiplyDestAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(source, backdrop, Multiply(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "MultiplyDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> MultiplyDestAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(source, backdrop, Multiply(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "MultiplyDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 MultiplyDestOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(source, backdrop, Multiply(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "MultiplyDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> MultiplyDestOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(source, backdrop, Multiply(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "MultiplyDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 MultiplyDestIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "MultiplyDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> MultiplyDestIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "MultiplyDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 MultiplyDestOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "MultiplyDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> MultiplyDestOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "MultiplyXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 MultiplyXor(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Xor(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "MultiplyXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> MultiplyXor(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Xor(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "MultiplyClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 MultiplyClear(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Clear(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "MultiplyClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> MultiplyClear(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Clear(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));


    /// <summary>
    /// Returns the result of the "MultiplySrc" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel MultiplySrc<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(MultiplySrc(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "MultiplySrcAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel MultiplySrcAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(MultiplySrcAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "MultiplySrcOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel MultiplySrcOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(MultiplySrcOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "MultiplySrcIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel MultiplySrcIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(MultiplySrcIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "MultiplySrcOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel MultiplySrcOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(MultiplySrcOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "MultiplyDest" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel MultiplyDest<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(MultiplyDest(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "MultiplyDestAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel MultiplyDestAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(MultiplyDestAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "MultiplyDestOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel MultiplyDestOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(MultiplyDestOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "MultiplyDestIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel MultiplyDestIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(MultiplyDestIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "MultiplyDestOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel MultiplyDestOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(MultiplyDestOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "MultiplyClear" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel MultiplyClear<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(MultiplyClear(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "MultiplyXor" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel MultiplyXor<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(MultiplyXor(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "AddSrc" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 AddSrc(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return source;
    }

    /// <summary>
    /// Returns the result of the "AddSrc compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> AddSrc(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

    /// <summary>
    /// Returns the result of the "AddSrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 AddSrcAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(backdrop, source, Add(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "AddSrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> AddSrcAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(backdrop, source, Add(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "AddSrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 AddSrcOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(backdrop, source, Add(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "AddSrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> AddSrcOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(backdrop, source, Add(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "AddSrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 AddSrcIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "AddSrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> AddSrcIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "AddSrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 AddSrcOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "AddSrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> AddSrcOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "AddDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 AddDest(Vector4 backdrop, Vector4 source, float opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "AddDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> AddDest(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "AddDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 AddDestAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(source, backdrop, Add(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "AddDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> AddDestAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(source, backdrop, Add(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "AddDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 AddDestOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(source, backdrop, Add(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "AddDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> AddDestOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(source, backdrop, Add(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "AddDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 AddDestIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "AddDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> AddDestIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "AddDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 AddDestOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "AddDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> AddDestOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "AddXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 AddXor(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Xor(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "AddXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> AddXor(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Xor(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "AddClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 AddClear(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Clear(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "AddClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> AddClear(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Clear(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));


    /// <summary>
    /// Returns the result of the "AddSrc" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel AddSrc<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(AddSrc(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "AddSrcAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel AddSrcAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(AddSrcAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "AddSrcOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel AddSrcOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(AddSrcOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "AddSrcIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel AddSrcIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(AddSrcIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "AddSrcOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel AddSrcOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(AddSrcOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "AddDest" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel AddDest<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(AddDest(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "AddDestAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel AddDestAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(AddDestAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "AddDestOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel AddDestOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(AddDestOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "AddDestIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel AddDestIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(AddDestIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "AddDestOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel AddDestOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(AddDestOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "AddClear" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel AddClear<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(AddClear(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "AddXor" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel AddXor<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(AddXor(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "SubtractSrc" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 SubtractSrc(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return source;
    }

    /// <summary>
    /// Returns the result of the "SubtractSrc compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> SubtractSrc(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

    /// <summary>
    /// Returns the result of the "SubtractSrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 SubtractSrcAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(backdrop, source, Subtract(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "SubtractSrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> SubtractSrcAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(backdrop, source, Subtract(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "SubtractSrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 SubtractSrcOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(backdrop, source, Subtract(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "SubtractSrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> SubtractSrcOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(backdrop, source, Subtract(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "SubtractSrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 SubtractSrcIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "SubtractSrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> SubtractSrcIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "SubtractSrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 SubtractSrcOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "SubtractSrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> SubtractSrcOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "SubtractDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 SubtractDest(Vector4 backdrop, Vector4 source, float opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "SubtractDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> SubtractDest(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "SubtractDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 SubtractDestAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(source, backdrop, Subtract(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "SubtractDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> SubtractDestAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(source, backdrop, Subtract(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "SubtractDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 SubtractDestOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(source, backdrop, Subtract(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "SubtractDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> SubtractDestOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(source, backdrop, Subtract(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "SubtractDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 SubtractDestIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "SubtractDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> SubtractDestIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "SubtractDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 SubtractDestOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "SubtractDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> SubtractDestOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "SubtractXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 SubtractXor(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Xor(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "SubtractXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> SubtractXor(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Xor(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "SubtractClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 SubtractClear(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Clear(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "SubtractClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> SubtractClear(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Clear(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));


    /// <summary>
    /// Returns the result of the "SubtractSrc" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel SubtractSrc<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(SubtractSrc(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "SubtractSrcAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel SubtractSrcAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(SubtractSrcAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "SubtractSrcOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel SubtractSrcOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(SubtractSrcOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "SubtractSrcIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel SubtractSrcIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(SubtractSrcIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "SubtractSrcOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel SubtractSrcOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(SubtractSrcOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "SubtractDest" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel SubtractDest<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(SubtractDest(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "SubtractDestAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel SubtractDestAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(SubtractDestAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "SubtractDestOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel SubtractDestOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(SubtractDestOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "SubtractDestIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel SubtractDestIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(SubtractDestIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "SubtractDestOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel SubtractDestOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(SubtractDestOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "SubtractClear" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel SubtractClear<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(SubtractClear(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "SubtractXor" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel SubtractXor<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(SubtractXor(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "ScreenSrc" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 ScreenSrc(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return source;
    }

    /// <summary>
    /// Returns the result of the "ScreenSrc compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> ScreenSrc(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

    /// <summary>
    /// Returns the result of the "ScreenSrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 ScreenSrcAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(backdrop, source, Screen(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "ScreenSrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> ScreenSrcAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(backdrop, source, Screen(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "ScreenSrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 ScreenSrcOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(backdrop, source, Screen(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "ScreenSrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> ScreenSrcOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(backdrop, source, Screen(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "ScreenSrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 ScreenSrcIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "ScreenSrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> ScreenSrcIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "ScreenSrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 ScreenSrcOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "ScreenSrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> ScreenSrcOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "ScreenDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 ScreenDest(Vector4 backdrop, Vector4 source, float opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "ScreenDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> ScreenDest(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "ScreenDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 ScreenDestAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(source, backdrop, Screen(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "ScreenDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> ScreenDestAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(source, backdrop, Screen(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "ScreenDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 ScreenDestOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(source, backdrop, Screen(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "ScreenDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> ScreenDestOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(source, backdrop, Screen(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "ScreenDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 ScreenDestIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "ScreenDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> ScreenDestIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "ScreenDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 ScreenDestOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "ScreenDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> ScreenDestOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "ScreenXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 ScreenXor(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Xor(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "ScreenXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> ScreenXor(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Xor(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "ScreenClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 ScreenClear(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Clear(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "ScreenClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> ScreenClear(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Clear(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));


    /// <summary>
    /// Returns the result of the "ScreenSrc" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel ScreenSrc<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(ScreenSrc(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "ScreenSrcAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel ScreenSrcAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(ScreenSrcAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "ScreenSrcOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel ScreenSrcOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(ScreenSrcOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "ScreenSrcIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel ScreenSrcIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(ScreenSrcIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "ScreenSrcOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel ScreenSrcOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(ScreenSrcOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "ScreenDest" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel ScreenDest<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(ScreenDest(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "ScreenDestAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel ScreenDestAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(ScreenDestAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "ScreenDestOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel ScreenDestOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(ScreenDestOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "ScreenDestIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel ScreenDestIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(ScreenDestIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "ScreenDestOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel ScreenDestOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(ScreenDestOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "ScreenClear" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel ScreenClear<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(ScreenClear(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "ScreenXor" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel ScreenXor<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(ScreenXor(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "DarkenSrc" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 DarkenSrc(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return source;
    }

    /// <summary>
    /// Returns the result of the "DarkenSrc compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> DarkenSrc(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

    /// <summary>
    /// Returns the result of the "DarkenSrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 DarkenSrcAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(backdrop, source, Darken(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "DarkenSrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> DarkenSrcAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(backdrop, source, Darken(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "DarkenSrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 DarkenSrcOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(backdrop, source, Darken(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "DarkenSrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> DarkenSrcOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(backdrop, source, Darken(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "DarkenSrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 DarkenSrcIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "DarkenSrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> DarkenSrcIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "DarkenSrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 DarkenSrcOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "DarkenSrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> DarkenSrcOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "DarkenDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 DarkenDest(Vector4 backdrop, Vector4 source, float opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "DarkenDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> DarkenDest(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "DarkenDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 DarkenDestAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(source, backdrop, Darken(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "DarkenDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> DarkenDestAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(source, backdrop, Darken(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "DarkenDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 DarkenDestOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(source, backdrop, Darken(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "DarkenDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> DarkenDestOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(source, backdrop, Darken(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "DarkenDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 DarkenDestIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "DarkenDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> DarkenDestIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "DarkenDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 DarkenDestOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "DarkenDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> DarkenDestOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "DarkenXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 DarkenXor(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Xor(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "DarkenXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> DarkenXor(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Xor(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "DarkenClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 DarkenClear(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Clear(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "DarkenClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> DarkenClear(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Clear(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));


    /// <summary>
    /// Returns the result of the "DarkenSrc" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel DarkenSrc<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(DarkenSrc(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "DarkenSrcAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel DarkenSrcAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(DarkenSrcAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "DarkenSrcOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel DarkenSrcOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(DarkenSrcOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "DarkenSrcIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel DarkenSrcIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(DarkenSrcIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "DarkenSrcOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel DarkenSrcOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(DarkenSrcOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "DarkenDest" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel DarkenDest<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(DarkenDest(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "DarkenDestAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel DarkenDestAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(DarkenDestAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "DarkenDestOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel DarkenDestOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(DarkenDestOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "DarkenDestIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel DarkenDestIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(DarkenDestIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "DarkenDestOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel DarkenDestOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(DarkenDestOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "DarkenClear" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel DarkenClear<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(DarkenClear(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "DarkenXor" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel DarkenXor<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(DarkenXor(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "LightenSrc" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 LightenSrc(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return source;
    }

    /// <summary>
    /// Returns the result of the "LightenSrc compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> LightenSrc(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

    /// <summary>
    /// Returns the result of the "LightenSrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 LightenSrcAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(backdrop, source, Lighten(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "LightenSrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> LightenSrcAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(backdrop, source, Lighten(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "LightenSrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 LightenSrcOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(backdrop, source, Lighten(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "LightenSrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> LightenSrcOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(backdrop, source, Lighten(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "LightenSrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 LightenSrcIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "LightenSrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> LightenSrcIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "LightenSrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 LightenSrcOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "LightenSrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> LightenSrcOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "LightenDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 LightenDest(Vector4 backdrop, Vector4 source, float opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "LightenDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> LightenDest(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "LightenDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 LightenDestAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(source, backdrop, Lighten(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "LightenDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> LightenDestAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(source, backdrop, Lighten(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "LightenDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 LightenDestOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(source, backdrop, Lighten(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "LightenDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> LightenDestOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(source, backdrop, Lighten(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "LightenDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 LightenDestIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "LightenDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> LightenDestIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "LightenDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 LightenDestOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "LightenDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> LightenDestOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "LightenXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 LightenXor(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Xor(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "LightenXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> LightenXor(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Xor(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "LightenClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 LightenClear(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Clear(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "LightenClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> LightenClear(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Clear(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));


    /// <summary>
    /// Returns the result of the "LightenSrc" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel LightenSrc<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(LightenSrc(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "LightenSrcAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel LightenSrcAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(LightenSrcAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "LightenSrcOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel LightenSrcOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(LightenSrcOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "LightenSrcIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel LightenSrcIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(LightenSrcIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "LightenSrcOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel LightenSrcOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(LightenSrcOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "LightenDest" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel LightenDest<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(LightenDest(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "LightenDestAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel LightenDestAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(LightenDestAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "LightenDestOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel LightenDestOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(LightenDestOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "LightenDestIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel LightenDestIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(LightenDestIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "LightenDestOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel LightenDestOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(LightenDestOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "LightenClear" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel LightenClear<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(LightenClear(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "LightenXor" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel LightenXor<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(LightenXor(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "OverlaySrc" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 OverlaySrc(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return source;
    }

    /// <summary>
    /// Returns the result of the "OverlaySrc compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> OverlaySrc(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

    /// <summary>
    /// Returns the result of the "OverlaySrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 OverlaySrcAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(backdrop, source, Overlay(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "OverlaySrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> OverlaySrcAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(backdrop, source, Overlay(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "OverlaySrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 OverlaySrcOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(backdrop, source, Overlay(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "OverlaySrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> OverlaySrcOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(backdrop, source, Overlay(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "OverlaySrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 OverlaySrcIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "OverlaySrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> OverlaySrcIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "OverlaySrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 OverlaySrcOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "OverlaySrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> OverlaySrcOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "OverlayDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 OverlayDest(Vector4 backdrop, Vector4 source, float opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "OverlayDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> OverlayDest(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "OverlayDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 OverlayDestAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(source, backdrop, Overlay(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "OverlayDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> OverlayDestAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(source, backdrop, Overlay(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "OverlayDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 OverlayDestOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(source, backdrop, Overlay(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "OverlayDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> OverlayDestOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(source, backdrop, Overlay(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "OverlayDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 OverlayDestIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "OverlayDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> OverlayDestIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "OverlayDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 OverlayDestOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "OverlayDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> OverlayDestOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "OverlayXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 OverlayXor(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Xor(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "OverlayXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> OverlayXor(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Xor(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "OverlayClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 OverlayClear(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Clear(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "OverlayClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> OverlayClear(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Clear(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));


    /// <summary>
    /// Returns the result of the "OverlaySrc" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel OverlaySrc<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(OverlaySrc(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "OverlaySrcAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel OverlaySrcAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(OverlaySrcAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "OverlaySrcOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel OverlaySrcOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(OverlaySrcOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "OverlaySrcIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel OverlaySrcIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(OverlaySrcIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "OverlaySrcOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel OverlaySrcOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(OverlaySrcOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "OverlayDest" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel OverlayDest<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(OverlayDest(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "OverlayDestAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel OverlayDestAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(OverlayDestAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "OverlayDestOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel OverlayDestOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(OverlayDestOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "OverlayDestIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel OverlayDestIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(OverlayDestIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "OverlayDestOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel OverlayDestOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(OverlayDestOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "OverlayClear" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel OverlayClear<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(OverlayClear(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "OverlayXor" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel OverlayXor<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(OverlayXor(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "HardLightSrc" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 HardLightSrc(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return source;
    }

    /// <summary>
    /// Returns the result of the "HardLightSrc compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> HardLightSrc(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

    /// <summary>
    /// Returns the result of the "HardLightSrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 HardLightSrcAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(backdrop, source, HardLight(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "HardLightSrcAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> HardLightSrcAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(backdrop, source, HardLight(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "HardLightSrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 HardLightSrcOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(backdrop, source, HardLight(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "HardLightSrcOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> HardLightSrcOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(backdrop, source, HardLight(backdrop, source));
    }

    /// <summary>
    /// Returns the result of the "HardLightSrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 HardLightSrcIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "HardLightSrcIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> HardLightSrcIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "HardLightSrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 HardLightSrcOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "HardLightSrcOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> HardLightSrcOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "HardLightDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 HardLightDest(Vector4 backdrop, Vector4 source, float opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "HardLightDest" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> HardLightDest(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        return backdrop;
    }

    /// <summary>
    /// Returns the result of the "HardLightDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 HardLightDestAtop(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Atop(source, backdrop, HardLight(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "HardLightDestAtop" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> HardLightDestAtop(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Atop(source, backdrop, HardLight(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "HardLightDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 HardLightDestOver(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Over(source, backdrop, HardLight(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "HardLightDestOver" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> HardLightDestOver(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
    {
        source = Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl);

        return Over(source, backdrop, HardLight(source, backdrop));
    }

    /// <summary>
    /// Returns the result of the "HardLightDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 HardLightDestIn(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return In(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "HardLightDestIn" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> HardLightDestIn(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => In(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "HardLightDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 HardLightDestOut(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Out(source, backdrop);
    }

    /// <summary>
    /// Returns the result of the "HardLightDestOut" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> HardLightDestOut(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Out(Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl), backdrop);

    /// <summary>
    /// Returns the result of the "HardLightXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 HardLightXor(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Xor(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "HardLightXor" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> HardLightXor(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Xor(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));

    /// <summary>
    /// Returns the result of the "HardLightClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector4"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector4 HardLightClear(Vector4 backdrop, Vector4 source, float opacity)
    {
        source = Numerics.WithW(source, source * opacity);

        return Clear(backdrop, source);
    }

    /// <summary>
    /// Returns the result of the "HardLightClear" compositing equation.
    /// </summary>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <see cref="Vector256{Single}"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Vector256<float> HardLightClear(Vector256<float> backdrop, Vector256<float> source, Vector256<float> opacity)
        => Clear(backdrop, Avx.Blend(source, Avx.Multiply(source, opacity), BlendAlphaControl));


    /// <summary>
    /// Returns the result of the "HardLightSrc" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel HardLightSrc<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(HardLightSrc(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "HardLightSrcAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel HardLightSrcAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(HardLightSrcAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "HardLightSrcOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel HardLightSrcOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(HardLightSrcOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "HardLightSrcIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel HardLightSrcIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(HardLightSrcIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "HardLightSrcOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel HardLightSrcOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(HardLightSrcOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "HardLightDest" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel HardLightDest<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(HardLightDest(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "HardLightDestAtop" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel HardLightDestAtop<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(HardLightDestAtop(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "HardLightDestOver" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel HardLightDestOver<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(HardLightDestOver(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "HardLightDestIn" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel HardLightDestIn<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(HardLightDestIn(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "HardLightDestOut" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel HardLightDestOut<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(HardLightDestOut(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "HardLightClear" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel HardLightClear<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(HardLightClear(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }

    /// <summary>
    /// Returns the result of the "HardLightXor" compositing equation.
    /// </summary>
    /// <typeparam name="TPixel">The pixel format.</typeparam>
    /// <param name="backdrop">The backdrop vector.</param>
    /// <param name="source">The source vector.</param>
    /// <param name="opacity">The source opacity. Range 0..1</param>
    /// <returns>The <typeparamref name="TPixel"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TPixel HardLightXor<TPixel>(TPixel backdrop, TPixel source, float opacity)
        where TPixel : unmanaged, IPixel<TPixel>
    {
        opacity = Numerics.Clamp(opacity, 0, 1);
        return TPixel.FromScaledVector4(HardLightXor(backdrop.ToScaledVector4(), source.ToScaledVector4(), opacity));
    }
}
