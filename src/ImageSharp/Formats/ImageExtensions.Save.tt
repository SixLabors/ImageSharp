<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// Copyright (c) Six Labors.
// Licensed under the Six Labors Split License.

// <auto-generated />
using SixLabors.ImageSharp.Advanced;

<#
    var formats = new []{
        "Bmp",
        "Gif",
        "Jpeg",
        "Pbm",
        "Png",
        "Qoi",
        "Tga",
        "Tiff",
        "Webp",
    };

    foreach (string fmt in formats)
    {
#>
using SixLabors.ImageSharp.Formats.<#= fmt #>;
<#

    }
#>

namespace SixLabors.ImageSharp;

/// <summary>
/// Extension methods for the <see cref="Image"/> type.
/// </summary>
public static partial class ImageExtensions
{
<#
    foreach (string fmt in formats)
    {
#>
    /// <summary>
    /// Saves the image to the given stream with the <#= fmt #> format.
    /// </summary>
    /// <param name="source">The image this method extends.</param>
    /// <param name="path">The file path to save the image to.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if the path is null.</exception>
    public static void SaveAs<#= fmt #>(this Image source, string path) => SaveAs<#= fmt #>(source, path, default);

    /// <summary>
    /// Saves the image to the given stream with the <#= fmt #> format.
    /// </summary>
    /// <param name="source">The image this method extends.</param>
    /// <param name="path">The file path to save the image to.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if the path is null.</exception>
    /// <returns>A <see cref="Task"/> representing the asynchronous operation.</returns>
    public static Task SaveAs<#= fmt #>Async(this Image source, string path) => SaveAs<#= fmt #>Async(source, path, default);

    /// <summary>
    /// Saves the image to the given stream with the <#= fmt #> format.
    /// </summary>
    /// <param name="source">The image this method extends.</param>
    /// <param name="path">The file path to save the image to.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if the path is null.</exception>
    /// <returns>A <see cref="Task"/> representing the asynchronous operation.</returns>
    public static Task SaveAs<#= fmt #>Async(this Image source, string path, CancellationToken cancellationToken)
        => SaveAs<#= fmt #>Async(source, path, default, cancellationToken);

    /// <summary>
    /// Saves the image to the given stream with the <#= fmt #> format.
    /// </summary>
    /// <param name="source">The image this method extends.</param>
    /// <param name="path">The file path to save the image to.</param>
    /// <param name="encoder">The encoder to save the image with.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if the path is null.</exception>
    public static void SaveAs<#= fmt #>(this Image source, string path, <#= fmt #>Encoder encoder) =>
        source.Save(
            path,
            encoder ?? source.Configuration.ImageFormatsManager.GetEncoder(<#= fmt #>Format.Instance));

    /// <summary>
    /// Saves the image to the given stream with the <#= fmt #> format.
    /// </summary>
    /// <param name="source">The image this method extends.</param>
    /// <param name="path">The file path to save the image to.</param>
    /// <param name="encoder">The encoder to save the image with.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if the path is null.</exception>
    /// <returns>A <see cref="Task"/> representing the asynchronous operation.</returns>
    public static Task SaveAs<#= fmt #>Async(this Image source, string path, <#= fmt #>Encoder encoder, CancellationToken cancellationToken = default)
        => source.SaveAsync(
              path,
              encoder ?? source.Configuration.ImageFormatsManager.GetEncoder(<#= fmt #>Format.Instance),
              cancellationToken);

    /// <summary>
    /// Saves the image to the given stream with the <#= fmt #> format.
    /// </summary>
    /// <param name="source">The image this method extends.</param>
    /// <param name="stream">The stream to save the image to.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if the stream is null.</exception>
    public static void SaveAs<#= fmt #>(this Image source, Stream stream)
        => SaveAs<#= fmt #>(source, stream, default);

    /// <summary>
    /// Saves the image to the given stream with the <#= fmt #> format.
    /// </summary>
    /// <param name="source">The image this method extends.</param>
    /// <param name="stream">The stream to save the image to.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if the stream is null.</exception>
    /// <returns>A <see cref="Task"/> representing the asynchronous operation.</returns>
    public static Task SaveAs<#= fmt #>Async(this Image source, Stream stream, CancellationToken cancellationToken = default)
        => SaveAs<#= fmt #>Async(source, stream, default, cancellationToken);

    /// <summary>
    /// Saves the image to the given stream with the <#= fmt #> format.
    /// </summary>
    /// <param name="source">The image this method extends.</param>
    /// <param name="stream">The stream to save the image to.</param>
    /// <param name="encoder">The encoder to save the image with.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if the stream is null.</exception>
    public static void SaveAs<#= fmt #>(this Image source, Stream stream, <#= fmt #>Encoder encoder)
        => source.Save(
              stream,
              encoder ?? source.Configuration.ImageFormatsManager.GetEncoder(<#= fmt #>Format.Instance));

    /// <summary>
    /// Saves the image to the given stream with the <#= fmt #> format.
    /// </summary>
    /// <param name="source">The image this method extends.</param>
    /// <param name="stream">The stream to save the image to.</param>
    /// <param name="encoder">The encoder to save the image with.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <exception cref="System.ArgumentNullException">Thrown if the stream is null.</exception>
    /// <returns>A <see cref="Task"/> representing the asynchronous operation.</returns>
    public static Task SaveAs<#= fmt #>Async(this Image source, Stream stream, <#= fmt #>Encoder encoder, CancellationToken cancellationToken = default)
        => source.SaveAsync(
              stream,
              encoder ?? source.Configuration.ImageFormatsManager.GetEncoder(<#= fmt #>Format.Instance),
              cancellationToken);

<#
}
#>
}
