namespace SixLabors.ImageSharp.Advanced
{
    public static class AdvancedImageExtensions
    {
        public static void AcceptVisitor(this SixLabors.ImageSharp.Image source, SixLabors.ImageSharp.Advanced.IImageVisitor visitor) { }
        public static System.Threading.Tasks.Task AcceptVisitorAsync(this SixLabors.ImageSharp.Image source, SixLabors.ImageSharp.Advanced.IImageVisitorAsync visitor, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Memory<TPixel> DangerousGetPixelRowMemory<TPixel>(this SixLabors.ImageSharp.ImageFrame<TPixel> source, int rowIndex)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static System.Memory<TPixel> DangerousGetPixelRowMemory<TPixel>(this SixLabors.ImageSharp.Image<TPixel> source, int rowIndex)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Formats.IImageEncoder DetectEncoder(this SixLabors.ImageSharp.Image source, string filePath) { }
        public static SixLabors.ImageSharp.Configuration GetConfiguration(this SixLabors.ImageSharp.Image source) { }
        public static SixLabors.ImageSharp.Configuration GetConfiguration(this SixLabors.ImageSharp.ImageFrame source) { }
        public static SixLabors.ImageSharp.Memory.IMemoryGroup<TPixel> GetPixelMemoryGroup<TPixel>(this SixLabors.ImageSharp.ImageFrame<TPixel> source)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Memory.IMemoryGroup<TPixel> GetPixelMemoryGroup<TPixel>(this SixLabors.ImageSharp.Image<TPixel> source)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public interface IImageVisitor
    {
        void Visit<TPixel>(SixLabors.ImageSharp.Image<TPixel> image)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
    }
    public interface IImageVisitorAsync
    {
        System.Threading.Tasks.Task VisitAsync<TPixel>(SixLabors.ImageSharp.Image<TPixel> image, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
    }
    public interface IRowIntervalOperation
    {
        void Invoke(in SixLabors.ImageSharp.Memory.RowInterval rows);
    }
    public interface IRowIntervalOperation<TBuffer>
        where TBuffer :  unmanaged
    {
        int GetRequiredBufferLength(SixLabors.ImageSharp.Rectangle bounds);
        void Invoke(in SixLabors.ImageSharp.Memory.RowInterval rows, System.Span<TBuffer> span);
    }
    public interface IRowOperation
    {
        void Invoke(int y);
    }
    public interface IRowOperation<TBuffer>
        where TBuffer :  unmanaged
    {
        int GetRequiredBufferLength(SixLabors.ImageSharp.Rectangle bounds);
        void Invoke(int y, System.Span<TBuffer> span);
    }
    public readonly struct ParallelExecutionSettings
    {
        public const int DefaultMinimumPixelsProcessedPerTask = 4096;
        public ParallelExecutionSettings(int maxDegreeOfParallelism, SixLabors.ImageSharp.Memory.MemoryAllocator memoryAllocator) { }
        public ParallelExecutionSettings(int maxDegreeOfParallelism, int minimumPixelsProcessedPerTask, SixLabors.ImageSharp.Memory.MemoryAllocator memoryAllocator) { }
        public int MaxDegreeOfParallelism { get; }
        public SixLabors.ImageSharp.Memory.MemoryAllocator MemoryAllocator { get; }
        public int MinimumPixelsProcessedPerTask { get; }
        public SixLabors.ImageSharp.Advanced.ParallelExecutionSettings MultiplyMinimumPixelsPerTask(int multiplier) { }
        public static SixLabors.ImageSharp.Advanced.ParallelExecutionSettings FromConfiguration(SixLabors.ImageSharp.Configuration configuration) { }
    }
    public static class ParallelRowIterator
    {
        public static void IterateRowIntervals<T>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Rectangle rectangle, in T operation)
            where T :  struct, SixLabors.ImageSharp.Advanced.IRowIntervalOperation { }
        public static void IterateRowIntervals<T>(SixLabors.ImageSharp.Rectangle rectangle, in SixLabors.ImageSharp.Advanced.ParallelExecutionSettings parallelSettings, in T operation)
            where T :  struct, SixLabors.ImageSharp.Advanced.IRowIntervalOperation { }
        public static void IterateRowIntervals<T, TBuffer>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Rectangle rectangle, in T operation)
            where T :  struct, SixLabors.ImageSharp.Advanced.IRowIntervalOperation<TBuffer>
            where TBuffer :  unmanaged { }
        public static void IterateRowIntervals<T, TBuffer>(SixLabors.ImageSharp.Rectangle rectangle, in SixLabors.ImageSharp.Advanced.ParallelExecutionSettings parallelSettings, in T operation)
            where T :  struct, SixLabors.ImageSharp.Advanced.IRowIntervalOperation<TBuffer>
            where TBuffer :  unmanaged { }
        public static void IterateRows<T>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Rectangle rectangle, in T operation)
            where T :  struct, SixLabors.ImageSharp.Advanced.IRowOperation { }
        public static void IterateRows<T>(SixLabors.ImageSharp.Rectangle rectangle, in SixLabors.ImageSharp.Advanced.ParallelExecutionSettings parallelSettings, in T operation)
            where T :  struct, SixLabors.ImageSharp.Advanced.IRowOperation { }
        public static void IterateRows<T, TBuffer>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Rectangle rectangle, in T operation)
            where T :  struct, SixLabors.ImageSharp.Advanced.IRowOperation<TBuffer>
            where TBuffer :  unmanaged { }
        public static void IterateRows<T, TBuffer>(SixLabors.ImageSharp.Rectangle rectangle, in SixLabors.ImageSharp.Advanced.ParallelExecutionSettings parallelSettings, in T operation)
            where T :  struct, SixLabors.ImageSharp.Advanced.IRowOperation<TBuffer>
            where TBuffer :  unmanaged { }
    }
}
namespace SixLabors.ImageSharp
{
    public enum ByteOrder
    {
        BigEndian = 0,
        LittleEndian = 1,
    }
    public readonly struct Color : System.IEquatable<SixLabors.ImageSharp.Color>
    {
        public static readonly SixLabors.ImageSharp.Color AliceBlue;
        public static readonly SixLabors.ImageSharp.Color AntiqueWhite;
        public static readonly SixLabors.ImageSharp.Color Aqua;
        public static readonly SixLabors.ImageSharp.Color Aquamarine;
        public static readonly SixLabors.ImageSharp.Color Azure;
        public static readonly SixLabors.ImageSharp.Color Beige;
        public static readonly SixLabors.ImageSharp.Color Bisque;
        public static readonly SixLabors.ImageSharp.Color Black;
        public static readonly SixLabors.ImageSharp.Color BlanchedAlmond;
        public static readonly SixLabors.ImageSharp.Color Blue;
        public static readonly SixLabors.ImageSharp.Color BlueViolet;
        public static readonly SixLabors.ImageSharp.Color Brown;
        public static readonly SixLabors.ImageSharp.Color BurlyWood;
        public static readonly SixLabors.ImageSharp.Color CadetBlue;
        public static readonly SixLabors.ImageSharp.Color Chartreuse;
        public static readonly SixLabors.ImageSharp.Color Chocolate;
        public static readonly SixLabors.ImageSharp.Color Coral;
        public static readonly SixLabors.ImageSharp.Color CornflowerBlue;
        public static readonly SixLabors.ImageSharp.Color Cornsilk;
        public static readonly SixLabors.ImageSharp.Color Crimson;
        public static readonly SixLabors.ImageSharp.Color Cyan;
        public static readonly SixLabors.ImageSharp.Color DarkBlue;
        public static readonly SixLabors.ImageSharp.Color DarkCyan;
        public static readonly SixLabors.ImageSharp.Color DarkGoldenrod;
        public static readonly SixLabors.ImageSharp.Color DarkGray;
        public static readonly SixLabors.ImageSharp.Color DarkGreen;
        public static readonly SixLabors.ImageSharp.Color DarkGrey;
        public static readonly SixLabors.ImageSharp.Color DarkKhaki;
        public static readonly SixLabors.ImageSharp.Color DarkMagenta;
        public static readonly SixLabors.ImageSharp.Color DarkOliveGreen;
        public static readonly SixLabors.ImageSharp.Color DarkOrange;
        public static readonly SixLabors.ImageSharp.Color DarkOrchid;
        public static readonly SixLabors.ImageSharp.Color DarkRed;
        public static readonly SixLabors.ImageSharp.Color DarkSalmon;
        public static readonly SixLabors.ImageSharp.Color DarkSeaGreen;
        public static readonly SixLabors.ImageSharp.Color DarkSlateBlue;
        public static readonly SixLabors.ImageSharp.Color DarkSlateGray;
        public static readonly SixLabors.ImageSharp.Color DarkSlateGrey;
        public static readonly SixLabors.ImageSharp.Color DarkTurquoise;
        public static readonly SixLabors.ImageSharp.Color DarkViolet;
        public static readonly SixLabors.ImageSharp.Color DeepPink;
        public static readonly SixLabors.ImageSharp.Color DeepSkyBlue;
        public static readonly SixLabors.ImageSharp.Color DimGray;
        public static readonly SixLabors.ImageSharp.Color DimGrey;
        public static readonly SixLabors.ImageSharp.Color DodgerBlue;
        public static readonly SixLabors.ImageSharp.Color Firebrick;
        public static readonly SixLabors.ImageSharp.Color FloralWhite;
        public static readonly SixLabors.ImageSharp.Color ForestGreen;
        public static readonly SixLabors.ImageSharp.Color Fuchsia;
        public static readonly SixLabors.ImageSharp.Color Gainsboro;
        public static readonly SixLabors.ImageSharp.Color GhostWhite;
        public static readonly SixLabors.ImageSharp.Color Gold;
        public static readonly SixLabors.ImageSharp.Color Goldenrod;
        public static readonly SixLabors.ImageSharp.Color Gray;
        public static readonly SixLabors.ImageSharp.Color Green;
        public static readonly SixLabors.ImageSharp.Color GreenYellow;
        public static readonly SixLabors.ImageSharp.Color Grey;
        public static readonly SixLabors.ImageSharp.Color Honeydew;
        public static readonly SixLabors.ImageSharp.Color HotPink;
        public static readonly SixLabors.ImageSharp.Color IndianRed;
        public static readonly SixLabors.ImageSharp.Color Indigo;
        public static readonly SixLabors.ImageSharp.Color Ivory;
        public static readonly SixLabors.ImageSharp.Color Khaki;
        public static readonly SixLabors.ImageSharp.Color Lavender;
        public static readonly SixLabors.ImageSharp.Color LavenderBlush;
        public static readonly SixLabors.ImageSharp.Color LawnGreen;
        public static readonly SixLabors.ImageSharp.Color LemonChiffon;
        public static readonly SixLabors.ImageSharp.Color LightBlue;
        public static readonly SixLabors.ImageSharp.Color LightCoral;
        public static readonly SixLabors.ImageSharp.Color LightCyan;
        public static readonly SixLabors.ImageSharp.Color LightGoldenrodYellow;
        public static readonly SixLabors.ImageSharp.Color LightGray;
        public static readonly SixLabors.ImageSharp.Color LightGreen;
        public static readonly SixLabors.ImageSharp.Color LightGrey;
        public static readonly SixLabors.ImageSharp.Color LightPink;
        public static readonly SixLabors.ImageSharp.Color LightSalmon;
        public static readonly SixLabors.ImageSharp.Color LightSeaGreen;
        public static readonly SixLabors.ImageSharp.Color LightSkyBlue;
        public static readonly SixLabors.ImageSharp.Color LightSlateGray;
        public static readonly SixLabors.ImageSharp.Color LightSlateGrey;
        public static readonly SixLabors.ImageSharp.Color LightSteelBlue;
        public static readonly SixLabors.ImageSharp.Color LightYellow;
        public static readonly SixLabors.ImageSharp.Color Lime;
        public static readonly SixLabors.ImageSharp.Color LimeGreen;
        public static readonly SixLabors.ImageSharp.Color Linen;
        public static readonly SixLabors.ImageSharp.Color Magenta;
        public static readonly SixLabors.ImageSharp.Color Maroon;
        public static readonly SixLabors.ImageSharp.Color MediumAquamarine;
        public static readonly SixLabors.ImageSharp.Color MediumBlue;
        public static readonly SixLabors.ImageSharp.Color MediumOrchid;
        public static readonly SixLabors.ImageSharp.Color MediumPurple;
        public static readonly SixLabors.ImageSharp.Color MediumSeaGreen;
        public static readonly SixLabors.ImageSharp.Color MediumSlateBlue;
        public static readonly SixLabors.ImageSharp.Color MediumSpringGreen;
        public static readonly SixLabors.ImageSharp.Color MediumTurquoise;
        public static readonly SixLabors.ImageSharp.Color MediumVioletRed;
        public static readonly SixLabors.ImageSharp.Color MidnightBlue;
        public static readonly SixLabors.ImageSharp.Color MintCream;
        public static readonly SixLabors.ImageSharp.Color MistyRose;
        public static readonly SixLabors.ImageSharp.Color Moccasin;
        public static readonly SixLabors.ImageSharp.Color NavajoWhite;
        public static readonly SixLabors.ImageSharp.Color Navy;
        public static readonly SixLabors.ImageSharp.Color OldLace;
        public static readonly SixLabors.ImageSharp.Color Olive;
        public static readonly SixLabors.ImageSharp.Color OliveDrab;
        public static readonly SixLabors.ImageSharp.Color Orange;
        public static readonly SixLabors.ImageSharp.Color OrangeRed;
        public static readonly SixLabors.ImageSharp.Color Orchid;
        public static readonly SixLabors.ImageSharp.Color PaleGoldenrod;
        public static readonly SixLabors.ImageSharp.Color PaleGreen;
        public static readonly SixLabors.ImageSharp.Color PaleTurquoise;
        public static readonly SixLabors.ImageSharp.Color PaleVioletRed;
        public static readonly SixLabors.ImageSharp.Color PapayaWhip;
        public static readonly SixLabors.ImageSharp.Color PeachPuff;
        public static readonly SixLabors.ImageSharp.Color Peru;
        public static readonly SixLabors.ImageSharp.Color Pink;
        public static readonly SixLabors.ImageSharp.Color Plum;
        public static readonly SixLabors.ImageSharp.Color PowderBlue;
        public static readonly SixLabors.ImageSharp.Color Purple;
        public static readonly SixLabors.ImageSharp.Color RebeccaPurple;
        public static readonly SixLabors.ImageSharp.Color Red;
        public static readonly SixLabors.ImageSharp.Color RosyBrown;
        public static readonly SixLabors.ImageSharp.Color RoyalBlue;
        public static readonly SixLabors.ImageSharp.Color SaddleBrown;
        public static readonly SixLabors.ImageSharp.Color Salmon;
        public static readonly SixLabors.ImageSharp.Color SandyBrown;
        public static readonly SixLabors.ImageSharp.Color SeaGreen;
        public static readonly SixLabors.ImageSharp.Color SeaShell;
        public static readonly SixLabors.ImageSharp.Color Sienna;
        public static readonly SixLabors.ImageSharp.Color Silver;
        public static readonly SixLabors.ImageSharp.Color SkyBlue;
        public static readonly SixLabors.ImageSharp.Color SlateBlue;
        public static readonly SixLabors.ImageSharp.Color SlateGray;
        public static readonly SixLabors.ImageSharp.Color SlateGrey;
        public static readonly SixLabors.ImageSharp.Color Snow;
        public static readonly SixLabors.ImageSharp.Color SpringGreen;
        public static readonly SixLabors.ImageSharp.Color SteelBlue;
        public static readonly SixLabors.ImageSharp.Color Tan;
        public static readonly SixLabors.ImageSharp.Color Teal;
        public static readonly SixLabors.ImageSharp.Color Thistle;
        public static readonly SixLabors.ImageSharp.Color Tomato;
        public static readonly SixLabors.ImageSharp.Color Transparent;
        public static readonly SixLabors.ImageSharp.Color Turquoise;
        public static readonly SixLabors.ImageSharp.Color Violet;
        public static readonly SixLabors.ImageSharp.Color Wheat;
        public static readonly SixLabors.ImageSharp.Color White;
        public static readonly SixLabors.ImageSharp.Color WhiteSmoke;
        public static readonly SixLabors.ImageSharp.Color Yellow;
        public static readonly SixLabors.ImageSharp.Color YellowGreen;
        public Color(SixLabors.ImageSharp.PixelFormats.Abgr32 pixel) { }
        public Color(SixLabors.ImageSharp.PixelFormats.Argb32 pixel) { }
        public Color(SixLabors.ImageSharp.PixelFormats.Bgr24 pixel) { }
        public Color(SixLabors.ImageSharp.PixelFormats.Bgra32 pixel) { }
        public Color(SixLabors.ImageSharp.PixelFormats.L16 pixel) { }
        public Color(SixLabors.ImageSharp.PixelFormats.La32 pixel) { }
        public Color(SixLabors.ImageSharp.PixelFormats.Rgb24 pixel) { }
        public Color(SixLabors.ImageSharp.PixelFormats.Rgb48 pixel) { }
        public Color(SixLabors.ImageSharp.PixelFormats.Rgba32 pixel) { }
        public Color(SixLabors.ImageSharp.PixelFormats.Rgba64 pixel) { }
        public Color(System.Numerics.Vector4 vector) { }
        public static System.ReadOnlyMemory<SixLabors.ImageSharp.Color> WebSafePalette { get; }
        public static System.ReadOnlyMemory<SixLabors.ImageSharp.Color> WernerPalette { get; }
        public bool Equals(SixLabors.ImageSharp.Color other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public string ToHex() { }
        public TPixel ToPixel<TPixel>()
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public override string ToString() { }
        public SixLabors.ImageSharp.Color WithAlpha(float alpha) { }
        public static SixLabors.ImageSharp.Color FromPixel<TPixel>(TPixel pixel)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Color FromRgb(byte r, byte g, byte b) { }
        public static SixLabors.ImageSharp.Color FromRgba(byte r, byte g, byte b, byte a) { }
        public static SixLabors.ImageSharp.Color Parse(string input) { }
        public static SixLabors.ImageSharp.Color ParseHex(string hex) { }
        public static void ToPixel<TPixel>(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<SixLabors.ImageSharp.Color> source, System.Span<TPixel> destination)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static bool TryParse(string input, out SixLabors.ImageSharp.Color result) { }
        public static bool TryParseHex(string hex, out SixLabors.ImageSharp.Color result) { }
        public static System.Numerics.Vector4 op_Explicit(SixLabors.ImageSharp.Color color) { }
        public static SixLabors.ImageSharp.Color op_Explicit(System.Numerics.Vector4 source) { }
        public static bool operator !=(SixLabors.ImageSharp.Color left, SixLabors.ImageSharp.Color right) { }
        public static bool operator ==(SixLabors.ImageSharp.Color left, SixLabors.ImageSharp.Color right) { }
    }
    public struct ColorMatrix : System.IEquatable<SixLabors.ImageSharp.ColorMatrix>
    {
        public float M11;
        public float M12;
        public float M13;
        public float M14;
        public float M21;
        public float M22;
        public float M23;
        public float M24;
        public float M31;
        public float M32;
        public float M33;
        public float M34;
        public float M41;
        public float M42;
        public float M43;
        public float M44;
        public float M51;
        public float M52;
        public float M53;
        public float M54;
        public ColorMatrix(
                    float m11,
                    float m12,
                    float m13,
                    float m14,
                    float m21,
                    float m22,
                    float m23,
                    float m24,
                    float m31,
                    float m32,
                    float m33,
                    float m34,
                    float m41,
                    float m42,
                    float m43,
                    float m44,
                    float m51,
                    float m52,
                    float m53,
                    float m54) { }
        public bool IsIdentity { get; }
        public static SixLabors.ImageSharp.ColorMatrix Identity { get; }
        public bool Equals(SixLabors.ImageSharp.ColorMatrix other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorMatrix value1, SixLabors.ImageSharp.ColorMatrix value2) { }
        public static SixLabors.ImageSharp.ColorMatrix operator *(SixLabors.ImageSharp.ColorMatrix value1, SixLabors.ImageSharp.ColorMatrix value2) { }
        public static SixLabors.ImageSharp.ColorMatrix operator *(SixLabors.ImageSharp.ColorMatrix value1, float value2) { }
        public static SixLabors.ImageSharp.ColorMatrix operator +(SixLabors.ImageSharp.ColorMatrix value1, SixLabors.ImageSharp.ColorMatrix value2) { }
        public static SixLabors.ImageSharp.ColorMatrix operator -(SixLabors.ImageSharp.ColorMatrix value) { }
        public static SixLabors.ImageSharp.ColorMatrix operator -(SixLabors.ImageSharp.ColorMatrix value1, SixLabors.ImageSharp.ColorMatrix value2) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorMatrix value1, SixLabors.ImageSharp.ColorMatrix value2) { }
    }
    public sealed class Configuration
    {
        public Configuration() { }
        public Configuration(params SixLabors.ImageSharp.Formats.IImageFormatConfigurationModule[] configurationModules) { }
        public System.Collections.Generic.IEnumerable<SixLabors.ImageSharp.Formats.IImageFormat> ImageFormats { get; }
        public SixLabors.ImageSharp.Formats.ImageFormatManager ImageFormatsManager { get; }
        public int MaxDegreeOfParallelism { get; set; }
        public SixLabors.ImageSharp.Memory.MemoryAllocator MemoryAllocator { get; set; }
        public bool PreferContiguousImageBuffers { get; set; }
        public System.Collections.Generic.IDictionary<object, object> Properties { get; }
        public SixLabors.ImageSharp.ReadOrigin ReadOrigin { get; set; }
        public int StreamProcessingBufferSize { get; set; }
        public static SixLabors.ImageSharp.Configuration Default { get; }
        public SixLabors.ImageSharp.Configuration Clone() { }
        public void Configure(SixLabors.ImageSharp.Formats.IImageFormatConfigurationModule configuration) { }
    }
    public readonly struct DenseMatrix<T> : System.IEquatable<SixLabors.ImageSharp.DenseMatrix<T>>
        where T :  struct, System.IEquatable<T>
    {
        public DenseMatrix(int length) { }
        public DenseMatrix(T[] data) { }
        public DenseMatrix(int columns, int rows) { }
        public DenseMatrix(int columns, int rows, System.Span<T> data) { }
        public int Columns { get; }
        public int Count { get; }
        public T[] Data { get; }
        public T& this[int row, int column] { get; }
        public int Rows { get; }
        public SixLabors.ImageSharp.Size Size { get; }
        public System.Span<T> Span { get; }
        public void Clear() { }
        public bool Equals(SixLabors.ImageSharp.DenseMatrix<T> other) { }
        public override bool Equals(object obj) { }
        public void Fill(T value) { }
        public override int GetHashCode() { }
        public SixLabors.ImageSharp.DenseMatrix<T> Transpose() { }
        public static SixLabors.ImageSharp.DenseMatrix<T> op_Implicit(T[] data) { }
        public static T[] op_Implicit(in SixLabors.ImageSharp.DenseMatrix<T> data) { }
        public static bool operator !=(SixLabors.ImageSharp.DenseMatrix<T> left, SixLabors.ImageSharp.DenseMatrix<T> right) { }
        public static bool operator ==(SixLabors.ImageSharp.DenseMatrix<T> left, SixLabors.ImageSharp.DenseMatrix<T> right) { }
    }
    public static class GeometryUtilities
    {
        public static float DegreeToRadian(float degree) { }
        public static float RadianToDegree(float radian) { }
    }
    public static class GraphicOptionsDefaultsExtensions
    {
        public static SixLabors.ImageSharp.GraphicsOptions GetGraphicsOptions(this SixLabors.ImageSharp.Configuration configuration) { }
        public static SixLabors.ImageSharp.GraphicsOptions GetGraphicsOptions(this SixLabors.ImageSharp.Processing.IImageProcessingContext context) { }
        public static void SetGraphicsOptions(this SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.GraphicsOptions options) { }
        public static void SetGraphicsOptions(this SixLabors.ImageSharp.Configuration configuration, System.Action<SixLabors.ImageSharp.GraphicsOptions> optionsBuilder) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext SetGraphicsOptions(this SixLabors.ImageSharp.Processing.IImageProcessingContext context, SixLabors.ImageSharp.GraphicsOptions options) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext SetGraphicsOptions(this SixLabors.ImageSharp.Processing.IImageProcessingContext context, System.Action<SixLabors.ImageSharp.GraphicsOptions> optionsBuilder) { }
    }
    public class GraphicsOptions : SixLabors.ImageSharp.IDeepCloneable<SixLabors.ImageSharp.GraphicsOptions>
    {
        public GraphicsOptions() { }
        public SixLabors.ImageSharp.PixelFormats.PixelAlphaCompositionMode AlphaCompositionMode { get; set; }
        public bool Antialias { get; set; }
        public int AntialiasSubpixelDepth { get; set; }
        public float BlendPercentage { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelColorBlendingMode ColorBlendingMode { get; set; }
        public SixLabors.ImageSharp.GraphicsOptions DeepClone() { }
    }
    public interface IDeepCloneable
    {
        SixLabors.ImageSharp.IDeepCloneable DeepClone();
    }
    public interface IDeepCloneable<out T>
        where out T :  class
    {
        T DeepClone();
    }
    public interface IImage : SixLabors.ImageSharp.IImageInfo, System.IDisposable { }
    public interface IImageInfo
    {
        int Height { get; }
        SixLabors.ImageSharp.Metadata.ImageMetadata Metadata { get; }
        SixLabors.ImageSharp.Formats.PixelTypeInfo PixelType { get; }
        int Width { get; }
    }
    public abstract class Image : SixLabors.ImageSharp.IImage, SixLabors.ImageSharp.IImageInfo, System.IDisposable
    {
        protected Image(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Formats.PixelTypeInfo pixelType, SixLabors.ImageSharp.Metadata.ImageMetadata metadata, SixLabors.ImageSharp.Size size) { }
        public SixLabors.ImageSharp.ImageFrameCollection Frames { get; }
        public int Height { get; }
        public SixLabors.ImageSharp.Metadata.ImageMetadata Metadata { get; }
        protected abstract SixLabors.ImageSharp.ImageFrameCollection NonGenericFrameCollection { get; }
        public SixLabors.ImageSharp.Formats.PixelTypeInfo PixelType { get; }
        public int Width { get; }
        public SixLabors.ImageSharp.Image<TPixel2> CloneAs<TPixel2>()
            where TPixel2 :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel2> { }
        public abstract SixLabors.ImageSharp.Image<TPixel2> CloneAs<TPixel2>(SixLabors.ImageSharp.Configuration configuration)
            where TPixel2 :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel2>;
        public void Dispose() { }
        protected abstract void Dispose(bool disposing);
        public void Save(System.IO.Stream stream, SixLabors.ImageSharp.Formats.IImageEncoder encoder) { }
        public System.Threading.Tasks.Task SaveAsync(System.IO.Stream stream, SixLabors.ImageSharp.Formats.IImageEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        protected void UpdateSize(SixLabors.ImageSharp.Size size) { }
        public static System.Threading.Tasks.Task<SixLabors.ImageSharp.Formats.IImageFormat> DetectFormatAsync(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<SixLabors.ImageSharp.Formats.IImageFormat> DetectFormatAsync(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public static SixLabors.ImageSharp.IImageInfo Identify(System.IO.Stream stream) { }
        public static SixLabors.ImageSharp.IImageInfo Identify(System.ReadOnlySpan<byte> data) { }
        public static SixLabors.ImageSharp.IImageInfo Identify(string filePath) { }
        public static SixLabors.ImageSharp.IImageInfo Identify(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream) { }
        public static SixLabors.ImageSharp.IImageInfo Identify(System.IO.Stream stream, out SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public static SixLabors.ImageSharp.IImageInfo Identify(System.ReadOnlySpan<byte> data, out SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public static SixLabors.ImageSharp.IImageInfo Identify(string filePath, out SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public static SixLabors.ImageSharp.IImageInfo Identify(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, out SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public static SixLabors.ImageSharp.IImageInfo Identify(SixLabors.ImageSharp.Formats.DecoderOptions options, System.ReadOnlySpan<byte> data, out SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public static SixLabors.ImageSharp.IImageInfo Identify(SixLabors.ImageSharp.Formats.DecoderOptions options, string filePath, out SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public static System.Threading.Tasks.Task<SixLabors.ImageSharp.IImageInfo> IdentifyAsync(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<SixLabors.ImageSharp.IImageInfo> IdentifyAsync(string filePath, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<SixLabors.ImageSharp.IImageInfo> IdentifyAsync(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<SixLabors.ImageSharp.IImageInfo> IdentifyAsync(SixLabors.ImageSharp.Formats.DecoderOptions options, string filePath, System.Threading.CancellationToken cancellationToken = default) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "ImageInfo",
                "Format"})]
        public static System.Threading.Tasks.Task<System.ValueTuple<SixLabors.ImageSharp.IImageInfo, SixLabors.ImageSharp.Formats.IImageFormat>> IdentifyWithFormatAsync(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "ImageInfo",
                "Format"})]
        public static System.Threading.Tasks.Task<System.ValueTuple<SixLabors.ImageSharp.IImageInfo, SixLabors.ImageSharp.Formats.IImageFormat>> IdentifyWithFormatAsync(string filePath, System.Threading.CancellationToken cancellationToken = default) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "ImageInfo",
                "Format"})]
        public static System.Threading.Tasks.Task<System.ValueTuple<SixLabors.ImageSharp.IImageInfo, SixLabors.ImageSharp.Formats.IImageFormat>> IdentifyWithFormatAsync(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "ImageInfo",
                "Format"})]
        public static System.Threading.Tasks.Task<System.ValueTuple<SixLabors.ImageSharp.IImageInfo, SixLabors.ImageSharp.Formats.IImageFormat>> IdentifyWithFormatAsync(SixLabors.ImageSharp.Formats.DecoderOptions options, string filePath, System.Threading.CancellationToken cancellationToken = default) { }
        public static SixLabors.ImageSharp.Image Load(System.IO.Stream stream) { }
        public static SixLabors.ImageSharp.Image Load(System.ReadOnlySpan<byte> data) { }
        public static SixLabors.ImageSharp.Image Load(string path) { }
        public static SixLabors.ImageSharp.Image Load(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream) { }
        public static SixLabors.ImageSharp.Image Load(SixLabors.ImageSharp.Formats.DecoderOptions options, System.ReadOnlySpan<byte> data) { }
        public static SixLabors.ImageSharp.Image Load(SixLabors.ImageSharp.Formats.DecoderOptions options, string path) { }
        public static SixLabors.ImageSharp.Image Load(System.IO.Stream stream, out SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public static SixLabors.ImageSharp.Image Load(System.ReadOnlySpan<byte> data, out SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public static SixLabors.ImageSharp.Image Load(string path, out SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public static SixLabors.ImageSharp.Image Load(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, out SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public static SixLabors.ImageSharp.Image Load(SixLabors.ImageSharp.Formats.DecoderOptions options, System.ReadOnlySpan<byte> data, out SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public static SixLabors.ImageSharp.Image Load(SixLabors.ImageSharp.Formats.DecoderOptions options, string path, out SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public static SixLabors.ImageSharp.Image<TPixel> Load<TPixel>(System.IO.Stream stream)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> Load<TPixel>(System.ReadOnlySpan<byte> data)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> Load<TPixel>(string path)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> Load<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> Load<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.ReadOnlySpan<byte> data)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> Load<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, string path)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> Load<TPixel>(System.IO.Stream stream, out SixLabors.ImageSharp.Formats.IImageFormat format)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> Load<TPixel>(System.ReadOnlySpan<byte> data, out SixLabors.ImageSharp.Formats.IImageFormat format)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> Load<TPixel>(string path, out SixLabors.ImageSharp.Formats.IImageFormat format)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> Load<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, out SixLabors.ImageSharp.Formats.IImageFormat format)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> Load<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.ReadOnlySpan<byte> data, out SixLabors.ImageSharp.Formats.IImageFormat format)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> Load<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, string path, out SixLabors.ImageSharp.Formats.IImageFormat format)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static System.Threading.Tasks.Task<SixLabors.ImageSharp.Image> LoadAsync(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<SixLabors.ImageSharp.Image> LoadAsync(string path, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<SixLabors.ImageSharp.Image> LoadAsync(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<SixLabors.ImageSharp.Image> LoadAsync(SixLabors.ImageSharp.Formats.DecoderOptions options, string path, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task<SixLabors.ImageSharp.Image<TPixel>> LoadAsync<TPixel>(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static System.Threading.Tasks.Task<SixLabors.ImageSharp.Image<TPixel>> LoadAsync<TPixel>(string path, System.Threading.CancellationToken cancellationToken = default)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static System.Threading.Tasks.Task<SixLabors.ImageSharp.Image<TPixel>> LoadAsync<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static System.Threading.Tasks.Task<SixLabors.ImageSharp.Image<TPixel>> LoadAsync<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, string path, System.Threading.CancellationToken cancellationToken = default)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> LoadPixelData<TPixel>(System.ReadOnlySpan<byte> data, int width, int height)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> LoadPixelData<TPixel>(System.ReadOnlySpan<TPixel> data, int width, int height)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> LoadPixelData<TPixel>(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<byte> data, int width, int height)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> LoadPixelData<TPixel>(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> data, int width, int height)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Image",
                "Format"})]
        public static System.Threading.Tasks.Task<System.ValueTuple<SixLabors.ImageSharp.Image, SixLabors.ImageSharp.Formats.IImageFormat>> LoadWithFormatAsync(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Image",
                "Format"})]
        public static System.Threading.Tasks.Task<System.ValueTuple<SixLabors.ImageSharp.Image, SixLabors.ImageSharp.Formats.IImageFormat>> LoadWithFormatAsync(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Image",
                "Format"})]
        public static System.Threading.Tasks.Task<System.ValueTuple<SixLabors.ImageSharp.Image<TPixel>, SixLabors.ImageSharp.Formats.IImageFormat>> LoadWithFormatAsync<TPixel>(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Image",
                "Format"})]
        public static System.Threading.Tasks.Task<System.ValueTuple<SixLabors.ImageSharp.Image<TPixel>, SixLabors.ImageSharp.Formats.IImageFormat>> LoadWithFormatAsync<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static bool TryDetectFormat(System.IO.Stream stream, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format) { }
        public static bool TryDetectFormat(System.ReadOnlySpan<byte> data, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format) { }
        public static bool TryDetectFormat(string filePath, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format) { }
        public static bool TryDetectFormat(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format) { }
        public static bool TryDetectFormat(SixLabors.ImageSharp.Formats.DecoderOptions options, System.ReadOnlySpan<byte> data, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format) { }
        public static bool TryDetectFormat(SixLabors.ImageSharp.Formats.DecoderOptions options, string filePath, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format) { }
        public static SixLabors.ImageSharp.Image<TPixel> WrapMemory<TPixel>(System.Buffers.IMemoryOwner<byte> byteMemoryOwner, int width, int height)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> WrapMemory<TPixel>(System.Buffers.IMemoryOwner<TPixel> pixelMemoryOwner, int width, int height)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> WrapMemory<TPixel>(System.Memory<byte> byteMemory, int width, int height)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> WrapMemory<TPixel>(System.Memory<TPixel> pixelMemory, int width, int height)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> WrapMemory<TPixel>(SixLabors.ImageSharp.Configuration configuration, System.Buffers.IMemoryOwner<byte> byteMemoryOwner, int width, int height)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> WrapMemory<TPixel>(SixLabors.ImageSharp.Configuration configuration, System.Buffers.IMemoryOwner<TPixel> pixelMemoryOwner, int width, int height)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> WrapMemory<TPixel>(SixLabors.ImageSharp.Configuration configuration, System.Memory<byte> byteMemory, int width, int height)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> WrapMemory<TPixel>(SixLabors.ImageSharp.Configuration configuration, System.Memory<TPixel> pixelMemory, int width, int height)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static unsafe SixLabors.ImageSharp.Image<TPixel> WrapMemory<TPixel>(void* pointer, int bufferSizeInBytes, int width, int height)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> WrapMemory<TPixel>(SixLabors.ImageSharp.Configuration configuration, System.Buffers.IMemoryOwner<byte> byteMemoryOwner, int width, int height, SixLabors.ImageSharp.Metadata.ImageMetadata metadata)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> WrapMemory<TPixel>(SixLabors.ImageSharp.Configuration configuration, System.Buffers.IMemoryOwner<TPixel> pixelMemoryOwner, int width, int height, SixLabors.ImageSharp.Metadata.ImageMetadata metadata)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> WrapMemory<TPixel>(SixLabors.ImageSharp.Configuration configuration, System.Memory<byte> byteMemory, int width, int height, SixLabors.ImageSharp.Metadata.ImageMetadata metadata)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> WrapMemory<TPixel>(SixLabors.ImageSharp.Configuration configuration, System.Memory<TPixel> pixelMemory, int width, int height, SixLabors.ImageSharp.Metadata.ImageMetadata metadata)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static unsafe SixLabors.ImageSharp.Image<TPixel> WrapMemory<TPixel>(SixLabors.ImageSharp.Configuration configuration, void* pointer, int bufferSizeInBytes, int width, int height)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static unsafe SixLabors.ImageSharp.Image<TPixel> WrapMemory<TPixel>(SixLabors.ImageSharp.Configuration configuration, void* pointer, int bufferSizeInBytes, int width, int height, SixLabors.ImageSharp.Metadata.ImageMetadata metadata)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public static class ImageExtensions
    {
        public static void Save(this SixLabors.ImageSharp.Image source, string path) { }
        public static void Save(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public static void Save(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.IImageEncoder encoder) { }
        public static void SaveAsBmp(this SixLabors.ImageSharp.Image source, System.IO.Stream stream) { }
        public static void SaveAsBmp(this SixLabors.ImageSharp.Image source, string path) { }
        public static void SaveAsBmp(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Bmp.BmpEncoder encoder) { }
        public static void SaveAsBmp(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Bmp.BmpEncoder encoder) { }
        public static System.Threading.Tasks.Task SaveAsBmpAsync(this SixLabors.ImageSharp.Image source, string path) { }
        public static System.Threading.Tasks.Task SaveAsBmpAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsBmpAsync(this SixLabors.ImageSharp.Image source, string path, System.Threading.CancellationToken cancellationToken) { }
        public static System.Threading.Tasks.Task SaveAsBmpAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Bmp.BmpEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsBmpAsync(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Bmp.BmpEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static void SaveAsGif(this SixLabors.ImageSharp.Image source, System.IO.Stream stream) { }
        public static void SaveAsGif(this SixLabors.ImageSharp.Image source, string path) { }
        public static void SaveAsGif(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Gif.GifEncoder encoder) { }
        public static void SaveAsGif(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Gif.GifEncoder encoder) { }
        public static System.Threading.Tasks.Task SaveAsGifAsync(this SixLabors.ImageSharp.Image source, string path) { }
        public static System.Threading.Tasks.Task SaveAsGifAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsGifAsync(this SixLabors.ImageSharp.Image source, string path, System.Threading.CancellationToken cancellationToken) { }
        public static System.Threading.Tasks.Task SaveAsGifAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Gif.GifEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsGifAsync(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Gif.GifEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static void SaveAsJpeg(this SixLabors.ImageSharp.Image source, System.IO.Stream stream) { }
        public static void SaveAsJpeg(this SixLabors.ImageSharp.Image source, string path) { }
        public static void SaveAsJpeg(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Jpeg.JpegEncoder encoder) { }
        public static void SaveAsJpeg(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Jpeg.JpegEncoder encoder) { }
        public static System.Threading.Tasks.Task SaveAsJpegAsync(this SixLabors.ImageSharp.Image source, string path) { }
        public static System.Threading.Tasks.Task SaveAsJpegAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsJpegAsync(this SixLabors.ImageSharp.Image source, string path, System.Threading.CancellationToken cancellationToken) { }
        public static System.Threading.Tasks.Task SaveAsJpegAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Jpeg.JpegEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsJpegAsync(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Jpeg.JpegEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static void SaveAsPbm(this SixLabors.ImageSharp.Image source, System.IO.Stream stream) { }
        public static void SaveAsPbm(this SixLabors.ImageSharp.Image source, string path) { }
        public static void SaveAsPbm(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Pbm.PbmEncoder encoder) { }
        public static void SaveAsPbm(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Pbm.PbmEncoder encoder) { }
        public static System.Threading.Tasks.Task SaveAsPbmAsync(this SixLabors.ImageSharp.Image source, string path) { }
        public static System.Threading.Tasks.Task SaveAsPbmAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsPbmAsync(this SixLabors.ImageSharp.Image source, string path, System.Threading.CancellationToken cancellationToken) { }
        public static System.Threading.Tasks.Task SaveAsPbmAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Pbm.PbmEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsPbmAsync(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Pbm.PbmEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static void SaveAsPng(this SixLabors.ImageSharp.Image source, System.IO.Stream stream) { }
        public static void SaveAsPng(this SixLabors.ImageSharp.Image source, string path) { }
        public static void SaveAsPng(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Png.PngEncoder encoder) { }
        public static void SaveAsPng(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Png.PngEncoder encoder) { }
        public static System.Threading.Tasks.Task SaveAsPngAsync(this SixLabors.ImageSharp.Image source, string path) { }
        public static System.Threading.Tasks.Task SaveAsPngAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsPngAsync(this SixLabors.ImageSharp.Image source, string path, System.Threading.CancellationToken cancellationToken) { }
        public static System.Threading.Tasks.Task SaveAsPngAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Png.PngEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsPngAsync(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Png.PngEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static void SaveAsTga(this SixLabors.ImageSharp.Image source, System.IO.Stream stream) { }
        public static void SaveAsTga(this SixLabors.ImageSharp.Image source, string path) { }
        public static void SaveAsTga(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Tga.TgaEncoder encoder) { }
        public static void SaveAsTga(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Tga.TgaEncoder encoder) { }
        public static System.Threading.Tasks.Task SaveAsTgaAsync(this SixLabors.ImageSharp.Image source, string path) { }
        public static System.Threading.Tasks.Task SaveAsTgaAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsTgaAsync(this SixLabors.ImageSharp.Image source, string path, System.Threading.CancellationToken cancellationToken) { }
        public static System.Threading.Tasks.Task SaveAsTgaAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Tga.TgaEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsTgaAsync(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Tga.TgaEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static void SaveAsTiff(this SixLabors.ImageSharp.Image source, System.IO.Stream stream) { }
        public static void SaveAsTiff(this SixLabors.ImageSharp.Image source, string path) { }
        public static void SaveAsTiff(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Tiff.TiffEncoder encoder) { }
        public static void SaveAsTiff(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Tiff.TiffEncoder encoder) { }
        public static System.Threading.Tasks.Task SaveAsTiffAsync(this SixLabors.ImageSharp.Image source, string path) { }
        public static System.Threading.Tasks.Task SaveAsTiffAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsTiffAsync(this SixLabors.ImageSharp.Image source, string path, System.Threading.CancellationToken cancellationToken) { }
        public static System.Threading.Tasks.Task SaveAsTiffAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Tiff.TiffEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsTiffAsync(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Tiff.TiffEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static void SaveAsWebp(this SixLabors.ImageSharp.Image source, System.IO.Stream stream) { }
        public static void SaveAsWebp(this SixLabors.ImageSharp.Image source, string path) { }
        public static void SaveAsWebp(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Webp.WebpEncoder encoder) { }
        public static void SaveAsWebp(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Webp.WebpEncoder encoder) { }
        public static System.Threading.Tasks.Task SaveAsWebpAsync(this SixLabors.ImageSharp.Image source, string path) { }
        public static System.Threading.Tasks.Task SaveAsWebpAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsWebpAsync(this SixLabors.ImageSharp.Image source, string path, System.Threading.CancellationToken cancellationToken) { }
        public static System.Threading.Tasks.Task SaveAsWebpAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.Webp.WebpEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsWebpAsync(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.Webp.WebpEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsync(this SixLabors.ImageSharp.Image source, string path, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsync(this SixLabors.ImageSharp.Image source, System.IO.Stream stream, SixLabors.ImageSharp.Formats.IImageFormat format, System.Threading.CancellationToken cancellationToken = default) { }
        public static System.Threading.Tasks.Task SaveAsync(this SixLabors.ImageSharp.Image source, string path, SixLabors.ImageSharp.Formats.IImageEncoder encoder, System.Threading.CancellationToken cancellationToken = default) { }
        public static string ToBase64String(this SixLabors.ImageSharp.Image source, SixLabors.ImageSharp.Formats.IImageFormat format) { }
    }
    public class ImageFormatException : System.Exception { }
    public abstract class ImageFrame : System.IDisposable
    {
        protected ImageFrame(SixLabors.ImageSharp.Configuration configuration, int width, int height, SixLabors.ImageSharp.Metadata.ImageFrameMetadata metadata) { }
        public int Height { get; }
        public SixLabors.ImageSharp.Metadata.ImageFrameMetadata Metadata { get; }
        public int Width { get; }
        public SixLabors.ImageSharp.Rectangle Bounds() { }
        public void Dispose() { }
        protected abstract void Dispose(bool disposing);
        public SixLabors.ImageSharp.Size Size() { }
    }
    public abstract class ImageFrameCollection : System.Collections.Generic.IEnumerable<SixLabors.ImageSharp.ImageFrame>, System.Collections.IEnumerable, System.IDisposable
    {
        protected ImageFrameCollection() { }
        public abstract int Count { get; }
        public SixLabors.ImageSharp.ImageFrame this[int index] { get; }
        protected abstract SixLabors.ImageSharp.ImageFrame NonGenericRootFrame { get; }
        public SixLabors.ImageSharp.ImageFrame RootFrame { get; }
        public SixLabors.ImageSharp.ImageFrame AddFrame(SixLabors.ImageSharp.ImageFrame source) { }
        public SixLabors.ImageSharp.Image CloneFrame(int index) { }
        public abstract bool Contains(SixLabors.ImageSharp.ImageFrame frame);
        public SixLabors.ImageSharp.ImageFrame CreateFrame() { }
        public SixLabors.ImageSharp.ImageFrame CreateFrame(SixLabors.ImageSharp.Color backgroundColor) { }
        public void Dispose() { }
        protected abstract void Dispose(bool disposing);
        protected void EnsureNotDisposed() { }
        public SixLabors.ImageSharp.Image ExportFrame(int index) { }
        public abstract int IndexOf(SixLabors.ImageSharp.ImageFrame frame);
        public SixLabors.ImageSharp.ImageFrame InsertFrame(int index, SixLabors.ImageSharp.ImageFrame source) { }
        public abstract void MoveFrame(int sourceIndex, int destinationIndex);
        protected abstract SixLabors.ImageSharp.ImageFrame NonGenericAddFrame(SixLabors.ImageSharp.ImageFrame source);
        protected abstract SixLabors.ImageSharp.Image NonGenericCloneFrame(int index);
        protected abstract SixLabors.ImageSharp.ImageFrame NonGenericCreateFrame();
        protected abstract SixLabors.ImageSharp.ImageFrame NonGenericCreateFrame(SixLabors.ImageSharp.Color backgroundColor);
        protected abstract SixLabors.ImageSharp.Image NonGenericExportFrame(int index);
        protected abstract System.Collections.Generic.IEnumerator<SixLabors.ImageSharp.ImageFrame> NonGenericGetEnumerator();
        protected abstract SixLabors.ImageSharp.ImageFrame NonGenericGetFrame(int index);
        protected abstract SixLabors.ImageSharp.ImageFrame NonGenericInsertFrame(int index, SixLabors.ImageSharp.ImageFrame source);
        public abstract void RemoveFrame(int index);
    }
    public sealed class ImageFrameCollection<TPixel> : SixLabors.ImageSharp.ImageFrameCollection, System.Collections.Generic.IEnumerable<SixLabors.ImageSharp.ImageFrame<TPixel>>, System.Collections.IEnumerable
        where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>
    {
        public override int Count { get; }
        public SixLabors.ImageSharp.ImageFrame<TPixel> this[int index] { get; }
        protected override SixLabors.ImageSharp.ImageFrame NonGenericRootFrame { get; }
        public SixLabors.ImageSharp.ImageFrame<TPixel> RootFrame { get; }
        public SixLabors.ImageSharp.ImageFrame<TPixel> AddFrame(SixLabors.ImageSharp.ImageFrame<TPixel> source) { }
        public SixLabors.ImageSharp.ImageFrame<TPixel> AddFrame(System.ReadOnlySpan<TPixel> source) { }
        public SixLabors.ImageSharp.ImageFrame<TPixel> AddFrame(TPixel[] source) { }
        public new SixLabors.ImageSharp.Image<TPixel> CloneFrame(int index) { }
        public override bool Contains(SixLabors.ImageSharp.ImageFrame frame) { }
        public bool Contains(SixLabors.ImageSharp.ImageFrame<TPixel> frame) { }
        public new SixLabors.ImageSharp.ImageFrame<TPixel> CreateFrame() { }
        public SixLabors.ImageSharp.ImageFrame<TPixel> CreateFrame(TPixel backgroundColor) { }
        protected override void Dispose(bool disposing) { }
        public new SixLabors.ImageSharp.Image<TPixel> ExportFrame(int index) { }
        public System.Collections.Generic.IEnumerator<SixLabors.ImageSharp.ImageFrame<TPixel>> GetEnumerator() { }
        public override int IndexOf(SixLabors.ImageSharp.ImageFrame frame) { }
        public int IndexOf(SixLabors.ImageSharp.ImageFrame<TPixel> frame) { }
        public SixLabors.ImageSharp.ImageFrame<TPixel> InsertFrame(int index, SixLabors.ImageSharp.ImageFrame<TPixel> source) { }
        public override void MoveFrame(int sourceIndex, int destinationIndex) { }
        protected override SixLabors.ImageSharp.ImageFrame NonGenericAddFrame(SixLabors.ImageSharp.ImageFrame source) { }
        protected override SixLabors.ImageSharp.Image NonGenericCloneFrame(int index) { }
        protected override SixLabors.ImageSharp.ImageFrame NonGenericCreateFrame() { }
        protected override SixLabors.ImageSharp.ImageFrame NonGenericCreateFrame(SixLabors.ImageSharp.Color backgroundColor) { }
        protected override SixLabors.ImageSharp.Image NonGenericExportFrame(int index) { }
        protected override System.Collections.Generic.IEnumerator<SixLabors.ImageSharp.ImageFrame> NonGenericGetEnumerator() { }
        protected override SixLabors.ImageSharp.ImageFrame NonGenericGetFrame(int index) { }
        protected override SixLabors.ImageSharp.ImageFrame NonGenericInsertFrame(int index, SixLabors.ImageSharp.ImageFrame source) { }
        public override void RemoveFrame(int index) { }
    }
    public sealed class ImageFrame<TPixel> : SixLabors.ImageSharp.ImageFrame
        where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>
    {
        public TPixel this[int x, int y] { get; set; }
        public SixLabors.ImageSharp.Memory.Buffer2D<TPixel> PixelBuffer { get; }
        public void CopyPixelDataTo(System.Span<byte> destination) { }
        public void CopyPixelDataTo(System.Span<TPixel> destination) { }
        public bool DangerousTryGetSinglePixelMemory(out System.Memory<TPixel> memory) { }
        protected override void Dispose(bool disposing) { }
        public void ProcessPixelRows(SixLabors.ImageSharp.PixelAccessorAction<TPixel> processPixels) { }
        public void ProcessPixelRows<TPixel2>(SixLabors.ImageSharp.ImageFrame<TPixel2> frame2, SixLabors.ImageSharp.PixelAccessorAction<TPixel, TPixel2> processPixels)
            where TPixel2 :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel2> { }
        public void ProcessPixelRows<TPixel2, TPixel3>(SixLabors.ImageSharp.ImageFrame<TPixel2> frame2, SixLabors.ImageSharp.ImageFrame<TPixel3> frame3, SixLabors.ImageSharp.PixelAccessorAction<TPixel, TPixel2, TPixel3> processPixels)
            where TPixel2 :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel2>
            where TPixel3 :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel3> { }
        public override string ToString() { }
    }
    public static class ImageInfoExtensions
    {
        public static SixLabors.ImageSharp.Rectangle Bounds(this SixLabors.ImageSharp.IImageInfo info) { }
        public static SixLabors.ImageSharp.Size Size(this SixLabors.ImageSharp.IImageInfo info) { }
    }
    public sealed class ImageProcessingException : System.Exception
    {
        public ImageProcessingException() { }
        public ImageProcessingException(string errorMessage) { }
        public ImageProcessingException(string errorMessage, System.Exception innerException) { }
    }
    public sealed class Image<TPixel> : SixLabors.ImageSharp.Image
        where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>
    {
        public Image(int width, int height) { }
        public Image(SixLabors.ImageSharp.Configuration configuration, int width, int height) { }
        public Image(int width, int height, TPixel backgroundColor) { }
        public Image(SixLabors.ImageSharp.Configuration configuration, int width, int height, TPixel backgroundColor) { }
        public SixLabors.ImageSharp.ImageFrameCollection<TPixel> Frames { get; }
        public TPixel this[int x, int y] { get; set; }
        protected override SixLabors.ImageSharp.ImageFrameCollection NonGenericFrameCollection { get; }
        public SixLabors.ImageSharp.Image<TPixel> Clone() { }
        public SixLabors.ImageSharp.Image<TPixel> Clone(SixLabors.ImageSharp.Configuration configuration) { }
        public override SixLabors.ImageSharp.Image<TPixel2> CloneAs<TPixel2>(SixLabors.ImageSharp.Configuration configuration)
            where TPixel2 :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel2> { }
        public void CopyPixelDataTo(System.Span<byte> destination) { }
        public void CopyPixelDataTo(System.Span<TPixel> destination) { }
        public bool DangerousTryGetSinglePixelMemory(out System.Memory<TPixel> memory) { }
        protected override void Dispose(bool disposing) { }
        public void ProcessPixelRows(SixLabors.ImageSharp.PixelAccessorAction<TPixel> processPixels) { }
        public void ProcessPixelRows<TPixel2>(SixLabors.ImageSharp.Image<TPixel2> image2, SixLabors.ImageSharp.PixelAccessorAction<TPixel, TPixel2> processPixels)
            where TPixel2 :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel2> { }
        public void ProcessPixelRows<TPixel2, TPixel3>(SixLabors.ImageSharp.Image<TPixel2> image2, SixLabors.ImageSharp.Image<TPixel3> image3, SixLabors.ImageSharp.PixelAccessorAction<TPixel, TPixel2, TPixel3> processPixels)
            where TPixel2 :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel2>
            where TPixel3 :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel3> { }
        public override string ToString() { }
    }
    public sealed class IndexedImageFrame<TPixel> : System.IDisposable
        where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>
    {
        public SixLabors.ImageSharp.Configuration Configuration { get; }
        public int Height { get; }
        public System.ReadOnlyMemory<TPixel> Palette { get; }
        public int Width { get; }
        public System.ReadOnlySpan<byte> DangerousGetRowSpan(int rowIndex) { }
        public void Dispose() { }
        public System.Span<byte> GetWritablePixelRowSpanUnsafe(int rowIndex) { }
    }
    public sealed class InvalidImageContentException : SixLabors.ImageSharp.ImageFormatException
    {
        public InvalidImageContentException(string errorMessage) { }
        public InvalidImageContentException(string errorMessage, System.Exception innerException) { }
    }
    public static class Matrix3x2Extensions
    {
        public static System.Numerics.Matrix3x2 CreateRotation(float radians, SixLabors.ImageSharp.PointF centerPoint) { }
        public static System.Numerics.Matrix3x2 CreateRotationDegrees(float degrees) { }
        public static System.Numerics.Matrix3x2 CreateRotationDegrees(float degrees, SixLabors.ImageSharp.PointF centerPoint) { }
        public static System.Numerics.Matrix3x2 CreateScale(SixLabors.ImageSharp.SizeF scales) { }
        public static System.Numerics.Matrix3x2 CreateScale(SixLabors.ImageSharp.SizeF scales, SixLabors.ImageSharp.PointF centerPoint) { }
        public static System.Numerics.Matrix3x2 CreateScale(float scale, SixLabors.ImageSharp.PointF centerPoint) { }
        public static System.Numerics.Matrix3x2 CreateScale(float xScale, float yScale, SixLabors.ImageSharp.PointF centerPoint) { }
        public static System.Numerics.Matrix3x2 CreateSkew(float radiansX, float radiansY, SixLabors.ImageSharp.PointF centerPoint) { }
        public static System.Numerics.Matrix3x2 CreateSkewDegrees(float degreesX, float degreesY) { }
        public static System.Numerics.Matrix3x2 CreateSkewDegrees(float degreesX, float degreesY, SixLabors.ImageSharp.PointF centerPoint) { }
        public static System.Numerics.Matrix3x2 CreateTranslation(SixLabors.ImageSharp.PointF position) { }
    }
    public static class MetadataExtensions
    {
        public static SixLabors.ImageSharp.Formats.Bmp.BmpMetadata GetBmpMetadata(this SixLabors.ImageSharp.Metadata.ImageMetadata metadata) { }
        public static SixLabors.ImageSharp.Formats.Gif.GifFrameMetadata GetGifMetadata(this SixLabors.ImageSharp.Metadata.ImageFrameMetadata source) { }
        public static SixLabors.ImageSharp.Formats.Gif.GifMetadata GetGifMetadata(this SixLabors.ImageSharp.Metadata.ImageMetadata source) { }
        public static SixLabors.ImageSharp.Formats.Jpeg.JpegMetadata GetJpegMetadata(this SixLabors.ImageSharp.Metadata.ImageMetadata metadata) { }
        public static SixLabors.ImageSharp.Formats.Pbm.PbmMetadata GetPbmMetadata(this SixLabors.ImageSharp.Metadata.ImageMetadata metadata) { }
        public static SixLabors.ImageSharp.Formats.Png.PngMetadata GetPngMetadata(this SixLabors.ImageSharp.Metadata.ImageMetadata metadata) { }
        public static SixLabors.ImageSharp.Formats.Tga.TgaMetadata GetTgaMetadata(this SixLabors.ImageSharp.Metadata.ImageMetadata metadata) { }
        public static SixLabors.ImageSharp.Formats.Tiff.TiffFrameMetadata GetTiffMetadata(this SixLabors.ImageSharp.Metadata.ImageFrameMetadata metadata) { }
        public static SixLabors.ImageSharp.Formats.Tiff.TiffMetadata GetTiffMetadata(this SixLabors.ImageSharp.Metadata.ImageMetadata metadata) { }
        public static SixLabors.ImageSharp.Formats.Webp.WebpFrameMetadata GetWebpMetadata(this SixLabors.ImageSharp.Metadata.ImageFrameMetadata metadata) { }
        public static SixLabors.ImageSharp.Formats.Webp.WebpMetadata GetWebpMetadata(this SixLabors.ImageSharp.Metadata.ImageMetadata metadata) { }
        public static bool TryGetGifMetadata(this SixLabors.ImageSharp.Metadata.ImageFrameMetadata source, out SixLabors.ImageSharp.Formats.Gif.GifFrameMetadata metadata) { }
    }
    public struct Number : System.IComparable<SixLabors.ImageSharp.Number>, System.IEquatable<SixLabors.ImageSharp.Number>
    {
        public Number(int value) { }
        public Number(uint value) { }
        public int CompareTo(SixLabors.ImageSharp.Number other) { }
        public bool Equals(SixLabors.ImageSharp.Number other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public string ToString(System.IFormatProvider provider) { }
        public static int op_Explicit(SixLabors.ImageSharp.Number number) { }
        public static uint op_Explicit(SixLabors.ImageSharp.Number number) { }
        public static ushort op_Explicit(SixLabors.ImageSharp.Number number) { }
        public static SixLabors.ImageSharp.Number op_Implicit(int value) { }
        public static SixLabors.ImageSharp.Number op_Implicit(ushort value) { }
        public static SixLabors.ImageSharp.Number op_Implicit(uint value) { }
        public static bool operator !=(SixLabors.ImageSharp.Number left, SixLabors.ImageSharp.Number right) { }
        public static bool operator <(SixLabors.ImageSharp.Number left, SixLabors.ImageSharp.Number right) { }
        public static bool operator <=(SixLabors.ImageSharp.Number left, SixLabors.ImageSharp.Number right) { }
        public static bool operator ==(SixLabors.ImageSharp.Number left, SixLabors.ImageSharp.Number right) { }
        public static bool operator >(SixLabors.ImageSharp.Number left, SixLabors.ImageSharp.Number right) { }
        public static bool operator >=(SixLabors.ImageSharp.Number left, SixLabors.ImageSharp.Number right) { }
    }
    public delegate void PixelAccessorAction<TPixel>(SixLabors.ImageSharp.PixelAccessor<TPixel> pixelAccessor);
    public delegate void PixelAccessorAction<TPixel1, TPixel2>(SixLabors.ImageSharp.PixelAccessor<TPixel1> pixelAccessor1, SixLabors.ImageSharp.PixelAccessor<TPixel2> pixelAccessor2);
    public delegate void PixelAccessorAction<TPixel1, TPixel2, TPixel3>(SixLabors.ImageSharp.PixelAccessor<TPixel1> pixelAccessor1, SixLabors.ImageSharp.PixelAccessor<TPixel2> pixelAccessor2, SixLabors.ImageSharp.PixelAccessor<TPixel3> pixelAccessor3);
    [System.Obsolete("Types with embedded references are not supported in this version of your compiler" +
        ".", true)]
    [System.Runtime.CompilerServices.IsByRefLike]
    public struct PixelAccessor<TPixel>
        where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>
    {
        public int Height { get; }
        public int Width { get; }
        public System.Span<TPixel> GetRowSpan(int rowIndex) { }
    }
    public struct Point : System.IEquatable<SixLabors.ImageSharp.Point>
    {
        public static readonly SixLabors.ImageSharp.Point Empty;
        public Point(SixLabors.ImageSharp.Size size) { }
        public Point(int value) { }
        public Point(int x, int y) { }
        public bool IsEmpty { get; }
        public int X { get; set; }
        public int Y { get; set; }
        public void Deconstruct(out int x, out int y) { }
        public bool Equals(SixLabors.ImageSharp.Point other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public void Offset(SixLabors.ImageSharp.Point point) { }
        public void Offset(int dx, int dy) { }
        public override string ToString() { }
        public static SixLabors.ImageSharp.Point Add(SixLabors.ImageSharp.Point point, SixLabors.ImageSharp.Size size) { }
        public static SixLabors.ImageSharp.Point Ceiling(SixLabors.ImageSharp.PointF point) { }
        public static SixLabors.ImageSharp.Point Multiply(SixLabors.ImageSharp.Point point, int value) { }
        public static SixLabors.ImageSharp.Point Round(SixLabors.ImageSharp.PointF point) { }
        public static SixLabors.ImageSharp.Point Round(System.Numerics.Vector2 vector) { }
        public static SixLabors.ImageSharp.Point Subtract(SixLabors.ImageSharp.Point point, SixLabors.ImageSharp.Size size) { }
        public static SixLabors.ImageSharp.Point Transform(SixLabors.ImageSharp.Point point, System.Numerics.Matrix3x2 matrix) { }
        public static SixLabors.ImageSharp.Point Truncate(SixLabors.ImageSharp.PointF point) { }
        public static SixLabors.ImageSharp.Size op_Explicit(SixLabors.ImageSharp.Point point) { }
        public static SixLabors.ImageSharp.PointF op_Implicit(SixLabors.ImageSharp.Point point) { }
        public static System.Numerics.Vector2 op_Implicit(SixLabors.ImageSharp.Point point) { }
        public static bool operator !=(SixLabors.ImageSharp.Point left, SixLabors.ImageSharp.Point right) { }
        public static SixLabors.ImageSharp.Point operator *(SixLabors.ImageSharp.Point left, int right) { }
        public static SixLabors.ImageSharp.Point operator *(int left, SixLabors.ImageSharp.Point right) { }
        public static SixLabors.ImageSharp.Point operator +(SixLabors.ImageSharp.Point point, SixLabors.ImageSharp.Size size) { }
        public static SixLabors.ImageSharp.Point operator -(SixLabors.ImageSharp.Point value) { }
        public static SixLabors.ImageSharp.Point operator -(SixLabors.ImageSharp.Point point, SixLabors.ImageSharp.Size size) { }
        public static SixLabors.ImageSharp.Point operator /(SixLabors.ImageSharp.Point left, int right) { }
        public static bool operator ==(SixLabors.ImageSharp.Point left, SixLabors.ImageSharp.Point right) { }
    }
    public struct PointF : System.IEquatable<SixLabors.ImageSharp.PointF>
    {
        public static readonly SixLabors.ImageSharp.PointF Empty;
        public PointF(SixLabors.ImageSharp.SizeF size) { }
        public PointF(float x, float y) { }
        public bool IsEmpty { get; }
        public float X { get; set; }
        public float Y { get; set; }
        public void Deconstruct(out float x, out float y) { }
        public bool Equals(SixLabors.ImageSharp.PointF other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public void Offset(SixLabors.ImageSharp.PointF point) { }
        public void Offset(float dx, float dy) { }
        public override string ToString() { }
        public static SixLabors.ImageSharp.PointF Add(SixLabors.ImageSharp.PointF point, SixLabors.ImageSharp.PointF pointb) { }
        public static SixLabors.ImageSharp.PointF Add(SixLabors.ImageSharp.PointF point, SixLabors.ImageSharp.SizeF size) { }
        public static SixLabors.ImageSharp.PointF Multiply(SixLabors.ImageSharp.PointF point, float right) { }
        public static SixLabors.ImageSharp.PointF Subtract(SixLabors.ImageSharp.PointF point, SixLabors.ImageSharp.PointF pointb) { }
        public static SixLabors.ImageSharp.PointF Subtract(SixLabors.ImageSharp.PointF point, SixLabors.ImageSharp.SizeF size) { }
        public static SixLabors.ImageSharp.PointF Transform(SixLabors.ImageSharp.PointF point, System.Numerics.Matrix3x2 matrix) { }
        public static SixLabors.ImageSharp.Point op_Explicit(SixLabors.ImageSharp.PointF point) { }
        public static System.Numerics.Vector2 op_Implicit(SixLabors.ImageSharp.PointF point) { }
        public static SixLabors.ImageSharp.PointF op_Implicit(System.Numerics.Vector2 vector) { }
        public static bool operator !=(SixLabors.ImageSharp.PointF left, SixLabors.ImageSharp.PointF right) { }
        public static SixLabors.ImageSharp.PointF operator *(SixLabors.ImageSharp.PointF left, float right) { }
        public static SixLabors.ImageSharp.PointF operator *(float left, SixLabors.ImageSharp.PointF right) { }
        public static SixLabors.ImageSharp.PointF operator +(SixLabors.ImageSharp.PointF point, SixLabors.ImageSharp.PointF size) { }
        public static SixLabors.ImageSharp.PointF operator +(SixLabors.ImageSharp.PointF point, SixLabors.ImageSharp.SizeF size) { }
        public static SixLabors.ImageSharp.PointF operator -(SixLabors.ImageSharp.PointF value) { }
        public static SixLabors.ImageSharp.PointF operator -(SixLabors.ImageSharp.PointF point, SixLabors.ImageSharp.PointF size) { }
        public static SixLabors.ImageSharp.PointF operator -(SixLabors.ImageSharp.PointF point, SixLabors.ImageSharp.SizeF size) { }
        public static SixLabors.ImageSharp.PointF operator /(SixLabors.ImageSharp.PointF left, float right) { }
        public static bool operator ==(SixLabors.ImageSharp.PointF left, SixLabors.ImageSharp.PointF right) { }
    }
    public readonly struct Rational : System.IEquatable<SixLabors.ImageSharp.Rational>
    {
        public Rational(double value) { }
        public Rational(uint value) { }
        public Rational(double value, bool bestPrecision) { }
        public Rational(uint numerator, uint denominator) { }
        public Rational(uint numerator, uint denominator, bool simplify) { }
        public uint Denominator { get; }
        public uint Numerator { get; }
        public bool Equals(SixLabors.ImageSharp.Rational other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public double ToDouble() { }
        public float ToSingle() { }
        public override string ToString() { }
        public string ToString(System.IFormatProvider provider) { }
        public static SixLabors.ImageSharp.Rational FromDouble(double value) { }
        public static SixLabors.ImageSharp.Rational FromDouble(double value, bool bestPrecision) { }
        public static bool operator !=(SixLabors.ImageSharp.Rational left, SixLabors.ImageSharp.Rational right) { }
        public static bool operator ==(SixLabors.ImageSharp.Rational left, SixLabors.ImageSharp.Rational right) { }
    }
    public enum ReadOrigin
    {
        Begin = 0,
        Current = 1,
    }
    public struct Rectangle : System.IEquatable<SixLabors.ImageSharp.Rectangle>
    {
        public static readonly SixLabors.ImageSharp.Rectangle Empty;
        public Rectangle(SixLabors.ImageSharp.Point point, SixLabors.ImageSharp.Size size) { }
        public Rectangle(int x, int y, int width, int height) { }
        public int Bottom { get; }
        public int Height { get; set; }
        public bool IsEmpty { get; }
        public int Left { get; }
        public SixLabors.ImageSharp.Point Location { get; set; }
        public int Right { get; }
        public SixLabors.ImageSharp.Size Size { get; set; }
        public int Top { get; }
        public int Width { get; set; }
        public int X { get; set; }
        public int Y { get; set; }
        public bool Contains(SixLabors.ImageSharp.Point point) { }
        public bool Contains(SixLabors.ImageSharp.Rectangle rectangle) { }
        public bool Contains(int x, int y) { }
        public void Deconstruct(out int x, out int y, out int width, out int height) { }
        public bool Equals(SixLabors.ImageSharp.Rectangle other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public void Inflate(SixLabors.ImageSharp.Size size) { }
        public void Inflate(int width, int height) { }
        public void Intersect(SixLabors.ImageSharp.Rectangle rectangle) { }
        public bool IntersectsWith(SixLabors.ImageSharp.Rectangle rectangle) { }
        public void Offset(SixLabors.ImageSharp.Point point) { }
        public void Offset(int dx, int dy) { }
        public override string ToString() { }
        public static SixLabors.ImageSharp.Rectangle Ceiling(SixLabors.ImageSharp.RectangleF rectangle) { }
        public static SixLabors.ImageSharp.Point Center(SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Rectangle FromLTRB(int left, int top, int right, int bottom) { }
        public static SixLabors.ImageSharp.Rectangle Inflate(SixLabors.ImageSharp.Rectangle rectangle, int x, int y) { }
        public static SixLabors.ImageSharp.Rectangle Intersect(SixLabors.ImageSharp.Rectangle a, SixLabors.ImageSharp.Rectangle b) { }
        public static SixLabors.ImageSharp.Rectangle Round(SixLabors.ImageSharp.RectangleF rectangle) { }
        public static SixLabors.ImageSharp.RectangleF Transform(SixLabors.ImageSharp.Rectangle rectangle, System.Numerics.Matrix3x2 matrix) { }
        public static SixLabors.ImageSharp.Rectangle Truncate(SixLabors.ImageSharp.RectangleF rectangle) { }
        public static SixLabors.ImageSharp.Rectangle Union(SixLabors.ImageSharp.Rectangle a, SixLabors.ImageSharp.Rectangle b) { }
        public static SixLabors.ImageSharp.RectangleF op_Implicit(SixLabors.ImageSharp.Rectangle rectangle) { }
        public static System.Numerics.Vector4 op_Implicit(SixLabors.ImageSharp.Rectangle rectangle) { }
        public static bool operator !=(SixLabors.ImageSharp.Rectangle left, SixLabors.ImageSharp.Rectangle right) { }
        public static bool operator ==(SixLabors.ImageSharp.Rectangle left, SixLabors.ImageSharp.Rectangle right) { }
    }
    public struct RectangleF : System.IEquatable<SixLabors.ImageSharp.RectangleF>
    {
        public static readonly SixLabors.ImageSharp.RectangleF Empty;
        public RectangleF(SixLabors.ImageSharp.PointF point, SixLabors.ImageSharp.SizeF size) { }
        public RectangleF(float x, float y, float width, float height) { }
        public float Bottom { get; }
        public float Height { get; set; }
        public bool IsEmpty { get; }
        public float Left { get; }
        public SixLabors.ImageSharp.PointF Location { get; set; }
        public float Right { get; }
        public SixLabors.ImageSharp.SizeF Size { get; set; }
        public float Top { get; }
        public float Width { get; set; }
        public float X { get; set; }
        public float Y { get; set; }
        public bool Contains(SixLabors.ImageSharp.PointF point) { }
        public bool Contains(SixLabors.ImageSharp.RectangleF rectangle) { }
        public bool Contains(float x, float y) { }
        public void Deconstruct(out float x, out float y, out float width, out float height) { }
        public bool Equals(SixLabors.ImageSharp.RectangleF other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public void Inflate(SixLabors.ImageSharp.SizeF size) { }
        public void Inflate(float width, float height) { }
        public void Intersect(SixLabors.ImageSharp.RectangleF rectangle) { }
        public bool IntersectsWith(SixLabors.ImageSharp.RectangleF rectangle) { }
        public void Offset(SixLabors.ImageSharp.PointF point) { }
        public void Offset(float dx, float dy) { }
        public override string ToString() { }
        public static SixLabors.ImageSharp.PointF Center(SixLabors.ImageSharp.RectangleF rectangle) { }
        public static SixLabors.ImageSharp.RectangleF FromLTRB(float left, float top, float right, float bottom) { }
        public static SixLabors.ImageSharp.RectangleF Inflate(SixLabors.ImageSharp.RectangleF rectangle, float x, float y) { }
        public static SixLabors.ImageSharp.RectangleF Intersect(SixLabors.ImageSharp.RectangleF a, SixLabors.ImageSharp.RectangleF b) { }
        public static SixLabors.ImageSharp.RectangleF Transform(SixLabors.ImageSharp.RectangleF rectangle, System.Numerics.Matrix3x2 matrix) { }
        public static SixLabors.ImageSharp.RectangleF Union(SixLabors.ImageSharp.RectangleF a, SixLabors.ImageSharp.RectangleF b) { }
        public static SixLabors.ImageSharp.Rectangle op_Explicit(SixLabors.ImageSharp.RectangleF rectangle) { }
        public static bool operator !=(SixLabors.ImageSharp.RectangleF left, SixLabors.ImageSharp.RectangleF right) { }
        public static bool operator ==(SixLabors.ImageSharp.RectangleF left, SixLabors.ImageSharp.RectangleF right) { }
    }
    public readonly struct SignedRational : System.IEquatable<SixLabors.ImageSharp.SignedRational>
    {
        public SignedRational(double value) { }
        public SignedRational(int value) { }
        public SignedRational(double value, bool bestPrecision) { }
        public SignedRational(int numerator, int denominator) { }
        public SignedRational(int numerator, int denominator, bool simplify) { }
        public int Denominator { get; }
        public int Numerator { get; }
        public bool Equals(SixLabors.ImageSharp.SignedRational other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public double ToDouble() { }
        public override string ToString() { }
        public string ToString(System.IFormatProvider provider) { }
        public static SixLabors.ImageSharp.SignedRational FromDouble(double value) { }
        public static SixLabors.ImageSharp.SignedRational FromDouble(double value, bool bestPrecision) { }
        public static bool operator !=(SixLabors.ImageSharp.SignedRational left, SixLabors.ImageSharp.SignedRational right) { }
        public static bool operator ==(SixLabors.ImageSharp.SignedRational left, SixLabors.ImageSharp.SignedRational right) { }
    }
    public struct Size : System.IEquatable<SixLabors.ImageSharp.Size>
    {
        public static readonly SixLabors.ImageSharp.Size Empty;
        public Size(SixLabors.ImageSharp.Point point) { }
        public Size(SixLabors.ImageSharp.Size size) { }
        public Size(int value) { }
        public Size(int width, int height) { }
        public int Height { get; set; }
        public bool IsEmpty { get; }
        public int Width { get; set; }
        public void Deconstruct(out int width, out int height) { }
        public bool Equals(SixLabors.ImageSharp.Size other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static SixLabors.ImageSharp.Size Add(SixLabors.ImageSharp.Size left, SixLabors.ImageSharp.Size right) { }
        public static SixLabors.ImageSharp.Size Ceiling(SixLabors.ImageSharp.SizeF size) { }
        public static SixLabors.ImageSharp.Size Round(SixLabors.ImageSharp.SizeF size) { }
        public static SixLabors.ImageSharp.Size Subtract(SixLabors.ImageSharp.Size left, SixLabors.ImageSharp.Size right) { }
        public static SixLabors.ImageSharp.SizeF Transform(SixLabors.ImageSharp.Size size, System.Numerics.Matrix3x2 matrix) { }
        public static SixLabors.ImageSharp.Size Truncate(SixLabors.ImageSharp.SizeF size) { }
        public static SixLabors.ImageSharp.Point op_Explicit(SixLabors.ImageSharp.Size size) { }
        public static SixLabors.ImageSharp.SizeF op_Implicit(SixLabors.ImageSharp.Size size) { }
        public static bool operator !=(SixLabors.ImageSharp.Size left, SixLabors.ImageSharp.Size right) { }
        public static SixLabors.ImageSharp.Size operator *(SixLabors.ImageSharp.Size left, int right) { }
        public static SixLabors.ImageSharp.SizeF operator *(SixLabors.ImageSharp.Size left, float right) { }
        public static SixLabors.ImageSharp.Size operator *(int left, SixLabors.ImageSharp.Size right) { }
        public static SixLabors.ImageSharp.SizeF operator *(float left, SixLabors.ImageSharp.Size right) { }
        public static SixLabors.ImageSharp.Size operator +(SixLabors.ImageSharp.Size left, SixLabors.ImageSharp.Size right) { }
        public static SixLabors.ImageSharp.Size operator -(SixLabors.ImageSharp.Size left, SixLabors.ImageSharp.Size right) { }
        public static SixLabors.ImageSharp.Size operator /(SixLabors.ImageSharp.Size left, int right) { }
        public static SixLabors.ImageSharp.SizeF operator /(SixLabors.ImageSharp.Size left, float right) { }
        public static bool operator ==(SixLabors.ImageSharp.Size left, SixLabors.ImageSharp.Size right) { }
    }
    public struct SizeF : System.IEquatable<SixLabors.ImageSharp.SizeF>
    {
        public static readonly SixLabors.ImageSharp.SizeF Empty;
        public SizeF(SixLabors.ImageSharp.PointF point) { }
        public SizeF(SixLabors.ImageSharp.SizeF size) { }
        public SizeF(float width, float height) { }
        public float Height { get; set; }
        public bool IsEmpty { get; }
        public float Width { get; set; }
        public void Deconstruct(out float width, out float height) { }
        public bool Equals(SixLabors.ImageSharp.SizeF other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static SixLabors.ImageSharp.SizeF Add(SixLabors.ImageSharp.SizeF left, SixLabors.ImageSharp.SizeF right) { }
        public static SixLabors.ImageSharp.SizeF Subtract(SixLabors.ImageSharp.SizeF left, SixLabors.ImageSharp.SizeF right) { }
        public static SixLabors.ImageSharp.SizeF Transform(SixLabors.ImageSharp.SizeF size, System.Numerics.Matrix3x2 matrix) { }
        public static SixLabors.ImageSharp.Size op_Explicit(SixLabors.ImageSharp.SizeF size) { }
        public static SixLabors.ImageSharp.PointF op_Explicit(SixLabors.ImageSharp.SizeF size) { }
        public static System.Numerics.Vector2 op_Implicit(SixLabors.ImageSharp.SizeF point) { }
        public static bool operator !=(SixLabors.ImageSharp.SizeF left, SixLabors.ImageSharp.SizeF right) { }
        public static SixLabors.ImageSharp.SizeF operator *(SixLabors.ImageSharp.SizeF left, float right) { }
        public static SixLabors.ImageSharp.SizeF operator *(float left, SixLabors.ImageSharp.SizeF right) { }
        public static SixLabors.ImageSharp.SizeF operator +(SixLabors.ImageSharp.SizeF left, SixLabors.ImageSharp.SizeF right) { }
        public static SixLabors.ImageSharp.SizeF operator -(SixLabors.ImageSharp.SizeF left, SixLabors.ImageSharp.SizeF right) { }
        public static SixLabors.ImageSharp.SizeF operator /(SixLabors.ImageSharp.SizeF left, float right) { }
        public static bool operator ==(SixLabors.ImageSharp.SizeF left, SixLabors.ImageSharp.SizeF right) { }
    }
    public sealed class UnknownImageFormatException : SixLabors.ImageSharp.ImageFormatException
    {
        public UnknownImageFormatException(string errorMessage) { }
    }
}
namespace SixLabors.ImageSharp.ColorSpaces
{
    public readonly struct CieLab : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.CieLab>
    {
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz DefaultWhitePoint;
        public CieLab(System.Numerics.Vector3 vector) { }
        public CieLab(System.Numerics.Vector3 vector, SixLabors.ImageSharp.ColorSpaces.CieXyz whitePoint) { }
        public CieLab(float l, float a, float b) { }
        public CieLab(float l, float a, float b, SixLabors.ImageSharp.ColorSpaces.CieXyz whitePoint) { }
        public float A { get; }
        public float B { get; }
        public float L { get; }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz WhitePoint { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.CieLab other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.CieLab left, SixLabors.ImageSharp.ColorSpaces.CieLab right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.CieLab left, SixLabors.ImageSharp.ColorSpaces.CieLab right) { }
    }
    public readonly struct CieLch : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.CieLch>
    {
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz DefaultWhitePoint;
        public CieLch(System.Numerics.Vector3 vector) { }
        public CieLch(System.Numerics.Vector3 vector, SixLabors.ImageSharp.ColorSpaces.CieXyz whitePoint) { }
        public CieLch(float l, float c, float h) { }
        public CieLch(float l, float c, float h, SixLabors.ImageSharp.ColorSpaces.CieXyz whitePoint) { }
        public float C { get; }
        public float H { get; }
        public float L { get; }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz WhitePoint { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.CieLch other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public float Saturation() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.CieLch left, SixLabors.ImageSharp.ColorSpaces.CieLch right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.CieLch left, SixLabors.ImageSharp.ColorSpaces.CieLch right) { }
    }
    public readonly struct CieLchuv : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.CieLchuv>
    {
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz DefaultWhitePoint;
        public CieLchuv(System.Numerics.Vector3 vector) { }
        public CieLchuv(System.Numerics.Vector3 vector, SixLabors.ImageSharp.ColorSpaces.CieXyz whitePoint) { }
        public CieLchuv(float l, float c, float h) { }
        public CieLchuv(float l, float c, float h, SixLabors.ImageSharp.ColorSpaces.CieXyz whitePoint) { }
        public float C { get; }
        public float H { get; }
        public float L { get; }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz WhitePoint { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.CieLchuv other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public float Saturation() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.CieLchuv left, SixLabors.ImageSharp.ColorSpaces.CieLchuv right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.CieLchuv left, SixLabors.ImageSharp.ColorSpaces.CieLchuv right) { }
    }
    public readonly struct CieLuv : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.CieLuv>
    {
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz DefaultWhitePoint;
        public CieLuv(System.Numerics.Vector3 vector) { }
        public CieLuv(System.Numerics.Vector3 vector, SixLabors.ImageSharp.ColorSpaces.CieXyz whitePoint) { }
        public CieLuv(float l, float u, float v) { }
        public CieLuv(float l, float u, float v, SixLabors.ImageSharp.ColorSpaces.CieXyz whitePoint) { }
        public float L { get; }
        public float U { get; }
        public float V { get; }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz WhitePoint { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.CieLuv other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.CieLuv left, SixLabors.ImageSharp.ColorSpaces.CieLuv right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.CieLuv left, SixLabors.ImageSharp.ColorSpaces.CieLuv right) { }
    }
    public readonly struct CieXyy : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.CieXyy>
    {
        public CieXyy(System.Numerics.Vector3 vector) { }
        public CieXyy(float x, float y, float yl) { }
        public float X { get; }
        public float Y { get; }
        public float Yl { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.CieXyy other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.CieXyy left, SixLabors.ImageSharp.ColorSpaces.CieXyy right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.CieXyy left, SixLabors.ImageSharp.ColorSpaces.CieXyy right) { }
    }
    public readonly struct CieXyz : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.CieXyz>
    {
        public CieXyz(System.Numerics.Vector3 vector) { }
        public CieXyz(float x, float y, float z) { }
        public float X { get; }
        public float Y { get; }
        public float Z { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.CieXyz other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public System.Numerics.Vector3 ToVector3() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.CieXyz left, SixLabors.ImageSharp.ColorSpaces.CieXyz right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.CieXyz left, SixLabors.ImageSharp.ColorSpaces.CieXyz right) { }
    }
    public readonly struct Cmyk : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.Cmyk>
    {
        public Cmyk(System.Numerics.Vector4 vector) { }
        public Cmyk(float c, float m, float y, float k) { }
        public float C { get; }
        public float K { get; }
        public float M { get; }
        public float Y { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.Cmyk other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.Cmyk left, SixLabors.ImageSharp.ColorSpaces.Cmyk right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.Cmyk left, SixLabors.ImageSharp.ColorSpaces.Cmyk right) { }
    }
    public readonly struct Hsl : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.Hsl>
    {
        public Hsl(System.Numerics.Vector3 vector) { }
        public Hsl(float h, float s, float l) { }
        public float H { get; }
        public float L { get; }
        public float S { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.Hsl other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.Hsl left, SixLabors.ImageSharp.ColorSpaces.Hsl right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.Hsl left, SixLabors.ImageSharp.ColorSpaces.Hsl right) { }
    }
    public readonly struct Hsv : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.Hsv>
    {
        public Hsv(System.Numerics.Vector3 vector) { }
        public Hsv(float h, float s, float v) { }
        public float H { get; }
        public float S { get; }
        public float V { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.Hsv other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.Hsv left, SixLabors.ImageSharp.ColorSpaces.Hsv right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.Hsv left, SixLabors.ImageSharp.ColorSpaces.Hsv right) { }
    }
    public readonly struct HunterLab : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.HunterLab>
    {
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz DefaultWhitePoint;
        public HunterLab(System.Numerics.Vector3 vector) { }
        public HunterLab(System.Numerics.Vector3 vector, SixLabors.ImageSharp.ColorSpaces.CieXyz whitePoint) { }
        public HunterLab(float l, float a, float b) { }
        public HunterLab(float l, float a, float b, SixLabors.ImageSharp.ColorSpaces.CieXyz whitePoint) { }
        public float A { get; }
        public float B { get; }
        public float L { get; }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz WhitePoint { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.HunterLab other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.HunterLab left, SixLabors.ImageSharp.ColorSpaces.HunterLab right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.HunterLab left, SixLabors.ImageSharp.ColorSpaces.HunterLab right) { }
    }
    public static class Illuminants
    {
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz A;
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz B;
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz C;
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz D50;
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz D55;
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz D65;
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz D75;
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz E;
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz F11;
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz F2;
        public static readonly SixLabors.ImageSharp.ColorSpaces.CieXyz F7;
    }
    public readonly struct LinearRgb : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.LinearRgb>
    {
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace DefaultWorkingSpace;
        public LinearRgb(System.Numerics.Vector3 vector) { }
        public LinearRgb(System.Numerics.Vector3 vector, SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace workingSpace) { }
        public LinearRgb(float r, float g, float b) { }
        public LinearRgb(float r, float g, float b, SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace workingSpace) { }
        public float B { get; }
        public float G { get; }
        public float R { get; }
        public SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace WorkingSpace { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.LinearRgb other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public System.Numerics.Vector3 ToVector3() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.LinearRgb left, SixLabors.ImageSharp.ColorSpaces.LinearRgb right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.LinearRgb left, SixLabors.ImageSharp.ColorSpaces.LinearRgb right) { }
    }
    public readonly struct Lms : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.Lms>
    {
        public Lms(System.Numerics.Vector3 vector) { }
        public Lms(float l, float m, float s) { }
        public float L { get; }
        public float M { get; }
        public float S { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.Lms other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public System.Numerics.Vector3 ToVector3() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.Lms left, SixLabors.ImageSharp.ColorSpaces.Lms right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.Lms left, SixLabors.ImageSharp.ColorSpaces.Lms right) { }
    }
    public readonly struct Rgb : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.Rgb>
    {
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace DefaultWorkingSpace;
        public Rgb(System.Numerics.Vector3 vector) { }
        public Rgb(System.Numerics.Vector3 vector, SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace workingSpace) { }
        public Rgb(float r, float g, float b) { }
        public Rgb(float r, float g, float b, SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace workingSpace) { }
        public float B { get; }
        public float G { get; }
        public float R { get; }
        public SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace WorkingSpace { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.Rgb other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public System.Numerics.Vector3 ToVector3() { }
        public static SixLabors.ImageSharp.ColorSpaces.Rgb op_Implicit(SixLabors.ImageSharp.PixelFormats.Rgb24 color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Rgb op_Implicit(SixLabors.ImageSharp.PixelFormats.Rgba32 color) { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.Rgb left, SixLabors.ImageSharp.ColorSpaces.Rgb right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.Rgb left, SixLabors.ImageSharp.ColorSpaces.Rgb right) { }
    }
    public static class RgbWorkingSpaces
    {
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace AdobeRgb1998;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace ApplesRgb;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace BestRgb;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace BetaRgb;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace BruceRgb;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace CIERgb;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace ColorMatchRgb;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace DonRgb4;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace ECIRgbv2;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace EktaSpacePS5;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace NTSCRgb;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace PALSECAMRgb;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace ProPhotoRgb;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace Rec2020;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace Rec709;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace SMPTECRgb;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace SRgb;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace SRgbSimplified;
        public static readonly SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace WideGamutRgb;
    }
    public readonly struct YCbCr : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.YCbCr>
    {
        public YCbCr(System.Numerics.Vector3 vector) { }
        public YCbCr(float y, float cb, float cr) { }
        public float Cb { get; }
        public float Cr { get; }
        public float Y { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.YCbCr other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.YCbCr left, SixLabors.ImageSharp.ColorSpaces.YCbCr right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.YCbCr left, SixLabors.ImageSharp.ColorSpaces.YCbCr right) { }
    }
}
namespace SixLabors.ImageSharp.ColorSpaces.Companding
{
    public static class GammaCompanding
    {
        public static float Compress(float channel, float gamma) { }
        public static float Expand(float channel, float gamma) { }
    }
    public static class LCompanding
    {
        public static float Compress(float channel) { }
        public static float Expand(float channel) { }
    }
    public static class Rec2020Companding
    {
        public static float Compress(float channel) { }
        public static float Expand(float channel) { }
    }
    public static class Rec709Companding
    {
        public static float Compress(float channel) { }
        public static float Expand(float channel) { }
    }
    public static class SRgbCompanding
    {
        public static void Compress(ref System.Numerics.Vector4 vector) { }
        public static float Compress(float channel) { }
        public static void Compress(System.Span<System.Numerics.Vector4> vectors) { }
        public static void Expand(ref System.Numerics.Vector4 vector) { }
        public static float Expand(float channel) { }
        public static void Expand(System.Span<System.Numerics.Vector4> vectors) { }
    }
}
namespace SixLabors.ImageSharp.ColorSpaces.Conversion
{
    public readonly struct CieXyChromaticityCoordinates : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.Conversion.CieXyChromaticityCoordinates>
    {
        public CieXyChromaticityCoordinates(float x, float y) { }
        public float X { get; }
        public float Y { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.Conversion.CieXyChromaticityCoordinates other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.Conversion.CieXyChromaticityCoordinates left, SixLabors.ImageSharp.ColorSpaces.Conversion.CieXyChromaticityCoordinates right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.Conversion.CieXyChromaticityCoordinates left, SixLabors.ImageSharp.ColorSpaces.Conversion.CieXyChromaticityCoordinates right) { }
    }
    public class ColorSpaceConverter
    {
        public ColorSpaceConverter() { }
        public ColorSpaceConverter(SixLabors.ImageSharp.ColorSpaces.Conversion.ColorSpaceConverterOptions options) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLab Adapt(in SixLabors.ImageSharp.ColorSpaces.CieLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLch Adapt(in SixLabors.ImageSharp.ColorSpaces.CieLch color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLchuv Adapt(in SixLabors.ImageSharp.ColorSpaces.CieLchuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLuv Adapt(in SixLabors.ImageSharp.ColorSpaces.CieLuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.HunterLab Adapt(in SixLabors.ImageSharp.ColorSpaces.HunterLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.LinearRgb Adapt(in SixLabors.ImageSharp.ColorSpaces.LinearRgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.Rgb Adapt(in SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz Adapt(in SixLabors.ImageSharp.ColorSpaces.CieXyz color, in SixLabors.ImageSharp.ColorSpaces.CieXyz sourceWhitePoint) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz Adapt(in SixLabors.ImageSharp.ColorSpaces.CieXyz color, in SixLabors.ImageSharp.ColorSpaces.CieXyz sourceWhitePoint, in SixLabors.ImageSharp.ColorSpaces.CieXyz targetWhitePoint) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLch> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLchuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyy> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyz> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Cmyk> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsl> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.HunterLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.LinearRgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Lms> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Rgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.YCbCr> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLch> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLch> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLchuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLch> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLch> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyy> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLch> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyz> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLch> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Cmyk> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLch> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsl> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLch> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLch> source, System.Span<SixLabors.ImageSharp.ColorSpaces.HunterLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLch> source, System.Span<SixLabors.ImageSharp.ColorSpaces.LinearRgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLch> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Lms> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLch> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Rgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLch> source, System.Span<SixLabors.ImageSharp.ColorSpaces.YCbCr> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLchuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLchuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLch> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLchuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLchuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyy> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLchuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyz> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLchuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Cmyk> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLchuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsl> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLchuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLchuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.HunterLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLchuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.LinearRgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLchuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Lms> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLchuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Rgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLch> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLchuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyy> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyz> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Cmyk> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsl> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.HunterLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.LinearRgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Lms> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Rgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieLuv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.YCbCr> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyy> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyy> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLch> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyy> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLchuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyy> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyy> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Cmyk> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyy> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsl> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyy> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyy> source, System.Span<SixLabors.ImageSharp.ColorSpaces.HunterLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyy> source, System.Span<SixLabors.ImageSharp.ColorSpaces.LinearRgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyy> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Lms> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyy> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Rgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyy> source, System.Span<SixLabors.ImageSharp.ColorSpaces.YCbCr> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyz> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyz> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLch> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyz> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLchuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyz> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyz> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Cmyk> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyz> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsl> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyz> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyz> source, System.Span<SixLabors.ImageSharp.ColorSpaces.HunterLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyz> source, System.Span<SixLabors.ImageSharp.ColorSpaces.LinearRgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyz> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Lms> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyz> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Rgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyz> source, System.Span<SixLabors.ImageSharp.ColorSpaces.YCbCr> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Cmyk> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Cmyk> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLch> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Cmyk> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLchuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Cmyk> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Cmyk> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyy> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Cmyk> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyz> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Cmyk> source, System.Span<SixLabors.ImageSharp.ColorSpaces.HunterLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Cmyk> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Lms> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsl> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsl> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLch> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsl> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLchuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsl> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsl> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyy> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsl> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyz> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsl> source, System.Span<SixLabors.ImageSharp.ColorSpaces.HunterLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsl> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Lms> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLch> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLchuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyy> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyz> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.HunterLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Lms> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.HunterLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.HunterLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLch> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.HunterLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLchuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.HunterLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.HunterLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyy> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.HunterLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyz> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.HunterLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Cmyk> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.HunterLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsl> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.HunterLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.HunterLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.LinearRgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.HunterLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Lms> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.HunterLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Rgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.HunterLab> source, System.Span<SixLabors.ImageSharp.ColorSpaces.YCbCr> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.LinearRgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.LinearRgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLch> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.LinearRgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLchuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.LinearRgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.LinearRgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyy> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.LinearRgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyz> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.LinearRgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.HunterLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.LinearRgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Lms> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Lms> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Lms> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLch> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Lms> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLchuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Lms> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Lms> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyy> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Lms> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyz> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Lms> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Cmyk> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Lms> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsl> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Lms> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Lms> source, System.Span<SixLabors.ImageSharp.ColorSpaces.HunterLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Lms> source, System.Span<SixLabors.ImageSharp.ColorSpaces.LinearRgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Lms> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Rgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Lms> source, System.Span<SixLabors.ImageSharp.ColorSpaces.YCbCr> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Rgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Rgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLch> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Rgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLchuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Rgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Rgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyy> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Rgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyz> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Rgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.HunterLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Rgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Lms> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.YCbCr> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.YCbCr> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLch> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.YCbCr> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLchuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.YCbCr> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieLuv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.YCbCr> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyy> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.YCbCr> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyz> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.YCbCr> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Cmyk> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.YCbCr> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsl> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.YCbCr> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsv> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.YCbCr> source, System.Span<SixLabors.ImageSharp.ColorSpaces.HunterLab> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.YCbCr> source, System.Span<SixLabors.ImageSharp.ColorSpaces.LinearRgb> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.YCbCr> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Lms> destination) { }
        public void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.YCbCr> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Rgb> destination) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLab ToCieLab(in SixLabors.ImageSharp.ColorSpaces.CieLch color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLab ToCieLab(in SixLabors.ImageSharp.ColorSpaces.CieLchuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLab ToCieLab(in SixLabors.ImageSharp.ColorSpaces.CieLuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLab ToCieLab(in SixLabors.ImageSharp.ColorSpaces.CieXyy color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLab ToCieLab(in SixLabors.ImageSharp.ColorSpaces.CieXyz color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLab ToCieLab(in SixLabors.ImageSharp.ColorSpaces.Cmyk color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLab ToCieLab(in SixLabors.ImageSharp.ColorSpaces.Hsl color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLab ToCieLab(in SixLabors.ImageSharp.ColorSpaces.Hsv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLab ToCieLab(in SixLabors.ImageSharp.ColorSpaces.HunterLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLab ToCieLab(in SixLabors.ImageSharp.ColorSpaces.LinearRgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLab ToCieLab(in SixLabors.ImageSharp.ColorSpaces.Lms color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLab ToCieLab(in SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLab ToCieLab(in SixLabors.ImageSharp.ColorSpaces.YCbCr color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLch ToCieLch(in SixLabors.ImageSharp.ColorSpaces.CieLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLch ToCieLch(in SixLabors.ImageSharp.ColorSpaces.CieLchuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLch ToCieLch(in SixLabors.ImageSharp.ColorSpaces.CieLuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLch ToCieLch(in SixLabors.ImageSharp.ColorSpaces.CieXyy color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLch ToCieLch(in SixLabors.ImageSharp.ColorSpaces.CieXyz color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLch ToCieLch(in SixLabors.ImageSharp.ColorSpaces.Cmyk color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLch ToCieLch(in SixLabors.ImageSharp.ColorSpaces.Hsl color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLch ToCieLch(in SixLabors.ImageSharp.ColorSpaces.Hsv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLch ToCieLch(in SixLabors.ImageSharp.ColorSpaces.HunterLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLch ToCieLch(in SixLabors.ImageSharp.ColorSpaces.LinearRgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLch ToCieLch(in SixLabors.ImageSharp.ColorSpaces.Lms color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLch ToCieLch(in SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLch ToCieLch(in SixLabors.ImageSharp.ColorSpaces.YCbCr color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLchuv ToCieLchuv(in SixLabors.ImageSharp.ColorSpaces.CieLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLchuv ToCieLchuv(in SixLabors.ImageSharp.ColorSpaces.CieLch color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLchuv ToCieLchuv(in SixLabors.ImageSharp.ColorSpaces.CieLuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLchuv ToCieLchuv(in SixLabors.ImageSharp.ColorSpaces.CieXyy color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLchuv ToCieLchuv(in SixLabors.ImageSharp.ColorSpaces.CieXyz color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLchuv ToCieLchuv(in SixLabors.ImageSharp.ColorSpaces.Cmyk color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLchuv ToCieLchuv(in SixLabors.ImageSharp.ColorSpaces.Hsl color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLchuv ToCieLchuv(in SixLabors.ImageSharp.ColorSpaces.Hsv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLchuv ToCieLchuv(in SixLabors.ImageSharp.ColorSpaces.HunterLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLchuv ToCieLchuv(in SixLabors.ImageSharp.ColorSpaces.LinearRgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLchuv ToCieLchuv(in SixLabors.ImageSharp.ColorSpaces.Lms color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLchuv ToCieLchuv(in SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLchuv ToCieLchuv(in SixLabors.ImageSharp.ColorSpaces.YCbCr color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLuv ToCieLuv(in SixLabors.ImageSharp.ColorSpaces.CieLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLuv ToCieLuv(in SixLabors.ImageSharp.ColorSpaces.CieLch color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLuv ToCieLuv(in SixLabors.ImageSharp.ColorSpaces.CieLchuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLuv ToCieLuv(in SixLabors.ImageSharp.ColorSpaces.CieXyy color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLuv ToCieLuv(in SixLabors.ImageSharp.ColorSpaces.CieXyz color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLuv ToCieLuv(in SixLabors.ImageSharp.ColorSpaces.Cmyk color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLuv ToCieLuv(in SixLabors.ImageSharp.ColorSpaces.Hsl color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLuv ToCieLuv(in SixLabors.ImageSharp.ColorSpaces.Hsv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLuv ToCieLuv(in SixLabors.ImageSharp.ColorSpaces.HunterLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLuv ToCieLuv(in SixLabors.ImageSharp.ColorSpaces.LinearRgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLuv ToCieLuv(in SixLabors.ImageSharp.ColorSpaces.Lms color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLuv ToCieLuv(in SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieLuv ToCieLuv(in SixLabors.ImageSharp.ColorSpaces.YCbCr color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyy ToCieXyy(SixLabors.ImageSharp.ColorSpaces.Hsl color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyy ToCieXyy(in SixLabors.ImageSharp.ColorSpaces.CieLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyy ToCieXyy(in SixLabors.ImageSharp.ColorSpaces.CieLch color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyy ToCieXyy(in SixLabors.ImageSharp.ColorSpaces.CieLchuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyy ToCieXyy(in SixLabors.ImageSharp.ColorSpaces.CieLuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyy ToCieXyy(in SixLabors.ImageSharp.ColorSpaces.Cmyk color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyy ToCieXyy(in SixLabors.ImageSharp.ColorSpaces.Hsv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyy ToCieXyy(in SixLabors.ImageSharp.ColorSpaces.HunterLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyy ToCieXyy(in SixLabors.ImageSharp.ColorSpaces.LinearRgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyy ToCieXyy(in SixLabors.ImageSharp.ColorSpaces.Lms color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyy ToCieXyy(in SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyy ToCieXyy(in SixLabors.ImageSharp.ColorSpaces.YCbCr color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz ToCieXyz(in SixLabors.ImageSharp.ColorSpaces.CieLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz ToCieXyz(in SixLabors.ImageSharp.ColorSpaces.CieLch color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz ToCieXyz(in SixLabors.ImageSharp.ColorSpaces.CieLchuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz ToCieXyz(in SixLabors.ImageSharp.ColorSpaces.CieLuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz ToCieXyz(in SixLabors.ImageSharp.ColorSpaces.Cmyk color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz ToCieXyz(in SixLabors.ImageSharp.ColorSpaces.Hsl color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz ToCieXyz(in SixLabors.ImageSharp.ColorSpaces.Hsv color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz ToCieXyz(in SixLabors.ImageSharp.ColorSpaces.HunterLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz ToCieXyz(in SixLabors.ImageSharp.ColorSpaces.LinearRgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz ToCieXyz(in SixLabors.ImageSharp.ColorSpaces.Lms color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz ToCieXyz(in SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz ToCieXyz(in SixLabors.ImageSharp.ColorSpaces.YCbCr color) { }
        public SixLabors.ImageSharp.ColorSpaces.Cmyk ToCmyk(in SixLabors.ImageSharp.ColorSpaces.CieLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.Cmyk ToCmyk(in SixLabors.ImageSharp.ColorSpaces.CieLch color) { }
        public SixLabors.ImageSharp.ColorSpaces.Cmyk ToCmyk(in SixLabors.ImageSharp.ColorSpaces.CieLchuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.Cmyk ToCmyk(in SixLabors.ImageSharp.ColorSpaces.CieLuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.Cmyk ToCmyk(in SixLabors.ImageSharp.ColorSpaces.CieXyy color) { }
        public SixLabors.ImageSharp.ColorSpaces.Cmyk ToCmyk(in SixLabors.ImageSharp.ColorSpaces.CieXyz color) { }
        public SixLabors.ImageSharp.ColorSpaces.Cmyk ToCmyk(in SixLabors.ImageSharp.ColorSpaces.HunterLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.Cmyk ToCmyk(in SixLabors.ImageSharp.ColorSpaces.Lms color) { }
        public SixLabors.ImageSharp.ColorSpaces.Cmyk ToCmyk(in SixLabors.ImageSharp.ColorSpaces.YCbCr color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsl ToHsl(SixLabors.ImageSharp.ColorSpaces.Lms color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsl ToHsl(in SixLabors.ImageSharp.ColorSpaces.CieLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsl ToHsl(in SixLabors.ImageSharp.ColorSpaces.CieLch color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsl ToHsl(in SixLabors.ImageSharp.ColorSpaces.CieLchuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsl ToHsl(in SixLabors.ImageSharp.ColorSpaces.CieLuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsl ToHsl(in SixLabors.ImageSharp.ColorSpaces.CieXyy color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsl ToHsl(in SixLabors.ImageSharp.ColorSpaces.CieXyz color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsl ToHsl(in SixLabors.ImageSharp.ColorSpaces.HunterLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsl ToHsl(in SixLabors.ImageSharp.ColorSpaces.YCbCr color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsv ToHsv(SixLabors.ImageSharp.ColorSpaces.Lms color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsv ToHsv(in SixLabors.ImageSharp.ColorSpaces.CieLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsv ToHsv(in SixLabors.ImageSharp.ColorSpaces.CieLch color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsv ToHsv(in SixLabors.ImageSharp.ColorSpaces.CieLchuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsv ToHsv(in SixLabors.ImageSharp.ColorSpaces.CieLuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsv ToHsv(in SixLabors.ImageSharp.ColorSpaces.CieXyy color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsv ToHsv(in SixLabors.ImageSharp.ColorSpaces.CieXyz color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsv ToHsv(in SixLabors.ImageSharp.ColorSpaces.HunterLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.Hsv ToHsv(in SixLabors.ImageSharp.ColorSpaces.YCbCr color) { }
        public SixLabors.ImageSharp.ColorSpaces.HunterLab ToHunterLab(in SixLabors.ImageSharp.ColorSpaces.CieLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.HunterLab ToHunterLab(in SixLabors.ImageSharp.ColorSpaces.CieLch color) { }
        public SixLabors.ImageSharp.ColorSpaces.HunterLab ToHunterLab(in SixLabors.ImageSharp.ColorSpaces.CieLchuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.HunterLab ToHunterLab(in SixLabors.ImageSharp.ColorSpaces.CieLuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.HunterLab ToHunterLab(in SixLabors.ImageSharp.ColorSpaces.CieXyy color) { }
        public SixLabors.ImageSharp.ColorSpaces.HunterLab ToHunterLab(in SixLabors.ImageSharp.ColorSpaces.CieXyz color) { }
        public SixLabors.ImageSharp.ColorSpaces.HunterLab ToHunterLab(in SixLabors.ImageSharp.ColorSpaces.Cmyk color) { }
        public SixLabors.ImageSharp.ColorSpaces.HunterLab ToHunterLab(in SixLabors.ImageSharp.ColorSpaces.Hsl color) { }
        public SixLabors.ImageSharp.ColorSpaces.HunterLab ToHunterLab(in SixLabors.ImageSharp.ColorSpaces.Hsv color) { }
        public SixLabors.ImageSharp.ColorSpaces.HunterLab ToHunterLab(in SixLabors.ImageSharp.ColorSpaces.LinearRgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.HunterLab ToHunterLab(in SixLabors.ImageSharp.ColorSpaces.Lms color) { }
        public SixLabors.ImageSharp.ColorSpaces.HunterLab ToHunterLab(in SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.HunterLab ToHunterLab(in SixLabors.ImageSharp.ColorSpaces.YCbCr color) { }
        public SixLabors.ImageSharp.ColorSpaces.LinearRgb ToLinearRgb(in SixLabors.ImageSharp.ColorSpaces.CieLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.LinearRgb ToLinearRgb(in SixLabors.ImageSharp.ColorSpaces.CieLch color) { }
        public SixLabors.ImageSharp.ColorSpaces.LinearRgb ToLinearRgb(in SixLabors.ImageSharp.ColorSpaces.CieLchuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.LinearRgb ToLinearRgb(in SixLabors.ImageSharp.ColorSpaces.CieLuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.LinearRgb ToLinearRgb(in SixLabors.ImageSharp.ColorSpaces.CieXyy color) { }
        public SixLabors.ImageSharp.ColorSpaces.LinearRgb ToLinearRgb(in SixLabors.ImageSharp.ColorSpaces.CieXyz color) { }
        public SixLabors.ImageSharp.ColorSpaces.LinearRgb ToLinearRgb(in SixLabors.ImageSharp.ColorSpaces.HunterLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.LinearRgb ToLinearRgb(in SixLabors.ImageSharp.ColorSpaces.Lms color) { }
        public SixLabors.ImageSharp.ColorSpaces.LinearRgb ToLinearRgb(in SixLabors.ImageSharp.ColorSpaces.YCbCr color) { }
        public SixLabors.ImageSharp.ColorSpaces.Lms ToLms(in SixLabors.ImageSharp.ColorSpaces.CieLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.Lms ToLms(in SixLabors.ImageSharp.ColorSpaces.CieLch color) { }
        public SixLabors.ImageSharp.ColorSpaces.Lms ToLms(in SixLabors.ImageSharp.ColorSpaces.CieLchuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.Lms ToLms(in SixLabors.ImageSharp.ColorSpaces.CieLuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.Lms ToLms(in SixLabors.ImageSharp.ColorSpaces.CieXyy color) { }
        public SixLabors.ImageSharp.ColorSpaces.Lms ToLms(in SixLabors.ImageSharp.ColorSpaces.CieXyz color) { }
        public SixLabors.ImageSharp.ColorSpaces.Lms ToLms(in SixLabors.ImageSharp.ColorSpaces.Cmyk color) { }
        public SixLabors.ImageSharp.ColorSpaces.Lms ToLms(in SixLabors.ImageSharp.ColorSpaces.Hsl color) { }
        public SixLabors.ImageSharp.ColorSpaces.Lms ToLms(in SixLabors.ImageSharp.ColorSpaces.Hsv color) { }
        public SixLabors.ImageSharp.ColorSpaces.Lms ToLms(in SixLabors.ImageSharp.ColorSpaces.HunterLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.Lms ToLms(in SixLabors.ImageSharp.ColorSpaces.LinearRgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.Lms ToLms(in SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
        public SixLabors.ImageSharp.ColorSpaces.Lms ToLms(in SixLabors.ImageSharp.ColorSpaces.YCbCr color) { }
        public SixLabors.ImageSharp.ColorSpaces.Rgb ToRgb(in SixLabors.ImageSharp.ColorSpaces.CieLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.Rgb ToRgb(in SixLabors.ImageSharp.ColorSpaces.CieLch color) { }
        public SixLabors.ImageSharp.ColorSpaces.Rgb ToRgb(in SixLabors.ImageSharp.ColorSpaces.CieLchuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.Rgb ToRgb(in SixLabors.ImageSharp.ColorSpaces.CieLuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.Rgb ToRgb(in SixLabors.ImageSharp.ColorSpaces.CieXyy color) { }
        public SixLabors.ImageSharp.ColorSpaces.Rgb ToRgb(in SixLabors.ImageSharp.ColorSpaces.CieXyz color) { }
        public SixLabors.ImageSharp.ColorSpaces.Rgb ToRgb(in SixLabors.ImageSharp.ColorSpaces.HunterLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.Rgb ToRgb(in SixLabors.ImageSharp.ColorSpaces.Lms color) { }
        public SixLabors.ImageSharp.ColorSpaces.Rgb ToRgb(in SixLabors.ImageSharp.ColorSpaces.YCbCr color) { }
        public SixLabors.ImageSharp.ColorSpaces.YCbCr ToYCbCr(in SixLabors.ImageSharp.ColorSpaces.CieLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.YCbCr ToYCbCr(in SixLabors.ImageSharp.ColorSpaces.CieLch color) { }
        public SixLabors.ImageSharp.ColorSpaces.YCbCr ToYCbCr(in SixLabors.ImageSharp.ColorSpaces.CieLuv color) { }
        public SixLabors.ImageSharp.ColorSpaces.YCbCr ToYCbCr(in SixLabors.ImageSharp.ColorSpaces.CieXyy color) { }
        public SixLabors.ImageSharp.ColorSpaces.YCbCr ToYCbCr(in SixLabors.ImageSharp.ColorSpaces.CieXyz color) { }
        public SixLabors.ImageSharp.ColorSpaces.YCbCr ToYCbCr(in SixLabors.ImageSharp.ColorSpaces.HunterLab color) { }
        public SixLabors.ImageSharp.ColorSpaces.YCbCr ToYCbCr(in SixLabors.ImageSharp.ColorSpaces.Lms color) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyy> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyz> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyz> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyy> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Cmyk> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsl> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Cmyk> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsv> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Cmyk> source, System.Span<SixLabors.ImageSharp.ColorSpaces.LinearRgb> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Cmyk> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Rgb> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Cmyk> source, System.Span<SixLabors.ImageSharp.ColorSpaces.YCbCr> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsl> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Cmyk> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsl> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsv> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsl> source, System.Span<SixLabors.ImageSharp.ColorSpaces.LinearRgb> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsl> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Rgb> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsl> source, System.Span<SixLabors.ImageSharp.ColorSpaces.YCbCr> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Cmyk> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsl> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.LinearRgb> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Rgb> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Hsv> source, System.Span<SixLabors.ImageSharp.ColorSpaces.YCbCr> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.LinearRgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Cmyk> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.LinearRgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsl> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.LinearRgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsv> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.LinearRgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Rgb> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.LinearRgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.YCbCr> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Rgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Cmyk> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Rgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsl> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Rgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.Hsv> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Rgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.LinearRgb> destination) { }
        public static void Convert(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.Rgb> source, System.Span<SixLabors.ImageSharp.ColorSpaces.YCbCr> destination) { }
        public static SixLabors.ImageSharp.ColorSpaces.CieXyy ToCieXyy(in SixLabors.ImageSharp.ColorSpaces.CieXyz color) { }
        public static SixLabors.ImageSharp.ColorSpaces.CieXyz ToCieXyz(in SixLabors.ImageSharp.ColorSpaces.CieXyy color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Cmyk ToCmyk(in SixLabors.ImageSharp.ColorSpaces.Hsl color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Cmyk ToCmyk(in SixLabors.ImageSharp.ColorSpaces.Hsv color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Cmyk ToCmyk(in SixLabors.ImageSharp.ColorSpaces.LinearRgb color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Cmyk ToCmyk(in SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Hsl ToHsl(in SixLabors.ImageSharp.ColorSpaces.Cmyk color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Hsl ToHsl(in SixLabors.ImageSharp.ColorSpaces.Hsv color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Hsl ToHsl(in SixLabors.ImageSharp.ColorSpaces.LinearRgb color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Hsl ToHsl(in SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Hsv ToHsv(in SixLabors.ImageSharp.ColorSpaces.Cmyk color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Hsv ToHsv(in SixLabors.ImageSharp.ColorSpaces.Hsl color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Hsv ToHsv(in SixLabors.ImageSharp.ColorSpaces.LinearRgb color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Hsv ToHsv(in SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
        public static SixLabors.ImageSharp.ColorSpaces.LinearRgb ToLinearRgb(in SixLabors.ImageSharp.ColorSpaces.Cmyk color) { }
        public static SixLabors.ImageSharp.ColorSpaces.LinearRgb ToLinearRgb(in SixLabors.ImageSharp.ColorSpaces.Hsl color) { }
        public static SixLabors.ImageSharp.ColorSpaces.LinearRgb ToLinearRgb(in SixLabors.ImageSharp.ColorSpaces.Hsv color) { }
        public static SixLabors.ImageSharp.ColorSpaces.LinearRgb ToLinearRgb(in SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Rgb ToRgb(in SixLabors.ImageSharp.ColorSpaces.Cmyk color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Rgb ToRgb(in SixLabors.ImageSharp.ColorSpaces.Hsl color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Rgb ToRgb(in SixLabors.ImageSharp.ColorSpaces.Hsv color) { }
        public static SixLabors.ImageSharp.ColorSpaces.Rgb ToRgb(in SixLabors.ImageSharp.ColorSpaces.LinearRgb color) { }
        public static SixLabors.ImageSharp.ColorSpaces.YCbCr ToYCbCr(in SixLabors.ImageSharp.ColorSpaces.Cmyk color) { }
        public static SixLabors.ImageSharp.ColorSpaces.YCbCr ToYCbCr(in SixLabors.ImageSharp.ColorSpaces.Hsl color) { }
        public static SixLabors.ImageSharp.ColorSpaces.YCbCr ToYCbCr(in SixLabors.ImageSharp.ColorSpaces.Hsv color) { }
        public static SixLabors.ImageSharp.ColorSpaces.YCbCr ToYCbCr(in SixLabors.ImageSharp.ColorSpaces.LinearRgb color) { }
        public static SixLabors.ImageSharp.ColorSpaces.YCbCr ToYCbCr(in SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
    }
    public class ColorSpaceConverterOptions
    {
        public ColorSpaceConverterOptions() { }
        public SixLabors.ImageSharp.ColorSpaces.Conversion.IChromaticAdaptation ChromaticAdaptation { get; set; }
        public System.Numerics.Matrix4x4 LmsAdaptationMatrix { get; set; }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz TargetHunterLabWhitePoint { get; set; }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz TargetLabWhitePoint { get; set; }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz TargetLuvWhitePoint { get; set; }
        public SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace TargetRgbWorkingSpace { get; set; }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz WhitePoint { get; set; }
    }
    public sealed class GammaWorkingSpace : SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace
    {
        public GammaWorkingSpace(float gamma, SixLabors.ImageSharp.ColorSpaces.CieXyz referenceWhite, SixLabors.ImageSharp.ColorSpaces.Conversion.RgbPrimariesChromaticityCoordinates chromaticityCoordinates) { }
        public float Gamma { get; }
        public override float Compress(float channel) { }
        public override bool Equals(object obj) { }
        public override float Expand(float channel) { }
        public override int GetHashCode() { }
    }
    public interface IChromaticAdaptation
    {
        SixLabors.ImageSharp.ColorSpaces.CieXyz Transform(in SixLabors.ImageSharp.ColorSpaces.CieXyz source, in SixLabors.ImageSharp.ColorSpaces.CieXyz sourceWhitePoint, in SixLabors.ImageSharp.ColorSpaces.CieXyz destinationWhitePoint);
        void Transform(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyz> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyz> destination, SixLabors.ImageSharp.ColorSpaces.CieXyz sourceWhitePoint, in SixLabors.ImageSharp.ColorSpaces.CieXyz destinationWhitePoint);
    }
    public sealed class LWorkingSpace : SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace
    {
        public LWorkingSpace(SixLabors.ImageSharp.ColorSpaces.CieXyz referenceWhite, SixLabors.ImageSharp.ColorSpaces.Conversion.RgbPrimariesChromaticityCoordinates chromaticityCoordinates) { }
        public override float Compress(float channel) { }
        public override float Expand(float channel) { }
    }
    public static class LmsAdaptationMatrix
    {
        public static readonly System.Numerics.Matrix4x4 Bradford;
        public static readonly System.Numerics.Matrix4x4 BradfordSharp;
        public static readonly System.Numerics.Matrix4x4 CAT02;
        public static readonly System.Numerics.Matrix4x4 CMCCAT2000;
        public static readonly System.Numerics.Matrix4x4 VonKriesHPE;
        public static readonly System.Numerics.Matrix4x4 VonKriesHPEAdjusted;
        public static readonly System.Numerics.Matrix4x4 XyzScaling;
    }
    public sealed class Rec2020WorkingSpace : SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace
    {
        public Rec2020WorkingSpace(SixLabors.ImageSharp.ColorSpaces.CieXyz referenceWhite, SixLabors.ImageSharp.ColorSpaces.Conversion.RgbPrimariesChromaticityCoordinates chromaticityCoordinates) { }
        public override float Compress(float channel) { }
        public override float Expand(float channel) { }
    }
    public sealed class Rec709WorkingSpace : SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace
    {
        public Rec709WorkingSpace(SixLabors.ImageSharp.ColorSpaces.CieXyz referenceWhite, SixLabors.ImageSharp.ColorSpaces.Conversion.RgbPrimariesChromaticityCoordinates chromaticityCoordinates) { }
        public override float Compress(float channel) { }
        public override float Expand(float channel) { }
    }
    public readonly struct RgbPrimariesChromaticityCoordinates : System.IEquatable<SixLabors.ImageSharp.ColorSpaces.Conversion.RgbPrimariesChromaticityCoordinates>
    {
        public RgbPrimariesChromaticityCoordinates(SixLabors.ImageSharp.ColorSpaces.Conversion.CieXyChromaticityCoordinates r, SixLabors.ImageSharp.ColorSpaces.Conversion.CieXyChromaticityCoordinates g, SixLabors.ImageSharp.ColorSpaces.Conversion.CieXyChromaticityCoordinates b) { }
        public SixLabors.ImageSharp.ColorSpaces.Conversion.CieXyChromaticityCoordinates B { get; }
        public SixLabors.ImageSharp.ColorSpaces.Conversion.CieXyChromaticityCoordinates G { get; }
        public SixLabors.ImageSharp.ColorSpaces.Conversion.CieXyChromaticityCoordinates R { get; }
        public bool Equals(SixLabors.ImageSharp.ColorSpaces.Conversion.RgbPrimariesChromaticityCoordinates other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static bool operator !=(SixLabors.ImageSharp.ColorSpaces.Conversion.RgbPrimariesChromaticityCoordinates left, SixLabors.ImageSharp.ColorSpaces.Conversion.RgbPrimariesChromaticityCoordinates right) { }
        public static bool operator ==(SixLabors.ImageSharp.ColorSpaces.Conversion.RgbPrimariesChromaticityCoordinates left, SixLabors.ImageSharp.ColorSpaces.Conversion.RgbPrimariesChromaticityCoordinates right) { }
    }
    public abstract class RgbWorkingSpace
    {
        protected RgbWorkingSpace(SixLabors.ImageSharp.ColorSpaces.CieXyz referenceWhite, SixLabors.ImageSharp.ColorSpaces.Conversion.RgbPrimariesChromaticityCoordinates chromaticityCoordinates) { }
        public SixLabors.ImageSharp.ColorSpaces.Conversion.RgbPrimariesChromaticityCoordinates ChromaticityCoordinates { get; }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz WhitePoint { get; }
        public abstract float Compress(float channel);
        public override bool Equals(object obj) { }
        public abstract float Expand(float channel);
        public override int GetHashCode() { }
    }
    public sealed class SRgbWorkingSpace : SixLabors.ImageSharp.ColorSpaces.Conversion.RgbWorkingSpace
    {
        public SRgbWorkingSpace(SixLabors.ImageSharp.ColorSpaces.CieXyz referenceWhite, SixLabors.ImageSharp.ColorSpaces.Conversion.RgbPrimariesChromaticityCoordinates chromaticityCoordinates) { }
        public override float Compress(float channel) { }
        public override float Expand(float channel) { }
    }
    public sealed class VonKriesChromaticAdaptation : SixLabors.ImageSharp.ColorSpaces.Conversion.IChromaticAdaptation
    {
        public VonKriesChromaticAdaptation() { }
        public VonKriesChromaticAdaptation(System.Numerics.Matrix4x4 transformationMatrix) { }
        public SixLabors.ImageSharp.ColorSpaces.CieXyz Transform(in SixLabors.ImageSharp.ColorSpaces.CieXyz source, in SixLabors.ImageSharp.ColorSpaces.CieXyz sourceWhitePoint, in SixLabors.ImageSharp.ColorSpaces.CieXyz destinationWhitePoint) { }
        public void Transform(System.ReadOnlySpan<SixLabors.ImageSharp.ColorSpaces.CieXyz> source, System.Span<SixLabors.ImageSharp.ColorSpaces.CieXyz> destination, SixLabors.ImageSharp.ColorSpaces.CieXyz sourceWhitePoint, in SixLabors.ImageSharp.ColorSpaces.CieXyz destinationWhitePoint) { }
    }
}
namespace SixLabors.ImageSharp.Compression.Zlib
{
    public enum DeflateCompressionLevel
    {
        Level0 = 0,
        NoCompression = 0,
        Level1 = 1,
        BestSpeed = 1,
        Level2 = 2,
        Level3 = 3,
        Level4 = 4,
        Level5 = 5,
        Level6 = 6,
        DefaultCompression = 6,
        Level7 = 7,
        Level8 = 8,
        Level9 = 9,
        BestCompression = 9,
    }
}
namespace SixLabors.ImageSharp.Diagnostics
{
    public static class MemoryDiagnostics
    {
        public static int TotalUndisposedAllocationCount { get; }
        public  static  event SixLabors.ImageSharp.Diagnostics.UndisposedAllocationDelegate UndisposedAllocation;
    }
    public delegate void UndisposedAllocationDelegate(string allocationStackTrace);
}
namespace SixLabors.ImageSharp.Formats.Bmp
{
    public enum BmpBitsPerPixel : short
    {
        Pixel1 = 1,
        Pixel2 = 2,
        Pixel4 = 4,
        Pixel8 = 8,
        Pixel16 = 16,
        Pixel24 = 24,
        Pixel32 = 32,
    }
    public sealed class BmpConfigurationModule : SixLabors.ImageSharp.Formats.IImageFormatConfigurationModule
    {
        public BmpConfigurationModule() { }
        public void Configure(SixLabors.ImageSharp.Configuration configuration) { }
    }
    public sealed class BmpDecoder : SixLabors.ImageSharp.Formats.SpecializedImageDecoder<SixLabors.ImageSharp.Formats.Bmp.BmpDecoderOptions>
    {
        public static SixLabors.ImageSharp.Formats.Bmp.BmpDecoder Instance { get; }
        protected override SixLabors.ImageSharp.Formats.Bmp.BmpDecoderOptions CreateDefaultSpecializedOptions(SixLabors.ImageSharp.Formats.DecoderOptions options) { }
        protected override SixLabors.ImageSharp.Image Decode(SixLabors.ImageSharp.Formats.Bmp.BmpDecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
        protected override SixLabors.ImageSharp.Image<TPixel> Decode<TPixel>(SixLabors.ImageSharp.Formats.Bmp.BmpDecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        protected override SixLabors.ImageSharp.IImageInfo Identify(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
    }
    public sealed class BmpDecoderOptions : SixLabors.ImageSharp.Formats.ISpecializedDecoderOptions
    {
        public BmpDecoderOptions() { }
        public SixLabors.ImageSharp.Formats.DecoderOptions GeneralOptions { get; set; }
        public SixLabors.ImageSharp.Formats.Bmp.RleSkippedPixelHandling RleSkippedPixelHandling { get; set; }
    }
    public sealed class BmpEncoder : SixLabors.ImageSharp.Formats.QuantizingImageEncoder
    {
        public BmpEncoder() { }
        public SixLabors.ImageSharp.Formats.Bmp.BmpBitsPerPixel? BitsPerPixel { get; set; }
        public bool SupportTransparency { get; set; }
        protected override void Encode<TPixel>(SixLabors.ImageSharp.Image<TPixel> image, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public enum BmpFileMarkerType
    {
        Bitmap = 0,
        BitmapArray = 1,
        ColorIcon = 2,
        ColorPointer = 3,
        Icon = 4,
        Pointer = 5,
    }
    public sealed class BmpFormat : SixLabors.ImageSharp.Formats.IImageFormat, SixLabors.ImageSharp.Formats.IImageFormat<SixLabors.ImageSharp.Formats.Bmp.BmpMetadata>
    {
        public string DefaultMimeType { get; }
        public System.Collections.Generic.IEnumerable<string> FileExtensions { get; }
        public System.Collections.Generic.IEnumerable<string> MimeTypes { get; }
        public string Name { get; }
        public static SixLabors.ImageSharp.Formats.Bmp.BmpFormat Instance { get; }
        public SixLabors.ImageSharp.Formats.Bmp.BmpMetadata CreateDefaultFormatMetadata() { }
    }
    public sealed class BmpImageFormatDetector : SixLabors.ImageSharp.Formats.IImageFormatDetector
    {
        public BmpImageFormatDetector() { }
        public int HeaderSize { get; }
        public bool TryDetectFormat(System.ReadOnlySpan<byte> header, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format) { }
    }
    public enum BmpInfoHeaderType
    {
        WinVersion2 = 12,
        Os2Version2Short = 16,
        WinVersion3 = 40,
        AdobeVersion3 = 52,
        AdobeVersion3WithAlpha = 56,
        Os2Version2 = 64,
        WinVersion4 = 108,
        WinVersion5 = 124,
    }
    public class BmpMetadata : SixLabors.ImageSharp.IDeepCloneable
    {
        public BmpMetadata() { }
        public SixLabors.ImageSharp.Formats.Bmp.BmpBitsPerPixel BitsPerPixel { get; set; }
        public SixLabors.ImageSharp.Formats.Bmp.BmpInfoHeaderType InfoHeaderType { get; set; }
        public SixLabors.ImageSharp.IDeepCloneable DeepClone() { }
    }
    public enum RleSkippedPixelHandling
    {
        Black = 0,
        Transparent = 1,
        FirstColorOfPalette = 2,
    }
}
namespace SixLabors.ImageSharp.Formats
{
    public sealed class DecoderOptions
    {
        public DecoderOptions() { }
        public SixLabors.ImageSharp.Configuration Configuration { get; }
        public uint MaxFrames { get; set; }
        public SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler Sampler { get; set; }
        public bool SkipMetadata { get; set; }
        public SixLabors.ImageSharp.Size? TargetSize { get; set; }
    }
    public interface IImageDecoder
    {
        SixLabors.ImageSharp.Image Decode(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream);
        SixLabors.ImageSharp.Image<TPixel> Decode<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
        System.Threading.Tasks.Task<SixLabors.ImageSharp.Image> DecodeAsync(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<SixLabors.ImageSharp.Image<TPixel>> DecodeAsync<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
        SixLabors.ImageSharp.IImageInfo Identify(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream);
        System.Threading.Tasks.Task<SixLabors.ImageSharp.IImageInfo> IdentifyAsync(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IImageEncoder
    {
        bool SkipMetadata { get; set; }
        void Encode<TPixel>(SixLabors.ImageSharp.Image<TPixel> image, System.IO.Stream stream)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
        System.Threading.Tasks.Task EncodeAsync<TPixel>(SixLabors.ImageSharp.Image<TPixel> image, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
    }
    public interface IImageFormat
    {
        string DefaultMimeType { get; }
        System.Collections.Generic.IEnumerable<string> FileExtensions { get; }
        System.Collections.Generic.IEnumerable<string> MimeTypes { get; }
        string Name { get; }
    }
    public interface IImageFormatConfigurationModule
    {
        void Configure(SixLabors.ImageSharp.Configuration configuration);
    }
    public interface IImageFormatDetector
    {
        int HeaderSize { get; }
        bool TryDetectFormat(System.ReadOnlySpan<byte> header, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format);
    }
    public interface IImageFormat<out TFormatMetadata> : SixLabors.ImageSharp.Formats.IImageFormat
        where out TFormatMetadata :  class
    {
        TFormatMetadata CreateDefaultFormatMetadata();
    }
    public interface IImageFormat<out TFormatMetadata, out TFormatFrameMetadata> : SixLabors.ImageSharp.Formats.IImageFormat, SixLabors.ImageSharp.Formats.IImageFormat<TFormatMetadata>
        where out TFormatMetadata :  class
        where out TFormatFrameMetadata :  class
    {
        TFormatFrameMetadata CreateDefaultFormatFrameMetadata();
    }
    public interface ISpecializedDecoderOptions
    {
        SixLabors.ImageSharp.Formats.DecoderOptions GeneralOptions { get; set; }
    }
    public interface ISpecializedImageDecoder<T> : SixLabors.ImageSharp.Formats.IImageDecoder
        where T : SixLabors.ImageSharp.Formats.ISpecializedDecoderOptions
    {
        SixLabors.ImageSharp.Image Decode(T options, System.IO.Stream stream);
        SixLabors.ImageSharp.Image<TPixel> Decode<TPixel>(T options, System.IO.Stream stream)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
        System.Threading.Tasks.Task<SixLabors.ImageSharp.Image> DecodeAsync(T options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<SixLabors.ImageSharp.Image<TPixel>> DecodeAsync<TPixel>(T options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
    }
    public abstract class ImageDecoder : SixLabors.ImageSharp.Formats.IImageDecoder
    {
        protected ImageDecoder() { }
        public SixLabors.ImageSharp.Image Decode(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream) { }
        protected abstract SixLabors.ImageSharp.Image Decode(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken);
        public SixLabors.ImageSharp.Image<TPixel> Decode<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        protected abstract SixLabors.ImageSharp.Image<TPixel> Decode<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
        public System.Threading.Tasks.Task<SixLabors.ImageSharp.Image> DecodeAsync(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<SixLabors.ImageSharp.Image<TPixel>> DecodeAsync<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public SixLabors.ImageSharp.IImageInfo Identify(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream) { }
        protected abstract SixLabors.ImageSharp.IImageInfo Identify(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken);
        public System.Threading.Tasks.Task<SixLabors.ImageSharp.IImageInfo> IdentifyAsync(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        protected static void ScaleToTargetSize(SixLabors.ImageSharp.Formats.DecoderOptions options, SixLabors.ImageSharp.Image image) { }
    }
    public abstract class ImageEncoder : SixLabors.ImageSharp.Formats.IImageEncoder
    {
        protected ImageEncoder() { }
        public bool SkipMetadata { get; set; }
        public void Encode<TPixel>(SixLabors.ImageSharp.Image<TPixel> image, System.IO.Stream stream)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        protected abstract void Encode<TPixel>(SixLabors.ImageSharp.Image<TPixel> image, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
        public System.Threading.Tasks.Task EncodeAsync<TPixel>(SixLabors.ImageSharp.Image<TPixel> image, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public class ImageFormatManager
    {
        public ImageFormatManager() { }
        public System.Collections.Generic.IEnumerable<SixLabors.ImageSharp.Formats.IImageFormat> ImageFormats { get; }
        public void AddImageFormat(SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public void AddImageFormatDetector(SixLabors.ImageSharp.Formats.IImageFormatDetector detector) { }
        public void ClearImageFormatDetectors() { }
        public SixLabors.ImageSharp.Formats.IImageDecoder? FindDecoder(SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public SixLabors.ImageSharp.Formats.IImageEncoder? FindEncoder(SixLabors.ImageSharp.Formats.IImageFormat format) { }
        public SixLabors.ImageSharp.Formats.IImageFormat? FindFormatByMimeType(string mimeType) { }
        public void SetDecoder(SixLabors.ImageSharp.Formats.IImageFormat imageFormat, SixLabors.ImageSharp.Formats.IImageDecoder decoder) { }
        public void SetEncoder(SixLabors.ImageSharp.Formats.IImageFormat imageFormat, SixLabors.ImageSharp.Formats.IImageEncoder encoder) { }
        public bool TryFindFormatByFileExtension(string extension, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format) { }
    }
    public class PixelTypeInfo
    {
        public PixelTypeInfo(int bitsPerPixel) { }
        public PixelTypeInfo(int bitsPerPixel, SixLabors.ImageSharp.PixelFormats.PixelAlphaRepresentation alpha) { }
        public SixLabors.ImageSharp.PixelFormats.PixelAlphaRepresentation? AlphaRepresentation { get; }
        public int BitsPerPixel { get; }
    }
    public abstract class QuantizingImageEncoder : SixLabors.ImageSharp.Formats.ImageEncoder
    {
        protected QuantizingImageEncoder() { }
        public SixLabors.ImageSharp.Processing.Processors.Quantization.IPixelSamplingStrategy PixelSamplingStrategy { get; set; }
        public SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer Quantizer { get; set; }
    }
    public abstract class SpecializedImageDecoder<T> : SixLabors.ImageSharp.Formats.ImageDecoder, SixLabors.ImageSharp.Formats.IImageDecoder, SixLabors.ImageSharp.Formats.ISpecializedImageDecoder<T>
        where T : SixLabors.ImageSharp.Formats.ISpecializedDecoderOptions
    {
        protected SpecializedImageDecoder() { }
        protected abstract T CreateDefaultSpecializedOptions(SixLabors.ImageSharp.Formats.DecoderOptions options);
        public SixLabors.ImageSharp.Image Decode(T options, System.IO.Stream stream) { }
        protected override SixLabors.ImageSharp.Image Decode(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
        protected abstract SixLabors.ImageSharp.Image Decode(T options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken);
        public SixLabors.ImageSharp.Image<TPixel> Decode<TPixel>(T options, System.IO.Stream stream)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        protected override SixLabors.ImageSharp.Image<TPixel> Decode<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        protected abstract SixLabors.ImageSharp.Image<TPixel> Decode<TPixel>(T options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
        public System.Threading.Tasks.Task<SixLabors.ImageSharp.Image> DecodeAsync(T options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<SixLabors.ImageSharp.Image<TPixel>> DecodeAsync<TPixel>(T options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
}
namespace SixLabors.ImageSharp.Formats.Gif
{
    public enum GifColorTableMode
    {
        Global = 0,
        Local = 1,
    }
    public sealed class GifConfigurationModule : SixLabors.ImageSharp.Formats.IImageFormatConfigurationModule
    {
        public GifConfigurationModule() { }
        public void Configure(SixLabors.ImageSharp.Configuration configuration) { }
    }
    public sealed class GifDecoder : SixLabors.ImageSharp.Formats.ImageDecoder
    {
        public static SixLabors.ImageSharp.Formats.Gif.GifDecoder Instance { get; }
        protected override SixLabors.ImageSharp.Image Decode(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
        protected override SixLabors.ImageSharp.Image<TPixel> Decode<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        protected override SixLabors.ImageSharp.IImageInfo Identify(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
    }
    public enum GifDisposalMethod
    {
        Unspecified = 0,
        NotDispose = 1,
        RestoreToBackground = 2,
        RestoreToPrevious = 3,
    }
    public sealed class GifEncoder : SixLabors.ImageSharp.Formats.QuantizingImageEncoder
    {
        public GifEncoder() { }
        public SixLabors.ImageSharp.Formats.Gif.GifColorTableMode? ColorTableMode { get; set; }
        protected override void Encode<TPixel>(SixLabors.ImageSharp.Image<TPixel> image, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class GifFormat : SixLabors.ImageSharp.Formats.IImageFormat, SixLabors.ImageSharp.Formats.IImageFormat<SixLabors.ImageSharp.Formats.Gif.GifMetadata>, SixLabors.ImageSharp.Formats.IImageFormat<SixLabors.ImageSharp.Formats.Gif.GifMetadata, SixLabors.ImageSharp.Formats.Gif.GifFrameMetadata>
    {
        public string DefaultMimeType { get; }
        public System.Collections.Generic.IEnumerable<string> FileExtensions { get; }
        public System.Collections.Generic.IEnumerable<string> MimeTypes { get; }
        public string Name { get; }
        public static SixLabors.ImageSharp.Formats.Gif.GifFormat Instance { get; }
        public SixLabors.ImageSharp.Formats.Gif.GifFrameMetadata CreateDefaultFormatFrameMetadata() { }
        public SixLabors.ImageSharp.Formats.Gif.GifMetadata CreateDefaultFormatMetadata() { }
    }
    public class GifFrameMetadata : SixLabors.ImageSharp.IDeepCloneable
    {
        public GifFrameMetadata() { }
        public int ColorTableLength { get; set; }
        public SixLabors.ImageSharp.Formats.Gif.GifColorTableMode ColorTableMode { get; set; }
        public SixLabors.ImageSharp.Formats.Gif.GifDisposalMethod DisposalMethod { get; set; }
        public int FrameDelay { get; set; }
        public SixLabors.ImageSharp.IDeepCloneable DeepClone() { }
    }
    public sealed class GifImageFormatDetector : SixLabors.ImageSharp.Formats.IImageFormatDetector
    {
        public GifImageFormatDetector() { }
        public int HeaderSize { get; }
        public bool TryDetectFormat(System.ReadOnlySpan<byte> header, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format) { }
    }
    public class GifMetadata : SixLabors.ImageSharp.IDeepCloneable
    {
        public GifMetadata() { }
        public SixLabors.ImageSharp.Formats.Gif.GifColorTableMode ColorTableMode { get; set; }
        public System.Collections.Generic.IList<string> Comments { get; set; }
        public int GlobalColorTableLength { get; set; }
        public ushort RepeatCount { get; set; }
        public SixLabors.ImageSharp.IDeepCloneable DeepClone() { }
    }
    public interface IGifExtension
    {
        int ContentLength { get; }
        byte Label { get; }
        int WriteTo(System.Span<byte> buffer);
    }
}
namespace SixLabors.ImageSharp.Formats.Jpeg.Components.Encoder
{
    public readonly struct HuffmanSpec
    {
        public static readonly SixLabors.ImageSharp.Formats.Jpeg.Components.Encoder.HuffmanSpec ChrominanceAC;
        public static readonly SixLabors.ImageSharp.Formats.Jpeg.Components.Encoder.HuffmanSpec ChrominanceDC;
        public static readonly SixLabors.ImageSharp.Formats.Jpeg.Components.Encoder.HuffmanSpec LuminanceAC;
        public static readonly SixLabors.ImageSharp.Formats.Jpeg.Components.Encoder.HuffmanSpec LuminanceDC;
        public HuffmanSpec(byte[] count, byte[] values) { }
        public byte[] Count { get; }
        public byte[] Values { get; }
    }
}
namespace SixLabors.ImageSharp.Formats.Jpeg
{
    public sealed class JpegConfigurationModule : SixLabors.ImageSharp.Formats.IImageFormatConfigurationModule
    {
        public JpegConfigurationModule() { }
        public void Configure(SixLabors.ImageSharp.Configuration configuration) { }
    }
    public sealed class JpegDecoder : SixLabors.ImageSharp.Formats.SpecializedImageDecoder<SixLabors.ImageSharp.Formats.Jpeg.JpegDecoderOptions>
    {
        public static SixLabors.ImageSharp.Formats.Jpeg.JpegDecoder Instance { get; }
        protected override SixLabors.ImageSharp.Formats.Jpeg.JpegDecoderOptions CreateDefaultSpecializedOptions(SixLabors.ImageSharp.Formats.DecoderOptions options) { }
        protected override SixLabors.ImageSharp.Image Decode(SixLabors.ImageSharp.Formats.Jpeg.JpegDecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
        protected override SixLabors.ImageSharp.Image<TPixel> Decode<TPixel>(SixLabors.ImageSharp.Formats.Jpeg.JpegDecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        protected override SixLabors.ImageSharp.IImageInfo Identify(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
    }
    public sealed class JpegDecoderOptions : SixLabors.ImageSharp.Formats.ISpecializedDecoderOptions
    {
        public JpegDecoderOptions() { }
        public SixLabors.ImageSharp.Formats.DecoderOptions GeneralOptions { get; set; }
        public SixLabors.ImageSharp.Formats.Jpeg.JpegDecoderResizeMode ResizeMode { get; set; }
    }
    public enum JpegDecoderResizeMode
    {
        Combined = 0,
        IdctOnly = 1,
        ScaleOnly = 2,
    }
    public sealed class JpegEncoder : SixLabors.ImageSharp.Formats.ImageEncoder
    {
        public JpegEncoder() { }
        public SixLabors.ImageSharp.Formats.Jpeg.JpegEncodingColor? ColorType { get; set; }
        public bool? Interleaved { get; set; }
        public int? Quality { get; set; }
        protected override void Encode<TPixel>(SixLabors.ImageSharp.Image<TPixel> image, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public enum JpegEncodingColor : byte
    {
        YCbCrRatio420 = 0,
        YCbCrRatio444 = 1,
        YCbCrRatio422 = 2,
        YCbCrRatio411 = 3,
        YCbCrRatio410 = 4,
        Luminance = 5,
        Rgb = 6,
        Cmyk = 7,
        Ycck = 8,
    }
    public sealed class JpegFormat : SixLabors.ImageSharp.Formats.IImageFormat, SixLabors.ImageSharp.Formats.IImageFormat<SixLabors.ImageSharp.Formats.Jpeg.JpegMetadata>
    {
        public string DefaultMimeType { get; }
        public System.Collections.Generic.IEnumerable<string> FileExtensions { get; }
        public System.Collections.Generic.IEnumerable<string> MimeTypes { get; }
        public string Name { get; }
        public static SixLabors.ImageSharp.Formats.Jpeg.JpegFormat Instance { get; }
        public SixLabors.ImageSharp.Formats.Jpeg.JpegMetadata CreateDefaultFormatMetadata() { }
    }
    public sealed class JpegImageFormatDetector : SixLabors.ImageSharp.Formats.IImageFormatDetector
    {
        public JpegImageFormatDetector() { }
        public int HeaderSize { get; }
        public bool TryDetectFormat(System.ReadOnlySpan<byte> header, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format) { }
    }
    public class JpegMetadata : SixLabors.ImageSharp.IDeepCloneable
    {
        public JpegMetadata() { }
        public SixLabors.ImageSharp.Formats.Jpeg.JpegEncodingColor? ColorType { get; }
        public bool? Interleaved { get; }
        public bool? Progressive { get; }
        public int Quality { get; }
        public SixLabors.ImageSharp.IDeepCloneable DeepClone() { }
    }
}
namespace SixLabors.ImageSharp.Formats.Pbm
{
    public enum PbmColorType : byte
    {
        BlackAndWhite = 0,
        Grayscale = 1,
        Rgb = 2,
    }
    public enum PbmComponentType : byte
    {
        Bit = 0,
        Byte = 1,
        Short = 2,
    }
    public sealed class PbmConfigurationModule : SixLabors.ImageSharp.Formats.IImageFormatConfigurationModule
    {
        public PbmConfigurationModule() { }
        public void Configure(SixLabors.ImageSharp.Configuration configuration) { }
    }
    public sealed class PbmDecoder : SixLabors.ImageSharp.Formats.ImageDecoder
    {
        public static SixLabors.ImageSharp.Formats.Pbm.PbmDecoder Instance { get; }
        protected override SixLabors.ImageSharp.Image Decode(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
        protected override SixLabors.ImageSharp.Image<TPixel> Decode<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        protected override SixLabors.ImageSharp.IImageInfo Identify(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
    }
    public sealed class PbmEncoder : SixLabors.ImageSharp.Formats.ImageEncoder
    {
        public PbmEncoder() { }
        public SixLabors.ImageSharp.Formats.Pbm.PbmColorType? ColorType { get; set; }
        public SixLabors.ImageSharp.Formats.Pbm.PbmComponentType? ComponentType { get; set; }
        public SixLabors.ImageSharp.Formats.Pbm.PbmEncoding? Encoding { get; set; }
        protected override void Encode<TPixel>(SixLabors.ImageSharp.Image<TPixel> image, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public enum PbmEncoding : byte
    {
        Plain = 0,
        Binary = 1,
    }
    public sealed class PbmFormat : SixLabors.ImageSharp.Formats.IImageFormat, SixLabors.ImageSharp.Formats.IImageFormat<SixLabors.ImageSharp.Formats.Pbm.PbmMetadata>
    {
        public string DefaultMimeType { get; }
        public System.Collections.Generic.IEnumerable<string> FileExtensions { get; }
        public System.Collections.Generic.IEnumerable<string> MimeTypes { get; }
        public string Name { get; }
        public static SixLabors.ImageSharp.Formats.Pbm.PbmFormat Instance { get; }
        public SixLabors.ImageSharp.Formats.Pbm.PbmMetadata CreateDefaultFormatMetadata() { }
    }
    public sealed class PbmImageFormatDetector : SixLabors.ImageSharp.Formats.IImageFormatDetector
    {
        public PbmImageFormatDetector() { }
        public int HeaderSize { get; }
        public bool TryDetectFormat(System.ReadOnlySpan<byte> header, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format) { }
    }
    public class PbmMetadata : SixLabors.ImageSharp.IDeepCloneable
    {
        public PbmMetadata() { }
        public SixLabors.ImageSharp.Formats.Pbm.PbmColorType ColorType { get; set; }
        public SixLabors.ImageSharp.Formats.Pbm.PbmComponentType ComponentType { get; set; }
        public SixLabors.ImageSharp.Formats.Pbm.PbmEncoding Encoding { get; set; }
        public SixLabors.ImageSharp.IDeepCloneable DeepClone() { }
    }
}
namespace SixLabors.ImageSharp.Formats.Png
{
    public enum PngBitDepth : byte
    {
        Bit1 = 1,
        Bit2 = 2,
        Bit4 = 4,
        Bit8 = 8,
        Bit16 = 16,
    }
    [System.Flags]
    public enum PngChunkFilter
    {
        None = 0,
        ExcludePhysicalChunk = 1,
        ExcludeGammaChunk = 2,
        ExcludeExifChunk = 4,
        ExcludeTextChunks = 8,
        ExcludeAll = -1,
    }
    public enum PngColorType : byte
    {
        Grayscale = 0,
        Rgb = 2,
        Palette = 3,
        GrayscaleWithAlpha = 4,
        RgbWithAlpha = 6,
    }
    public enum PngCompressionLevel
    {
        Level0 = 0,
        NoCompression = 0,
        Level1 = 1,
        BestSpeed = 1,
        Level2 = 2,
        Level3 = 3,
        Level4 = 4,
        Level5 = 5,
        Level6 = 6,
        DefaultCompression = 6,
        Level7 = 7,
        Level8 = 8,
        Level9 = 9,
        BestCompression = 9,
    }
    public sealed class PngConfigurationModule : SixLabors.ImageSharp.Formats.IImageFormatConfigurationModule
    {
        public PngConfigurationModule() { }
        public void Configure(SixLabors.ImageSharp.Configuration configuration) { }
    }
    public sealed class PngDecoder : SixLabors.ImageSharp.Formats.ImageDecoder
    {
        public static SixLabors.ImageSharp.Formats.Png.PngDecoder Instance { get; }
        protected override SixLabors.ImageSharp.Image Decode(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
        protected override SixLabors.ImageSharp.Image<TPixel> Decode<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        protected override SixLabors.ImageSharp.IImageInfo Identify(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
    }
    public class PngEncoder : SixLabors.ImageSharp.Formats.QuantizingImageEncoder
    {
        public PngEncoder() { }
        public SixLabors.ImageSharp.Formats.Png.PngBitDepth? BitDepth { get; set; }
        public SixLabors.ImageSharp.Formats.Png.PngChunkFilter? ChunkFilter { get; set; }
        public SixLabors.ImageSharp.Formats.Png.PngColorType? ColorType { get; set; }
        public SixLabors.ImageSharp.Formats.Png.PngCompressionLevel CompressionLevel { get; set; }
        public SixLabors.ImageSharp.Formats.Png.PngFilterMethod? FilterMethod { get; set; }
        public float? Gamma { get; set; }
        public SixLabors.ImageSharp.Formats.Png.PngInterlaceMode? InterlaceMethod { get; set; }
        public int TextCompressionThreshold { get; set; }
        public byte Threshold { get; set; }
        public SixLabors.ImageSharp.Formats.Png.PngTransparentColorMode TransparentColorMode { get; set; }
        protected override void Encode<TPixel>(SixLabors.ImageSharp.Image<TPixel> image, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public enum PngFilterMethod
    {
        None = 0,
        Sub = 1,
        Up = 2,
        Average = 3,
        Paeth = 4,
        Adaptive = 5,
    }
    public sealed class PngFormat : SixLabors.ImageSharp.Formats.IImageFormat, SixLabors.ImageSharp.Formats.IImageFormat<SixLabors.ImageSharp.Formats.Png.PngMetadata>
    {
        public string DefaultMimeType { get; }
        public System.Collections.Generic.IEnumerable<string> FileExtensions { get; }
        public System.Collections.Generic.IEnumerable<string> MimeTypes { get; }
        public string Name { get; }
        public static SixLabors.ImageSharp.Formats.Png.PngFormat Instance { get; }
        public SixLabors.ImageSharp.Formats.Png.PngMetadata CreateDefaultFormatMetadata() { }
    }
    public sealed class PngImageFormatDetector : SixLabors.ImageSharp.Formats.IImageFormatDetector
    {
        public PngImageFormatDetector() { }
        public int HeaderSize { get; }
        public bool TryDetectFormat(System.ReadOnlySpan<byte> header, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format) { }
    }
    public enum PngInterlaceMode : byte
    {
        None = 0,
        Adam7 = 1,
    }
    public class PngMetadata : SixLabors.ImageSharp.IDeepCloneable
    {
        public PngMetadata() { }
        public SixLabors.ImageSharp.Formats.Png.PngBitDepth? BitDepth { get; set; }
        public SixLabors.ImageSharp.Formats.Png.PngColorType? ColorType { get; set; }
        public float Gamma { get; set; }
        public bool HasTransparency { get; set; }
        public SixLabors.ImageSharp.Formats.Png.PngInterlaceMode? InterlaceMethod { get; set; }
        public System.Collections.Generic.IList<SixLabors.ImageSharp.Formats.Png.PngTextData> TextData { get; set; }
        public SixLabors.ImageSharp.PixelFormats.L16? TransparentL16 { get; set; }
        public SixLabors.ImageSharp.PixelFormats.L8? TransparentL8 { get; set; }
        public SixLabors.ImageSharp.PixelFormats.Rgb24? TransparentRgb24 { get; set; }
        public SixLabors.ImageSharp.PixelFormats.Rgb48? TransparentRgb48 { get; set; }
        public SixLabors.ImageSharp.IDeepCloneable DeepClone() { }
    }
    public readonly struct PngTextData : System.IEquatable<SixLabors.ImageSharp.Formats.Png.PngTextData>
    {
        public PngTextData(string keyword, string value, string languageTag, string translatedKeyword) { }
        public string Keyword { get; }
        public string LanguageTag { get; }
        public string TranslatedKeyword { get; }
        public string Value { get; }
        public bool Equals(SixLabors.ImageSharp.Formats.Png.PngTextData other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.Formats.Png.PngTextData left, SixLabors.ImageSharp.Formats.Png.PngTextData right) { }
        public static bool operator ==(SixLabors.ImageSharp.Formats.Png.PngTextData left, SixLabors.ImageSharp.Formats.Png.PngTextData right) { }
    }
    public enum PngTransparentColorMode
    {
        Preserve = 0,
        Clear = 1,
    }
}
namespace SixLabors.ImageSharp.Formats.Tga
{
    public enum TgaBitsPerPixel : byte
    {
        Pixel8 = 8,
        Pixel16 = 16,
        Pixel24 = 24,
        Pixel32 = 32,
    }
    public enum TgaCompression
    {
        None = 0,
        RunLength = 1,
    }
    public sealed class TgaConfigurationModule : SixLabors.ImageSharp.Formats.IImageFormatConfigurationModule
    {
        public TgaConfigurationModule() { }
        public void Configure(SixLabors.ImageSharp.Configuration configuration) { }
    }
    public sealed class TgaDecoder : SixLabors.ImageSharp.Formats.ImageDecoder
    {
        public static SixLabors.ImageSharp.Formats.Tga.TgaDecoder Instance { get; }
        protected override SixLabors.ImageSharp.Image Decode(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
        protected override SixLabors.ImageSharp.Image<TPixel> Decode<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        protected override SixLabors.ImageSharp.IImageInfo Identify(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
    }
    public sealed class TgaEncoder : SixLabors.ImageSharp.Formats.ImageEncoder
    {
        public TgaEncoder() { }
        public SixLabors.ImageSharp.Formats.Tga.TgaBitsPerPixel? BitsPerPixel { get; set; }
        public SixLabors.ImageSharp.Formats.Tga.TgaCompression Compression { get; set; }
        protected override void Encode<TPixel>(SixLabors.ImageSharp.Image<TPixel> image, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class TgaFormat : SixLabors.ImageSharp.Formats.IImageFormat, SixLabors.ImageSharp.Formats.IImageFormat<SixLabors.ImageSharp.Formats.Tga.TgaMetadata>
    {
        public TgaFormat() { }
        public string DefaultMimeType { get; }
        public System.Collections.Generic.IEnumerable<string> FileExtensions { get; }
        public System.Collections.Generic.IEnumerable<string> MimeTypes { get; }
        public string Name { get; }
        public static SixLabors.ImageSharp.Formats.Tga.TgaFormat Instance { get; }
        public SixLabors.ImageSharp.Formats.Tga.TgaMetadata CreateDefaultFormatMetadata() { }
    }
    public sealed class TgaImageFormatDetector : SixLabors.ImageSharp.Formats.IImageFormatDetector
    {
        public TgaImageFormatDetector() { }
        public int HeaderSize { get; }
        public bool TryDetectFormat(System.ReadOnlySpan<byte> header, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format) { }
    }
    public enum TgaImageType : byte
    {
        NoImageData = 0,
        ColorMapped = 1,
        TrueColor = 2,
        BlackAndWhite = 3,
        RleColorMapped = 9,
        RleTrueColor = 10,
        RleBlackAndWhite = 11,
    }
    public static class TgaImageTypeExtensions
    {
        public static bool IsRunLengthEncoded(this SixLabors.ImageSharp.Formats.Tga.TgaImageType imageType) { }
        public static bool IsValid(this SixLabors.ImageSharp.Formats.Tga.TgaImageType imageType) { }
    }
    public class TgaMetadata : SixLabors.ImageSharp.IDeepCloneable
    {
        public TgaMetadata() { }
        public byte AlphaChannelBits { get; set; }
        public SixLabors.ImageSharp.Formats.Tga.TgaBitsPerPixel BitsPerPixel { get; set; }
        public SixLabors.ImageSharp.IDeepCloneable DeepClone() { }
    }
}
namespace SixLabors.ImageSharp.Formats.Tiff.Compression.Decompressors
{
    public class LzwString
    {
        public LzwString(byte code) { }
        public byte FirstChar { get; }
        public int Length { get; }
        public SixLabors.ImageSharp.Formats.Tiff.Compression.Decompressors.LzwString Concatenate(byte other) { }
        public int WriteTo(System.Span<byte> buffer, int offset) { }
    }
}
namespace SixLabors.ImageSharp.Formats.Tiff.Compression
{
    [System.Flags]
    public enum FaxCompressionOptions : uint
    {
        None = 0u,
        TwoDimensionalCoding = 1u,
        UncompressedMode = 2u,
        EolPadding = 4u,
    }
}
namespace SixLabors.ImageSharp.Formats.Tiff.Constants
{
    public enum TiffCompression : ushort
    {
        Invalid = 0,
        None = 1,
        Ccitt1D = 2,
        CcittGroup3Fax = 3,
        CcittGroup4Fax = 4,
        Lzw = 5,
        OldJpeg = 6,
        Jpeg = 7,
        Deflate = 8,
        ItuTRecT82 = 9,
        ItuTRecT43 = 10,
        NeXT = 32766,
        PackBits = 32773,
        ThunderScan = 32809,
        OldDeflate = 32946,
        Webp = 50001,
    }
    [System.Flags]
    public enum TiffNewSubfileType : uint
    {
        FullImage = 0u,
        Preview = 1u,
        SinglePage = 2u,
        TransparencyMask = 4u,
        AlternativePreview = 65536u,
        MixedRasterContent = 8u,
    }
    public enum TiffPhotometricInterpretation : ushort
    {
        WhiteIsZero = 0,
        BlackIsZero = 1,
        Rgb = 2,
        PaletteColor = 3,
        TransparencyMask = 4,
        Separated = 5,
        YCbCr = 6,
        CieLab = 8,
        IccLab = 9,
        ItuLab = 10,
        ColorFilterArray = 32803,
        LinearRaw = 34892,
    }
    public enum TiffPlanarConfiguration : ushort
    {
        Chunky = 1,
        Planar = 2,
    }
    public enum TiffPredictor : ushort
    {
        None = 1,
        Horizontal = 2,
        FloatingPoint = 3,
    }
    public enum TiffSampleFormat : ushort
    {
        UnsignedInteger = 1,
        SignedInteger = 2,
        Float = 3,
        Undefined = 4,
        ComplexInt = 5,
        ComplexFloat = 6,
    }
    public enum TiffSubfileType : ushort
    {
        FullImage = 1,
        Preview = 2,
        SinglePage = 3,
    }
}
namespace SixLabors.ImageSharp.Formats.Tiff
{
    public enum TiffBitsPerPixel
    {
        Bit1 = 1,
        Bit4 = 4,
        Bit6 = 6,
        Bit8 = 8,
        Bit10 = 10,
        Bit12 = 12,
        Bit14 = 14,
        Bit16 = 16,
        Bit24 = 24,
        Bit30 = 30,
        Bit36 = 36,
        Bit42 = 42,
        Bit48 = 48,
    }
    public readonly struct TiffBitsPerSample : System.IEquatable<SixLabors.ImageSharp.Formats.Tiff.TiffBitsPerSample>
    {
        public TiffBitsPerSample(ushort channel0, ushort channel1, ushort channel2, ushort channel3 = 0) { }
        public ushort Channel0 { get; }
        public ushort Channel1 { get; }
        public ushort Channel2 { get; }
        public ushort Channel3 { get; }
        public byte Channels { get; }
        public SixLabors.ImageSharp.Formats.Tiff.TiffBitsPerPixel BitsPerPixel() { }
        public bool Equals(SixLabors.ImageSharp.Formats.Tiff.TiffBitsPerSample other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public ushort[] ToArray() { }
        public override string ToString() { }
        public static bool TryParse(ushort[] value, out SixLabors.ImageSharp.Formats.Tiff.TiffBitsPerSample sample) { }
        public static bool operator !=(SixLabors.ImageSharp.Formats.Tiff.TiffBitsPerSample left, SixLabors.ImageSharp.Formats.Tiff.TiffBitsPerSample right) { }
        public static bool operator ==(SixLabors.ImageSharp.Formats.Tiff.TiffBitsPerSample left, SixLabors.ImageSharp.Formats.Tiff.TiffBitsPerSample right) { }
    }
    public sealed class TiffConfigurationModule : SixLabors.ImageSharp.Formats.IImageFormatConfigurationModule
    {
        public TiffConfigurationModule() { }
        public void Configure(SixLabors.ImageSharp.Configuration configuration) { }
    }
    public class TiffDecoder : SixLabors.ImageSharp.Formats.ImageDecoder
    {
        public static SixLabors.ImageSharp.Formats.Tiff.TiffDecoder Instance { get; }
        protected override SixLabors.ImageSharp.Image Decode(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
        protected override SixLabors.ImageSharp.Image<TPixel> Decode<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        protected override SixLabors.ImageSharp.IImageInfo Identify(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
    }
    public class TiffEncoder : SixLabors.ImageSharp.Formats.QuantizingImageEncoder
    {
        public TiffEncoder() { }
        public SixLabors.ImageSharp.Formats.Tiff.TiffBitsPerPixel? BitsPerPixel { get; set; }
        public SixLabors.ImageSharp.Formats.Tiff.Constants.TiffCompression? Compression { get; set; }
        public SixLabors.ImageSharp.Compression.Zlib.DeflateCompressionLevel? CompressionLevel { get; set; }
        public SixLabors.ImageSharp.Formats.Tiff.Constants.TiffPredictor? HorizontalPredictor { get; set; }
        public SixLabors.ImageSharp.Formats.Tiff.Constants.TiffPhotometricInterpretation? PhotometricInterpretation { get; set; }
        protected override void Encode<TPixel>(SixLabors.ImageSharp.Image<TPixel> image, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class TiffFormat : SixLabors.ImageSharp.Formats.IImageFormat, SixLabors.ImageSharp.Formats.IImageFormat<SixLabors.ImageSharp.Formats.Tiff.TiffMetadata>, SixLabors.ImageSharp.Formats.IImageFormat<SixLabors.ImageSharp.Formats.Tiff.TiffMetadata, SixLabors.ImageSharp.Formats.Tiff.TiffFrameMetadata>
    {
        public string DefaultMimeType { get; }
        public System.Collections.Generic.IEnumerable<string> FileExtensions { get; }
        public System.Collections.Generic.IEnumerable<string> MimeTypes { get; }
        public string Name { get; }
        public static SixLabors.ImageSharp.Formats.Tiff.TiffFormat Instance { get; }
        public SixLabors.ImageSharp.Formats.Tiff.TiffFrameMetadata CreateDefaultFormatFrameMetadata() { }
        public SixLabors.ImageSharp.Formats.Tiff.TiffMetadata CreateDefaultFormatMetadata() { }
    }
    public enum TiffFormatType
    {
        Default = 0,
        BigTIFF = 1,
    }
    public class TiffFrameMetadata : SixLabors.ImageSharp.IDeepCloneable
    {
        public TiffFrameMetadata() { }
        public SixLabors.ImageSharp.Formats.Tiff.TiffBitsPerPixel? BitsPerPixel { get; set; }
        public SixLabors.ImageSharp.Formats.Tiff.TiffBitsPerSample? BitsPerSample { get; set; }
        public SixLabors.ImageSharp.Formats.Tiff.Constants.TiffCompression? Compression { get; set; }
        public SixLabors.ImageSharp.Formats.Tiff.Constants.TiffPhotometricInterpretation? PhotometricInterpretation { get; set; }
        public SixLabors.ImageSharp.Formats.Tiff.Constants.TiffPredictor? Predictor { get; set; }
        public SixLabors.ImageSharp.IDeepCloneable DeepClone() { }
    }
    public sealed class TiffImageFormatDetector : SixLabors.ImageSharp.Formats.IImageFormatDetector
    {
        public TiffImageFormatDetector() { }
        public int HeaderSize { get; }
        public bool TryDetectFormat(System.ReadOnlySpan<byte> header, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format) { }
    }
    public class TiffMetadata : SixLabors.ImageSharp.IDeepCloneable
    {
        public TiffMetadata() { }
        public SixLabors.ImageSharp.ByteOrder ByteOrder { get; set; }
        public SixLabors.ImageSharp.Formats.Tiff.TiffFormatType FormatType { get; set; }
        public SixLabors.ImageSharp.IDeepCloneable DeepClone() { }
    }
}
namespace SixLabors.ImageSharp.Formats.Webp
{
    public enum WebpBitsPerPixel : short
    {
        Pixel24 = 24,
        Pixel32 = 32,
    }
    public sealed class WebpConfigurationModule : SixLabors.ImageSharp.Formats.IImageFormatConfigurationModule
    {
        public WebpConfigurationModule() { }
        public void Configure(SixLabors.ImageSharp.Configuration configuration) { }
    }
    public sealed class WebpDecoder : SixLabors.ImageSharp.Formats.ImageDecoder
    {
        public static SixLabors.ImageSharp.Formats.Webp.WebpDecoder Instance { get; }
        protected override SixLabors.ImageSharp.Image Decode(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
        protected override SixLabors.ImageSharp.Image<TPixel> Decode<TPixel>(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        protected override SixLabors.ImageSharp.IImageInfo Identify(SixLabors.ImageSharp.Formats.DecoderOptions options, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken) { }
    }
    public sealed class WebpEncoder : SixLabors.ImageSharp.Formats.ImageEncoder
    {
        public WebpEncoder() { }
        public int EntropyPasses { get; set; }
        public SixLabors.ImageSharp.Formats.Webp.WebpFileFormatType? FileFormat { get; set; }
        public int FilterStrength { get; set; }
        public SixLabors.ImageSharp.Formats.Webp.WebpEncodingMethod Method { get; set; }
        public bool NearLossless { get; set; }
        public int NearLosslessQuality { get; set; }
        public int Quality { get; set; }
        public int SpatialNoiseShaping { get; set; }
        public SixLabors.ImageSharp.Formats.Webp.WebpTransparentColorMode TransparentColorMode { get; set; }
        public bool UseAlphaCompression { get; set; }
        protected override void Encode<TPixel>(SixLabors.ImageSharp.Image<TPixel> image, System.IO.Stream stream, System.Threading.CancellationToken cancellationToken)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public enum WebpEncodingMethod
    {
        Level0 = 0,
        Fastest = 0,
        Level1 = 1,
        Level2 = 2,
        Level3 = 3,
        Level4 = 4,
        Default = 4,
        Level5 = 5,
        Level6 = 6,
        BestQuality = 6,
    }
    public enum WebpFileFormatType
    {
        Lossless = 0,
        Lossy = 1,
    }
    public sealed class WebpFormat : SixLabors.ImageSharp.Formats.IImageFormat, SixLabors.ImageSharp.Formats.IImageFormat<SixLabors.ImageSharp.Formats.Webp.WebpMetadata>, SixLabors.ImageSharp.Formats.IImageFormat<SixLabors.ImageSharp.Formats.Webp.WebpMetadata, SixLabors.ImageSharp.Formats.Webp.WebpFrameMetadata>
    {
        public string DefaultMimeType { get; }
        public System.Collections.Generic.IEnumerable<string> FileExtensions { get; }
        public System.Collections.Generic.IEnumerable<string> MimeTypes { get; }
        public string Name { get; }
        public static SixLabors.ImageSharp.Formats.Webp.WebpFormat Instance { get; }
        public SixLabors.ImageSharp.Formats.Webp.WebpFrameMetadata CreateDefaultFormatFrameMetadata() { }
        public SixLabors.ImageSharp.Formats.Webp.WebpMetadata CreateDefaultFormatMetadata() { }
    }
    public class WebpFrameMetadata : SixLabors.ImageSharp.IDeepCloneable
    {
        public WebpFrameMetadata() { }
        public uint FrameDuration { get; set; }
        public SixLabors.ImageSharp.IDeepCloneable DeepClone() { }
    }
    public sealed class WebpImageFormatDetector : SixLabors.ImageSharp.Formats.IImageFormatDetector
    {
        public WebpImageFormatDetector() { }
        public int HeaderSize { get; }
        public bool TryDetectFormat(System.ReadOnlySpan<byte> header, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out SixLabors.ImageSharp.Formats.IImageFormat? format) { }
    }
    public class WebpMetadata : SixLabors.ImageSharp.IDeepCloneable
    {
        public WebpMetadata() { }
        public ushort AnimationLoopCount { get; set; }
        public SixLabors.ImageSharp.Formats.Webp.WebpFileFormatType? FileFormat { get; set; }
        public SixLabors.ImageSharp.IDeepCloneable DeepClone() { }
    }
    public enum WebpTransparentColorMode
    {
        Clear = 0,
        Preserve = 1,
    }
}
namespace SixLabors.ImageSharp.Memory
{
    [System.Flags]
    public enum AllocationOptions
    {
        None = 0,
        Clean = 1,
    }
    public static class Buffer2DExtensions
    {
        public static SixLabors.ImageSharp.Memory.IMemoryGroup<T> GetMemoryGroup<T>(this SixLabors.ImageSharp.Memory.Buffer2D<T> buffer)
            where T :  struct { }
    }
    public readonly struct Buffer2DRegion<T>
        where T :  unmanaged
    {
        public Buffer2DRegion(SixLabors.ImageSharp.Memory.Buffer2D<T> buffer) { }
        public Buffer2DRegion(SixLabors.ImageSharp.Memory.Buffer2D<T> buffer, SixLabors.ImageSharp.Rectangle rectangle) { }
        public SixLabors.ImageSharp.Memory.Buffer2D<T> Buffer { get; }
        public int Height { get; }
        public SixLabors.ImageSharp.Rectangle Rectangle { get; }
        public int Stride { get; }
        public int Width { get; }
        public System.Span<T> DangerousGetRowSpan(int y) { }
        public SixLabors.ImageSharp.Memory.Buffer2DRegion<T> GetSubRegion(SixLabors.ImageSharp.Rectangle rectangle) { }
        public SixLabors.ImageSharp.Memory.Buffer2DRegion<T> GetSubRegion(int x, int y, int width, int height) { }
    }
    public sealed class Buffer2D<T> : System.IDisposable
        where T :  struct
    {
        public int Height { get; }
        public T& this[int x, int y] { get; }
        public SixLabors.ImageSharp.Memory.IMemoryGroup<T> MemoryGroup { get; }
        public int Width { get; }
        public System.Span<T> DangerousGetRowSpan(int y) { }
        public void Dispose() { }
    }
    public interface IMemoryGroup<T> : System.Collections.Generic.IEnumerable<System.Memory<T>>, System.Collections.Generic.IReadOnlyCollection<System.Memory<T>>, System.Collections.Generic.IReadOnlyList<System.Memory<T>>, System.Collections.IEnumerable
        where T :  struct
    {
        int BufferLength { get; }
        bool IsValid { get; }
        long TotalLength { get; }
        SixLabors.ImageSharp.Memory.MemoryGroupEnumerator<T> GetEnumerator();
    }
    public class InvalidMemoryOperationException : System.InvalidOperationException
    {
        public InvalidMemoryOperationException() { }
        public InvalidMemoryOperationException(string message) { }
    }
    public abstract class MemoryAllocator
    {
        protected MemoryAllocator() { }
        public static SixLabors.ImageSharp.Memory.MemoryAllocator Default { get; }
        public abstract System.Buffers.IMemoryOwner<T> Allocate<T>(int length, SixLabors.ImageSharp.Memory.AllocationOptions options = 0)
            where T :  struct;
        protected abstract int GetBufferCapacityInBytes();
        public virtual void ReleaseRetainedResources() { }
        public static SixLabors.ImageSharp.Memory.MemoryAllocator Create() { }
        public static SixLabors.ImageSharp.Memory.MemoryAllocator Create(SixLabors.ImageSharp.Memory.MemoryAllocatorOptions options) { }
    }
    public static class MemoryAllocatorExtensions
    {
        public static SixLabors.ImageSharp.Memory.Buffer2D<T> Allocate2D<T>(this SixLabors.ImageSharp.Memory.MemoryAllocator memoryAllocator, SixLabors.ImageSharp.Size size, SixLabors.ImageSharp.Memory.AllocationOptions options = 0)
            where T :  struct { }
        public static SixLabors.ImageSharp.Memory.Buffer2D<T> Allocate2D<T>(this SixLabors.ImageSharp.Memory.MemoryAllocator memoryAllocator, SixLabors.ImageSharp.Size size, bool preferContiguosImageBuffers, SixLabors.ImageSharp.Memory.AllocationOptions options = 0)
            where T :  struct { }
        public static SixLabors.ImageSharp.Memory.Buffer2D<T> Allocate2D<T>(this SixLabors.ImageSharp.Memory.MemoryAllocator memoryAllocator, int width, int height, SixLabors.ImageSharp.Memory.AllocationOptions options = 0)
            where T :  struct { }
        public static SixLabors.ImageSharp.Memory.Buffer2D<T> Allocate2D<T>(this SixLabors.ImageSharp.Memory.MemoryAllocator memoryAllocator, int width, int height, bool preferContiguosImageBuffers, SixLabors.ImageSharp.Memory.AllocationOptions options = 0)
            where T :  struct { }
    }
    public struct MemoryAllocatorOptions
    {
        public int? MaximumPoolSizeMegabytes { get; set; }
    }
    [System.Obsolete("Types with embedded references are not supported in this version of your compiler" +
        ".", true)]
    [System.Runtime.CompilerServices.IsByRefLike]
    public struct MemoryGroupEnumerator<T>
        where T :  struct
    {
        public System.Memory<T> Current { get; }
        public bool MoveNext() { }
    }
    public readonly struct RowInterval : System.IEquatable<SixLabors.ImageSharp.Memory.RowInterval>
    {
        public RowInterval(int min, int max) { }
        public int Height { get; }
        public int Max { get; }
        public int Min { get; }
        public bool Equals(SixLabors.ImageSharp.Memory.RowInterval other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.Memory.RowInterval left, SixLabors.ImageSharp.Memory.RowInterval right) { }
        public static bool operator ==(SixLabors.ImageSharp.Memory.RowInterval left, SixLabors.ImageSharp.Memory.RowInterval right) { }
    }
    public sealed class SimpleGcMemoryAllocator : SixLabors.ImageSharp.Memory.MemoryAllocator
    {
        public SimpleGcMemoryAllocator() { }
        public override System.Buffers.IMemoryOwner<T> Allocate<T>(int length, SixLabors.ImageSharp.Memory.AllocationOptions options = 0)
            where T :  struct { }
        protected override int GetBufferCapacityInBytes() { }
    }
}
namespace SixLabors.ImageSharp.Metadata
{
    public enum FrameDecodingMode
    {
        All = 0,
        First = 1,
    }
    public sealed class ImageFrameMetadata : SixLabors.ImageSharp.IDeepCloneable<SixLabors.ImageSharp.Metadata.ImageFrameMetadata>
    {
        public SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifProfile ExifProfile { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfile IccProfile { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcProfile IptcProfile { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Xmp.XmpProfile XmpProfile { get; set; }
        public SixLabors.ImageSharp.Metadata.ImageFrameMetadata DeepClone() { }
        public TFormatFrameMetadata GetFormatMetadata<TFormatMetadata, TFormatFrameMetadata>(SixLabors.ImageSharp.Formats.IImageFormat<TFormatMetadata, TFormatFrameMetadata> key)
            where TFormatMetadata :  class
            where TFormatFrameMetadata :  class, SixLabors.ImageSharp.IDeepCloneable { }
        public bool TryGetFormatMetadata<TFormatMetadata, TFormatFrameMetadata>(SixLabors.ImageSharp.Formats.IImageFormat<TFormatMetadata, TFormatFrameMetadata> key, out TFormatFrameMetadata metadata)
            where TFormatMetadata :  class
            where TFormatFrameMetadata :  class, SixLabors.ImageSharp.IDeepCloneable { }
    }
    public sealed class ImageMetadata : SixLabors.ImageSharp.IDeepCloneable<SixLabors.ImageSharp.Metadata.ImageMetadata>
    {
        public const double DefaultHorizontalResolution = 96D;
        public const SixLabors.ImageSharp.Metadata.PixelResolutionUnit DefaultPixelResolutionUnits = 1;
        public const double DefaultVerticalResolution = 96D;
        public ImageMetadata() { }
        public SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifProfile ExifProfile { get; set; }
        public double HorizontalResolution { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfile IccProfile { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcProfile IptcProfile { get; set; }
        public SixLabors.ImageSharp.Metadata.PixelResolutionUnit ResolutionUnits { get; set; }
        public double VerticalResolution { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Xmp.XmpProfile XmpProfile { get; set; }
        public SixLabors.ImageSharp.Metadata.ImageMetadata DeepClone() { }
        public TFormatMetadata GetFormatMetadata<TFormatMetadata>(SixLabors.ImageSharp.Formats.IImageFormat<TFormatMetadata> key)
            where TFormatMetadata :  class, SixLabors.ImageSharp.IDeepCloneable { }
    }
    public enum PixelResolutionUnit : byte
    {
        AspectRatio = 0,
        PixelsPerInch = 1,
        PixelsPerCentimeter = 2,
        PixelsPerMeter = 3,
    }
}
namespace SixLabors.ImageSharp.Metadata.Profiles.Exif
{
    public readonly struct EncodedString : System.IEquatable<SixLabors.ImageSharp.Metadata.Profiles.Exif.EncodedString>
    {
        public EncodedString(string text) { }
        public EncodedString(SixLabors.ImageSharp.Metadata.Profiles.Exif.EncodedString.CharacterCode code, string text) { }
        public SixLabors.ImageSharp.Metadata.Profiles.Exif.EncodedString.CharacterCode Code { get; }
        public string Text { get; }
        public bool Equals(SixLabors.ImageSharp.Metadata.Profiles.Exif.EncodedString other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static string op_Explicit(SixLabors.ImageSharp.Metadata.Profiles.Exif.EncodedString encodedString) { }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.EncodedString op_Implicit(string text) { }
        public static bool operator !=(SixLabors.ImageSharp.Metadata.Profiles.Exif.EncodedString left, SixLabors.ImageSharp.Metadata.Profiles.Exif.EncodedString right) { }
        public static bool operator ==(SixLabors.ImageSharp.Metadata.Profiles.Exif.EncodedString left, SixLabors.ImageSharp.Metadata.Profiles.Exif.EncodedString right) { }
        public enum CharacterCode
        {
            ASCII = 0,
            JIS = 1,
            Unicode = 2,
            Undefined = 3,
        }
    }
    public enum ExifDataType
    {
        Unknown = 0,
        Byte = 1,
        Ascii = 2,
        Short = 3,
        Long = 4,
        Rational = 5,
        SignedByte = 6,
        Undefined = 7,
        SignedShort = 8,
        SignedLong = 9,
        SignedRational = 10,
        SingleFloat = 11,
        DoubleFloat = 12,
        Ifd = 13,
        Long8 = 16,
        SignedLong8 = 17,
        Ifd8 = 18,
    }
    public static class ExifOrientationMode
    {
        public const ushort BottomLeft = 4;
        public const ushort BottomRight = 3;
        public const ushort LeftBottom = 8;
        public const ushort LeftTop = 5;
        public const ushort RightBottom = 7;
        public const ushort RightTop = 6;
        public const ushort TopLeft = 1;
        public const ushort TopRight = 2;
        public const ushort Unknown = 0;
    }
    [System.Flags]
    public enum ExifParts
    {
        None = 0,
        IfdTags = 1,
        ExifTags = 2,
        GpsTags = 4,
        All = 7,
    }
    public sealed class ExifProfile : SixLabors.ImageSharp.IDeepCloneable<SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifProfile>
    {
        public ExifProfile() { }
        public ExifProfile(byte[] data) { }
        public System.Collections.Generic.IReadOnlyList<SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag> InvalidTags { get; }
        public SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifParts Parts { get; set; }
        public System.Collections.Generic.IReadOnlyList<SixLabors.ImageSharp.Metadata.Profiles.Exif.IExifValue> Values { get; }
        public SixLabors.ImageSharp.Image CreateThumbnail() { }
        public SixLabors.ImageSharp.Image<TPixel> CreateThumbnail<TPixel>()
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifProfile DeepClone() { }
        public SixLabors.ImageSharp.Metadata.Profiles.Exif.IExifValue<TValueType> GetValue<TValueType>(SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<TValueType> tag) { }
        public bool RemoveValue(SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag tag) { }
        public void SetValue<TValueType>(SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<TValueType> tag, TValueType value) { }
        public byte[] ToByteArray() { }
    }
    public abstract class ExifTag : System.IEquatable<SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag>
    {
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> Acceleration { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.SignedRational> AmbientTemperature { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> ApertureValue { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> Artist { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Number> BadFaxLines { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> BatteryLevel { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> BitsPerSample { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.SignedRational> BrightnessValue { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> CFAPattern { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> CFAPattern2 { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> CFARepeatPatternDim { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.SignedRational> CameraElevationAngle { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> CellLength { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> CellWidth { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> CleanFaxData { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> ClipPath { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> CodingMethods { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> ColorMap { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint[]> ColorResponseUnit { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> ColorSpace { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> ComponentsConfiguration { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> CompressedBitsPerPixel { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> Compression { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Number> ConsecutiveBadFaxLines { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> Contrast { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> Copyright { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> CustomRendered { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> DateTime { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> DateTimeDigitized { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> DateTimeOriginal { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.SignedRational[]> Decode { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> DefaultImageColor { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> DeviceSettingDescription { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> DigitalZoomRatio { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> DocumentName { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> DotRange { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> ExifVersion { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.SignedRational> ExposureBiasValue { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> ExposureIndex { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> ExposureIndex2 { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> ExposureMode { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> ExposureProgram { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> ExposureTime { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> ExtraSamples { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> FNumber { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte> FaxProfile { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> FaxRecvParams { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> FaxRecvTime { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> FaxSubaddress { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte> FileSource { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> FillOrder { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> Flash { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> FlashEnergy { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> FlashEnergy2 { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> FlashpixVersion { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> FocalLength { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> FocalLengthIn35mmFilm { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> FocalPlaneResolutionUnit { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> FocalPlaneResolutionUnit2 { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> FocalPlaneXResolution { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> FocalPlaneXResolution2 { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> FocalPlaneYResolution { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> FocalPlaneYResolution2 { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint[]> FreeByteCounts { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint[]> FreeOffsets { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GDALMetadata { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GDALNoData { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> GPSAltitude { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte> GPSAltitudeRef { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Metadata.Profiles.Exif.EncodedString> GPSAreaInformation { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> GPSDOP { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GPSDateStamp { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> GPSDestBearing { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GPSDestBearingRef { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> GPSDestDistance { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GPSDestDistanceRef { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational[]> GPSDestLatitude { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GPSDestLatitudeRef { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational[]> GPSDestLongitude { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GPSDestLongitudeRef { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> GPSDifferential { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> GPSIFDOffset { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> GPSImgDirection { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GPSImgDirectionRef { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational[]> GPSLatitude { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GPSLatitudeRef { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational[]> GPSLongitude { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GPSLongitudeRef { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GPSMapDatum { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GPSMeasureMode { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Metadata.Profiles.Exif.EncodedString> GPSProcessingMethod { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GPSSatellites { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> GPSSpeed { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GPSSpeedRef { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GPSStatus { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational[]> GPSTimestamp { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> GPSTrack { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> GPSTrackRef { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> GPSVersionID { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> GainControl { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> GrayResponseCurve { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> GrayResponseUnit { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> HalftoneHints { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> HostComputer { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> Humidity { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> IPTC { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> ISOSpeed { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> ISOSpeedLatitudeyyy { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> ISOSpeedLatitudezzz { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> ISOSpeedRatings { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> IccProfile { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> ImageDescription { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> ImageHistory { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> ImageID { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Number[]> ImageLayer { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Number> ImageLength { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> ImageNumber { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> ImageSourceData { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> ImageUniqueID { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Number> ImageWidth { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> Indexed { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> InkNames { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> InkSet { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<double[]> IntergraphMatrix { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> IntergraphPacketData { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint[]> IntergraphRegisters { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> Interlace { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint[]> JPEGACTables { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint[]> JPEGDCTables { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> JPEGInterchangeFormat { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> JPEGInterchangeFormatLength { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> JPEGLosslessPredictors { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> JPEGPointTransforms { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> JPEGProc { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint[]> JPEGQTables { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> JPEGRestartInterval { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> JPEGTables { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> LensMake { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> LensModel { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> LensSerialNumber { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational[]> LensSpecification { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> LightSource { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> MDFileTag { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> MDFileUnits { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> MDLabName { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> MDPrepDate { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> MDPrepTime { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> MDSampleInfo { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> MDScalePixel { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> Make { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> MakerNote { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> MaxApertureValue { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> MaxSampleValue { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> MeteringMode { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> MinSampleValue { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte> ModeNumber { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> Model { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<double[]> ModelTiePoint { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<double[]> ModelTransform { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> Noise { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> NumberOfInks { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> OECF { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> OPIProxy { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> OffsetTime { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> OffsetTimeDigitized { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> OffsetTimeOriginal { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> OldSubfileType { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> Orientation { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> OwnerName { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> PageName { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> PageNumber { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> PhotometricInterpretation { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<double[]> PixelScale { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Number> PixelXDimension { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Number> PixelYDimension { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> PlanarConfiguration { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> Predictor { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> Pressure { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational[]> PrimaryChromaticities { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> ProfileType { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> Rating { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> RatingPercent { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> RecommendedExposureIndex { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational[]> ReferenceBlackWhite { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> RelatedSoundFile { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> ResolutionUnit { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Number> RowsPerStrip { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> SEMInfo { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint[]> SMaxSampleValue { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint[]> SMinSampleValue { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> SampleFormat { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> SamplesPerPixel { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> Saturation { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> SceneCaptureType { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte> SceneType { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> SecurityClassification { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> SelfTimerMode { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> SensingMethod { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> SensingMethod2 { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> SensitivityType { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> SerialNumber { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> Sharpness { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.SignedRational> ShutterSpeedValue { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> Software { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> SpatialFrequencyResponse { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> SpatialFrequencyResponse2 { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> SpectralSensitivity { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> StandardOutputSensitivity { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Number[]> StripByteCounts { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Number[]> StripOffsets { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint[]> StripRowCounts { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> SubIFDOffset { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint[]> SubIFDs { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> SubfileType { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> SubjectArea { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> SubjectDistance { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> SubjectDistanceRange { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> SubjectLocation { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> SubsecTime { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> SubsecTimeDigitized { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> SubsecTimeOriginal { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> T4Options { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> T6Options { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> T82ptions { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> TIFFEPStandardID { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> TargetPrinter { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> Thresholding { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Number[]> TileByteCounts { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Number> TileLength { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Number[]> TileOffsets { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Number> TileWidth { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint[]> TimeZoneOffset { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> TransferFunction { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> TransferRange { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Metadata.Profiles.Exif.EncodedString> UserComment { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> VersionYear { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.SignedRational> WaterDepth { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> WhiteBalance { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational[]> WhitePoint { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> XClipPathUnits { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<byte[]> XMP { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> XPAuthor { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> XPComment { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> XPKeywords { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> XPSubject { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<string> XPTitle { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> XPosition { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> XResolution { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational[]> YCbCrCoefficients { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort> YCbCrPositioning { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<ushort[]> YCbCrSubsampling { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<uint> YClipPathUnits { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> YPosition { get; }
        public static SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag<SixLabors.ImageSharp.Rational> YResolution { get; }
        public bool Equals(SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static ushort op_Explicit(SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag tag) { }
        public static bool operator !=(SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag left, SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag right) { }
        public static bool operator ==(SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag left, SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag right) { }
    }
    public sealed class ExifTag<TValueType> : SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag { }
    public interface IExifValue : SixLabors.ImageSharp.IDeepCloneable<SixLabors.ImageSharp.Metadata.Profiles.Exif.IExifValue>
    {
        SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifDataType DataType { get; }
        bool IsArray { get; }
        SixLabors.ImageSharp.Metadata.Profiles.Exif.ExifTag Tag { get; }
        object GetValue();
        bool TrySetValue(object value);
    }
    public interface IExifValue<TValueType> : SixLabors.ImageSharp.IDeepCloneable<SixLabors.ImageSharp.Metadata.Profiles.Exif.IExifValue>, SixLabors.ImageSharp.Metadata.Profiles.Exif.IExifValue
    {
        TValueType Value { get; set; }
    }
}
namespace SixLabors.ImageSharp.Metadata.Profiles.Icc
{
    public enum IccColorSpaceType : uint
    {
        CieXyz = 1482250784u,
        CieLab = 1281450528u,
        CieLuv = 1282766368u,
        YCbCr = 1497588338u,
        CieYxy = 1501067552u,
        Rgb = 1380401696u,
        Gray = 1196573017u,
        Hsv = 1213421088u,
        Hls = 1212961568u,
        Cmyk = 1129142603u,
        Cmy = 1129142560u,
        Color2 = 843271250u,
        Color3 = 860048466u,
        Color4 = 876825682u,
        Color5 = 893602898u,
        Color6 = 910380114u,
        Color7 = 927157330u,
        Color8 = 943934546u,
        Color9 = 960711762u,
        Color10 = 1094929490u,
        Color11 = 1111706706u,
        Color12 = 1128483922u,
        Color13 = 1145261138u,
        Color14 = 1162038354u,
        Color15 = 1178815570u,
    }
    [System.Flags]
    public enum IccDeviceAttribute : long
    {
        OpacityTransparent = 1,
        OpacityReflective = 0,
        ReflectivityMatte = 2,
        ReflectivityGlossy = 0,
        PolarityNegative = 4,
        PolarityPositive = 0,
        ChromaBlackWhite = 8,
        ChromaColor = 0,
    }
    public enum IccPrimaryPlatformType : uint
    {
        NotIdentified = 0u,
        AppleComputerInc = 1095782476u,
        MicrosoftCorporation = 1297303124u,
        SiliconGraphicsInc = 1397180704u,
        SunMicrosystemsInc = 1398099543u,
    }
    public sealed class IccProfile : SixLabors.ImageSharp.IDeepCloneable<SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfile>
    {
        public IccProfile() { }
        public IccProfile(byte[] data) { }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccTagDataEntry[] Entries { get; }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfileHeader Header { get; set; }
        public bool CheckIsValid() { }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfile DeepClone() { }
        public byte[] ToByteArray() { }
        public static SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfileId CalculateHash(byte[] data) { }
    }
    public enum IccProfileClass : uint
    {
        InputDevice = 1935896178u,
        DisplayDevice = 1835955314u,
        OutputDevice = 1886549106u,
        DeviceLink = 1818848875u,
        ColorSpace = 1936744803u,
        Abstract = 1633842036u,
        NamedColor = 1852662636u,
    }
    [System.Flags]
    public enum IccProfileFlag
    {
        None = 0,
        Embedded = 1,
        NotEmbedded = 0,
        NotIndependent = 2,
        Independent = 0,
    }
    public sealed class IccProfileHeader
    {
        public IccProfileHeader() { }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfileClass Class { get; set; }
        public string CmmType { get; set; }
        public System.DateTime CreationDate { get; set; }
        public string CreatorSignature { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccColorSpaceType DataColorSpace { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccDeviceAttribute DeviceAttributes { get; set; }
        public uint DeviceManufacturer { get; set; }
        public uint DeviceModel { get; set; }
        public string FileSignature { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfileFlag Flags { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfileId Id { get; set; }
        public System.Numerics.Vector3 PcsIlluminant { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccPrimaryPlatformType PrimaryPlatformSignature { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccColorSpaceType ProfileConnectionSpace { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccRenderingIntent RenderingIntent { get; set; }
        public uint Size { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccVersion Version { get; set; }
    }
    public readonly struct IccProfileId : System.IEquatable<SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfileId>
    {
        public static readonly SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfileId Zero;
        public IccProfileId(uint p1, uint p2, uint p3, uint p4) { }
        public bool IsSet { get; }
        public uint Part1 { get; }
        public uint Part2 { get; }
        public uint Part3 { get; }
        public uint Part4 { get; }
        public bool Equals(SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfileId other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfileId left, SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfileId right) { }
        public static bool operator ==(SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfileId left, SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfileId right) { }
    }
    public enum IccProfileTag : uint
    {
        Unknown = 0u,
        AToB0 = 1093812784u,
        AToB1 = 1093812785u,
        AToB2 = 1093812786u,
        BlueMatrixColumn = 1649957210u,
        BlueTrc = 1649693251u,
        BToA0 = 1110589744u,
        BToA1 = 1110589745u,
        BToA2 = 1110589746u,
        BToD0 = 1110590512u,
        BToD1 = 1110590513u,
        BToD2 = 1110590514u,
        BToD3 = 1110590515u,
        CalibrationDateTime = 1667329140u,
        CharTarget = 1952543335u,
        ChromaticAdaptation = 1667785060u,
        Chromaticity = 1667789421u,
        ColorantOrder = 1668051567u,
        ColorantTable = 1668051572u,
        ColorantTableOut = 1668050804u,
        ColorimetricIntentImageStat = 1667852659u,
        Copyright = 1668313716u,
        CrdInfo = 1668441193u,
        Data = 1684108385u,
        DateTime = 1685350765u,
        DeviceManufacturerDescription = 1684893284u,
        DeviceModelDescription = 1684890724u,
        DeviceSettings = 1684371059u,
        DToB0 = 1144144432u,
        DToB1 = 1144144432u,
        DToB2 = 1144144432u,
        DToB3 = 1144144432u,
        Gamut = 1734438260u,
        GrayTrc = 1800688195u,
        GreenMatrixColumn = 1733843290u,
        GreenTrc = 1733579331u,
        Luminance = 1819635049u,
        Measurement = 1835360627u,
        MediaBlackPoint = 1651208308u,
        MediaWhitePoint = 2004119668u,
        NamedColor = 1852010348u,
        NamedColor2 = 1852009522u,
        OutputResponse = 1919251312u,
        PerceptualRenderingIntentGamut = 1919510320u,
        Preview0 = 1886545200u,
        Preview1 = 1886545201u,
        Preview2 = 1886545202u,
        ProfileDescription = 1684370275u,
        ProfileSequenceDescription = 1886610801u,
        PostScript2Crd0 = 1886610480u,
        PostScript2Crd1 = 1886610481u,
        PostScript2Crd2 = 1886610482u,
        PostScript2Crd3 = 1886610483u,
        PostScript2Csa = 1886597747u,
        PostScript2RenderingIntent = 1886597737u,
        RedMatrixColumn = 1918392666u,
        RedTrc = 1918128707u,
        SaturationRenderingIntentGamut = 1919510322u,
        ScreeningDescription = 1935897188u,
        Screening = 1935897198u,
        Technology = 1952801640u,
        UcrBgSpecification = 1650877472u,
        ViewingCondDescription = 1987405156u,
        ViewingConditions = 1986618743u,
    }
    public enum IccRenderingIntent : uint
    {
        Perceptual = 0u,
        MediaRelativeColorimetric = 1u,
        Saturation = 2u,
        AbsoluteColorimetric = 3u,
    }
    public abstract class IccTagDataEntry : System.IEquatable<SixLabors.ImageSharp.Metadata.Profiles.Icc.IccTagDataEntry>
    {
        protected IccTagDataEntry(SixLabors.ImageSharp.Metadata.Profiles.Icc.IccTypeSignature signature) { }
        protected IccTagDataEntry(SixLabors.ImageSharp.Metadata.Profiles.Icc.IccTypeSignature signature, SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfileTag tagSignature) { }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccTypeSignature Signature { get; }
        public SixLabors.ImageSharp.Metadata.Profiles.Icc.IccProfileTag TagSignature { get; set; }
        public virtual bool Equals(SixLabors.ImageSharp.Metadata.Profiles.Icc.IccTagDataEntry other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public enum IccTypeSignature : uint
    {
        Unknown = 0u,
        Chromaticity = 1667789421u,
        ColorantOrder = 1668051567u,
        ColorantTable = 1668051572u,
        Curve = 1668641398u,
        Data = 1684108385u,
        DateTime = 1685350765u,
        Lut16 = 1835430962u,
        Lut8 = 1835430961u,
        LutAToB = 1832993312u,
        LutBToA = 1833058592u,
        Measurement = 1835360627u,
        MultiLocalizedUnicode = 1835824483u,
        MultiProcessElements = 1836082548u,
        NamedColor2 = 1852009522u,
        ParametricCurve = 1885434465u,
        ProfileSequenceDesc = 1886610801u,
        ProfileSequenceIdentifier = 1886611812u,
        ResponseCurveSet16 = 1919120178u,
        S15Fixed16Array = 1936077618u,
        Signature = 1936287520u,
        Text = 1952807028u,
        U16Fixed16Array = 1969632050u,
        UInt16Array = 1969828150u,
        UInt32Array = 1969828658u,
        UInt64Array = 1969829428u,
        UInt8Array = 1969827896u,
        ViewingConditions = 1986618743u,
        Xyz = 1482250784u,
        TextDescription = 1684370275u,
        CrdInfo = 1668441193u,
        Screening = 1935897198u,
        UcrBg = 1650877472u,
        DeviceSettings = 1684371059u,
        NamedColor = 1852010348u,
    }
    public readonly struct IccVersion : System.IEquatable<SixLabors.ImageSharp.Metadata.Profiles.Icc.IccVersion>
    {
        public IccVersion(int major, int minor, int patch) { }
        public int Major { get; }
        public int Minor { get; }
        public int Patch { get; }
        public bool Equals(SixLabors.ImageSharp.Metadata.Profiles.Icc.IccVersion other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(SixLabors.ImageSharp.Metadata.Profiles.Icc.IccVersion left, SixLabors.ImageSharp.Metadata.Profiles.Icc.IccVersion right) { }
        public static bool operator ==(SixLabors.ImageSharp.Metadata.Profiles.Icc.IccVersion left, SixLabors.ImageSharp.Metadata.Profiles.Icc.IccVersion right) { }
    }
    public class InvalidIccProfileException : System.Exception
    {
        public InvalidIccProfileException(string message) { }
        public InvalidIccProfileException(string message, System.Exception inner) { }
    }
}
namespace SixLabors.ImageSharp.Metadata.Profiles.Iptc
{
    public sealed class IptcProfile : SixLabors.ImageSharp.IDeepCloneable<SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcProfile>
    {
        public IptcProfile() { }
        public IptcProfile(byte[] data) { }
        public byte[] Data { get; }
        public System.Collections.Generic.IEnumerable<SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcValue> Values { get; }
        public SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcProfile DeepClone() { }
        public System.Collections.Generic.List<SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcValue> GetValues(SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcTag tag) { }
        public bool RemoveValue(SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcTag tag) { }
        public bool RemoveValue(SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcTag tag, string value) { }
        public void SetDateTimeValue(SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcTag tag, System.DateTimeOffset dateTimeOffset) { }
        public void SetEncoding(System.Text.Encoding encoding) { }
        public void SetValue(SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcTag tag, string value, bool strict = true) { }
        public void SetValue(SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcTag tag, System.Text.Encoding encoding, string value, bool strict = true) { }
        public void UpdateData() { }
    }
    public enum IptcTag
    {
        Unknown = -1,
        RecordVersion = 0,
        ObjectType = 3,
        ObjectAttribute = 4,
        Name = 5,
        EditStatus = 7,
        EditorialUpdate = 8,
        Urgency = 10,
        SubjectReference = 12,
        Category = 15,
        SupplementalCategories = 20,
        FixtureIdentifier = 22,
        Keywords = 25,
        LocationCode = 26,
        LocationName = 27,
        ReleaseDate = 30,
        ReleaseTime = 35,
        ExpirationDate = 37,
        ExpirationTime = 38,
        SpecialInstructions = 40,
        ActionAdvised = 42,
        ReferenceService = 45,
        ReferenceDate = 47,
        ReferenceNumber = 50,
        CreatedDate = 55,
        CreatedTime = 60,
        DigitalCreationDate = 62,
        DigitalCreationTime = 63,
        OriginatingProgram = 65,
        ProgramVersion = 70,
        ObjectCycle = 75,
        Byline = 80,
        BylineTitle = 85,
        City = 90,
        SubLocation = 92,
        ProvinceState = 95,
        CountryCode = 100,
        Country = 101,
        OriginalTransmissionReference = 103,
        Headline = 105,
        Credit = 110,
        Source = 115,
        CopyrightNotice = 116,
        Contact = 118,
        Caption = 120,
        LocalCaption = 121,
        CaptionWriter = 122,
        ImageType = 130,
        ImageOrientation = 131,
        CustomField1 = 200,
        CustomField2 = 201,
        CustomField3 = 202,
        CustomField4 = 203,
        CustomField5 = 204,
        CustomField6 = 205,
        CustomField7 = 206,
        CustomField8 = 207,
        CustomField9 = 208,
        CustomField10 = 209,
        CustomField11 = 210,
        CustomField12 = 211,
        CustomField13 = 212,
        CustomField14 = 213,
        CustomField15 = 214,
        CustomField16 = 215,
        CustomField17 = 216,
        CustomField18 = 217,
        CustomField19 = 218,
        CustomField20 = 219,
    }
    public static class IptcTagExtensions
    {
        public static bool IsDate(this SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcTag tag) { }
        public static bool IsRepeatable(this SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcTag tag) { }
        public static bool IsTime(this SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcTag tag) { }
        public static int MaxLength(this SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcTag tag) { }
    }
    public sealed class IptcValue : SixLabors.ImageSharp.IDeepCloneable<SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcValue>
    {
        public System.Text.Encoding Encoding { get; set; }
        public int Length { get; }
        public bool Strict { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcTag Tag { get; }
        public string Value { get; set; }
        public SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcValue DeepClone() { }
        public bool Equals(SixLabors.ImageSharp.Metadata.Profiles.Iptc.IptcValue other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public byte[] ToByteArray() { }
        public override string ToString() { }
        public string ToString(System.Text.Encoding encoding) { }
    }
}
namespace SixLabors.ImageSharp.Metadata.Profiles.Xmp
{
    public sealed class XmpProfile : SixLabors.ImageSharp.IDeepCloneable<SixLabors.ImageSharp.Metadata.Profiles.Xmp.XmpProfile>
    {
        public XmpProfile() { }
        public XmpProfile(byte[] data) { }
        public SixLabors.ImageSharp.Metadata.Profiles.Xmp.XmpProfile DeepClone() { }
        public System.Xml.Linq.XDocument GetDocument() { }
        public byte[] ToByteArray() { }
    }
}
namespace SixLabors.ImageSharp.PixelFormats
{
    public struct A8 : SixLabors.ImageSharp.PixelFormats.IPackedVector<byte>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.A8>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.A8>
    {
        public A8(byte alpha) { }
        public A8(float alpha) { }
        public byte PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.A8> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.A8 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.A8 left, SixLabors.ImageSharp.PixelFormats.A8 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.A8 left, SixLabors.ImageSharp.PixelFormats.A8 right) { }
    }
    public struct Abgr32 : SixLabors.ImageSharp.PixelFormats.IPackedVector<uint>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Abgr32>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Abgr32>
    {
        public byte A;
        public byte B;
        public byte G;
        public byte R;
        public Abgr32(System.Numerics.Vector3 vector) { }
        public Abgr32(System.Numerics.Vector4 vector) { }
        public Abgr32(uint packed) { }
        public Abgr32(byte r, byte g, byte b) { }
        public Abgr32(byte r, byte g, byte b, byte a) { }
        public Abgr32(float r, float g, float b, float a = 1) { }
        public uint Abgr { get; set; }
        public uint PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Abgr32> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Abgr32 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static SixLabors.ImageSharp.PixelFormats.Abgr32 op_Implicit(SixLabors.ImageSharp.Color color) { }
        public static SixLabors.ImageSharp.Color op_Implicit(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Abgr32 left, SixLabors.ImageSharp.PixelFormats.Abgr32 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Abgr32 left, SixLabors.ImageSharp.PixelFormats.Abgr32 right) { }
    }
    public struct Argb32 : SixLabors.ImageSharp.PixelFormats.IPackedVector<uint>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Argb32>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Argb32>
    {
        public byte A;
        public byte B;
        public byte G;
        public byte R;
        public Argb32(System.Numerics.Vector3 vector) { }
        public Argb32(System.Numerics.Vector4 vector) { }
        public Argb32(uint packed) { }
        public Argb32(byte r, byte g, byte b) { }
        public Argb32(byte r, byte g, byte b, byte a) { }
        public Argb32(float r, float g, float b, float a = 1) { }
        public uint Argb { get; set; }
        public uint PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Argb32> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Argb32 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static SixLabors.ImageSharp.PixelFormats.Argb32 op_Implicit(SixLabors.ImageSharp.Color color) { }
        public static SixLabors.ImageSharp.Color op_Implicit(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Argb32 left, SixLabors.ImageSharp.PixelFormats.Argb32 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Argb32 left, SixLabors.ImageSharp.PixelFormats.Argb32 right) { }
    }
    public struct Bgr24 : SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Bgr24>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Bgr24>
    {
        public byte B;
        public byte G;
        public byte R;
        public Bgr24(byte r, byte g, byte b) { }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Bgr24> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Bgr24 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static SixLabors.ImageSharp.PixelFormats.Bgr24 op_Implicit(SixLabors.ImageSharp.Color color) { }
        public static SixLabors.ImageSharp.Color op_Implicit(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Bgr24 left, SixLabors.ImageSharp.PixelFormats.Bgr24 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Bgr24 left, SixLabors.ImageSharp.PixelFormats.Bgr24 right) { }
    }
    public struct Bgr565 : SixLabors.ImageSharp.PixelFormats.IPackedVector<ushort>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Bgr565>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Bgr565>
    {
        public Bgr565(System.Numerics.Vector3 vector) { }
        public Bgr565(float x, float y, float z) { }
        public ushort PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Bgr565> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Bgr565 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector3 ToVector3() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Bgr565 left, SixLabors.ImageSharp.PixelFormats.Bgr565 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Bgr565 left, SixLabors.ImageSharp.PixelFormats.Bgr565 right) { }
    }
    public struct Bgra32 : SixLabors.ImageSharp.PixelFormats.IPackedVector<uint>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Bgra32>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Bgra32>
    {
        public byte A;
        public byte B;
        public byte G;
        public byte R;
        public Bgra32(byte r, byte g, byte b) { }
        public Bgra32(byte r, byte g, byte b, byte a) { }
        public uint Bgra { get; set; }
        public uint PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Bgra32> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Bgra32 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static SixLabors.ImageSharp.PixelFormats.Bgra32 op_Implicit(SixLabors.ImageSharp.Color color) { }
        public static SixLabors.ImageSharp.Color op_Implicit(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Bgra32 left, SixLabors.ImageSharp.PixelFormats.Bgra32 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Bgra32 left, SixLabors.ImageSharp.PixelFormats.Bgra32 right) { }
    }
    public struct Bgra4444 : SixLabors.ImageSharp.PixelFormats.IPackedVector<ushort>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Bgra4444>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Bgra4444>
    {
        public Bgra4444(System.Numerics.Vector4 vector) { }
        public Bgra4444(float x, float y, float z, float w) { }
        public ushort PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Bgra4444> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Bgra4444 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Bgra4444 left, SixLabors.ImageSharp.PixelFormats.Bgra4444 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Bgra4444 left, SixLabors.ImageSharp.PixelFormats.Bgra4444 right) { }
    }
    public struct Bgra5551 : SixLabors.ImageSharp.PixelFormats.IPackedVector<ushort>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Bgra5551>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Bgra5551>
    {
        public Bgra5551(System.Numerics.Vector4 vector) { }
        public Bgra5551(float x, float y, float z, float w) { }
        public ushort PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Bgra5551> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Bgra5551 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Bgra5551 left, SixLabors.ImageSharp.PixelFormats.Bgra5551 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Bgra5551 left, SixLabors.ImageSharp.PixelFormats.Bgra5551 right) { }
    }
    public struct Byte4 : SixLabors.ImageSharp.PixelFormats.IPackedVector<uint>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Byte4>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Byte4>
    {
        public Byte4(System.Numerics.Vector4 vector) { }
        public Byte4(float x, float y, float z, float w) { }
        public uint PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Byte4> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Byte4 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Byte4 left, SixLabors.ImageSharp.PixelFormats.Byte4 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Byte4 left, SixLabors.ImageSharp.PixelFormats.Byte4 right) { }
    }
    public struct HalfSingle : SixLabors.ImageSharp.PixelFormats.IPackedVector<ushort>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.HalfSingle>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.HalfSingle>
    {
        public HalfSingle(float value) { }
        public ushort PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.HalfSingle> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.HalfSingle other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public float ToSingle() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.HalfSingle left, SixLabors.ImageSharp.PixelFormats.HalfSingle right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.HalfSingle left, SixLabors.ImageSharp.PixelFormats.HalfSingle right) { }
    }
    public struct HalfVector2 : SixLabors.ImageSharp.PixelFormats.IPackedVector<uint>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.HalfVector2>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.HalfVector2>
    {
        public HalfVector2(System.Numerics.Vector2 vector) { }
        public HalfVector2(float x, float y) { }
        public uint PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.HalfVector2> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.HalfVector2 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector2 ToVector2() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.HalfVector2 left, SixLabors.ImageSharp.PixelFormats.HalfVector2 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.HalfVector2 left, SixLabors.ImageSharp.PixelFormats.HalfVector2 right) { }
    }
    public struct HalfVector4 : SixLabors.ImageSharp.PixelFormats.IPackedVector<ulong>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.HalfVector4>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.HalfVector4>
    {
        public HalfVector4(System.Numerics.Vector4 vector) { }
        public HalfVector4(float x, float y, float z, float w) { }
        public ulong PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.HalfVector4> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.HalfVector4 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.HalfVector4 left, SixLabors.ImageSharp.PixelFormats.HalfVector4 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.HalfVector4 left, SixLabors.ImageSharp.PixelFormats.HalfVector4 right) { }
    }
    public interface IPackedVector<TPacked> : SixLabors.ImageSharp.PixelFormats.IPixel
        where TPacked :  struct, System.IEquatable<TPacked>
    {
        TPacked PackedValue { get; set; }
    }
    public interface IPixel
    {
        void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source);
        void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source);
        void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source);
        void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source);
        void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source);
        void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source);
        void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source);
        void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source);
        void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source);
        void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source);
        void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source);
        void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source);
        void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source);
        void FromScaledVector4(System.Numerics.Vector4 vector);
        void FromVector4(System.Numerics.Vector4 vector);
        void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest);
        System.Numerics.Vector4 ToScaledVector4();
        System.Numerics.Vector4 ToVector4();
    }
    public interface IPixel<TSelf> : SixLabors.ImageSharp.PixelFormats.IPixel, System.IEquatable<TSelf>
        where TSelf :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TSelf>
    {
        SixLabors.ImageSharp.PixelFormats.PixelOperations<TSelf> CreatePixelOperations();
    }
    public struct L16 : SixLabors.ImageSharp.PixelFormats.IPackedVector<ushort>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.L16>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.L16>
    {
        public L16(ushort luminance) { }
        public ushort PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.L16> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.L16 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.L16 left, SixLabors.ImageSharp.PixelFormats.L16 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.L16 left, SixLabors.ImageSharp.PixelFormats.L16 right) { }
    }
    public struct L8 : SixLabors.ImageSharp.PixelFormats.IPackedVector<byte>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.L8>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.L8>
    {
        public L8(byte luminance) { }
        public byte PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.L8> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.L8 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.L8 left, SixLabors.ImageSharp.PixelFormats.L8 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.L8 left, SixLabors.ImageSharp.PixelFormats.L8 right) { }
    }
    public struct La16 : SixLabors.ImageSharp.PixelFormats.IPackedVector<ushort>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.La16>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.La16>
    {
        public byte A;
        public byte L;
        public La16(byte l, byte a) { }
        public ushort PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.La16> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.La16 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.La16 left, SixLabors.ImageSharp.PixelFormats.La16 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.La16 left, SixLabors.ImageSharp.PixelFormats.La16 right) { }
    }
    public struct La32 : SixLabors.ImageSharp.PixelFormats.IPackedVector<uint>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.La32>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.La32>
    {
        public ushort A;
        public ushort L;
        public La32(ushort l, ushort a) { }
        public uint PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.La32> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.La32 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.La32 left, SixLabors.ImageSharp.PixelFormats.La32 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.La32 left, SixLabors.ImageSharp.PixelFormats.La32 right) { }
    }
    public struct NormalizedByte2 : SixLabors.ImageSharp.PixelFormats.IPackedVector<ushort>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.NormalizedByte2>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.NormalizedByte2>
    {
        public NormalizedByte2(System.Numerics.Vector2 vector) { }
        public NormalizedByte2(float x, float y) { }
        public ushort PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.NormalizedByte2> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.NormalizedByte2 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector2 ToVector2() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.NormalizedByte2 left, SixLabors.ImageSharp.PixelFormats.NormalizedByte2 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.NormalizedByte2 left, SixLabors.ImageSharp.PixelFormats.NormalizedByte2 right) { }
    }
    public struct NormalizedByte4 : SixLabors.ImageSharp.PixelFormats.IPackedVector<uint>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.NormalizedByte4>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.NormalizedByte4>
    {
        public NormalizedByte4(System.Numerics.Vector4 vector) { }
        public NormalizedByte4(float x, float y, float z, float w) { }
        public uint PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.NormalizedByte4> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.NormalizedByte4 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.NormalizedByte4 left, SixLabors.ImageSharp.PixelFormats.NormalizedByte4 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.NormalizedByte4 left, SixLabors.ImageSharp.PixelFormats.NormalizedByte4 right) { }
    }
    public struct NormalizedShort2 : SixLabors.ImageSharp.PixelFormats.IPackedVector<uint>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.NormalizedShort2>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.NormalizedShort2>
    {
        public NormalizedShort2(System.Numerics.Vector2 vector) { }
        public NormalizedShort2(float x, float y) { }
        public uint PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.NormalizedShort2> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.NormalizedShort2 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector2 ToVector2() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.NormalizedShort2 left, SixLabors.ImageSharp.PixelFormats.NormalizedShort2 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.NormalizedShort2 left, SixLabors.ImageSharp.PixelFormats.NormalizedShort2 right) { }
    }
    public struct NormalizedShort4 : SixLabors.ImageSharp.PixelFormats.IPackedVector<ulong>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.NormalizedShort4>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.NormalizedShort4>
    {
        public NormalizedShort4(System.Numerics.Vector4 vector) { }
        public NormalizedShort4(float x, float y, float z, float w) { }
        public ulong PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.NormalizedShort4> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.NormalizedShort4 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.NormalizedShort4 left, SixLabors.ImageSharp.PixelFormats.NormalizedShort4 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.NormalizedShort4 left, SixLabors.ImageSharp.PixelFormats.NormalizedShort4 right) { }
    }
    public enum PixelAlphaCompositionMode
    {
        SrcOver = 0,
        Src = 1,
        SrcAtop = 2,
        SrcIn = 3,
        SrcOut = 4,
        Dest = 5,
        DestAtop = 6,
        DestOver = 7,
        DestIn = 8,
        DestOut = 9,
        Clear = 10,
        Xor = 11,
    }
    public enum PixelAlphaRepresentation
    {
        None = 0,
        Associated = 1,
        Unassociated = 2,
    }
    public abstract class PixelBlender<TPixel>
        where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>
    {
        protected PixelBlender() { }
        public abstract TPixel Blend(TPixel background, TPixel source, float amount);
        public void Blend(SixLabors.ImageSharp.Configuration configuration, System.Span<TPixel> destination, System.ReadOnlySpan<TPixel> background, System.ReadOnlySpan<TPixel> source, System.ReadOnlySpan<float> amount) { }
        public void Blend<TPixelSrc>(SixLabors.ImageSharp.Configuration configuration, System.Span<TPixel> destination, System.ReadOnlySpan<TPixel> background, System.ReadOnlySpan<TPixelSrc> source, System.ReadOnlySpan<float> amount)
            where TPixelSrc :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixelSrc> { }
        public void Blend<TPixelSrc>(SixLabors.ImageSharp.Configuration configuration, System.Span<TPixel> destination, System.ReadOnlySpan<TPixel> background, System.ReadOnlySpan<TPixelSrc> source, float amount)
            where TPixelSrc :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixelSrc> { }
        protected abstract void BlendFunction(System.Span<System.Numerics.Vector4> destination, System.ReadOnlySpan<System.Numerics.Vector4> background, System.ReadOnlySpan<System.Numerics.Vector4> source, System.ReadOnlySpan<float> amount);
        protected abstract void BlendFunction(System.Span<System.Numerics.Vector4> destination, System.ReadOnlySpan<System.Numerics.Vector4> background, System.ReadOnlySpan<System.Numerics.Vector4> source, float amount);
    }
    public enum PixelColorBlendingMode
    {
        Normal = 0,
        Multiply = 1,
        Add = 2,
        Subtract = 3,
        Screen = 4,
        Darken = 5,
        Lighten = 6,
        Overlay = 7,
        HardLight = 8,
    }
    [System.Flags]
    public enum PixelConversionModifiers
    {
        None = 0,
        Scale = 1,
        Premultiply = 2,
        SRgbCompand = 4,
    }
    public class PixelOperations<TPixel>
        where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>
    {
        public PixelOperations() { }
        public static SixLabors.ImageSharp.PixelFormats.PixelOperations<TPixel> Instance { get; }
        public virtual void From<TSourcePixel>(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TSourcePixel> sourcePixels, System.Span<TPixel> destinationPixels)
            where TSourcePixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TSourcePixel> { }
        public virtual void FromAbgr32(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<SixLabors.ImageSharp.PixelFormats.Abgr32> source, System.Span<TPixel> destinationPixels) { }
        public void FromAbgr32Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<byte> sourceBytes, System.Span<TPixel> destinationPixels, int count) { }
        public virtual void FromArgb32(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<SixLabors.ImageSharp.PixelFormats.Argb32> source, System.Span<TPixel> destinationPixels) { }
        public void FromArgb32Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<byte> sourceBytes, System.Span<TPixel> destinationPixels, int count) { }
        public virtual void FromBgr24(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<SixLabors.ImageSharp.PixelFormats.Bgr24> source, System.Span<TPixel> destinationPixels) { }
        public void FromBgr24Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<byte> sourceBytes, System.Span<TPixel> destinationPixels, int count) { }
        public virtual void FromBgra32(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<SixLabors.ImageSharp.PixelFormats.Bgra32> source, System.Span<TPixel> destinationPixels) { }
        public void FromBgra32Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<byte> sourceBytes, System.Span<TPixel> destinationPixels, int count) { }
        public virtual void FromBgra5551(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<SixLabors.ImageSharp.PixelFormats.Bgra5551> source, System.Span<TPixel> destinationPixels) { }
        public void FromBgra5551Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<byte> sourceBytes, System.Span<TPixel> destinationPixels, int count) { }
        public virtual void FromL16(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<SixLabors.ImageSharp.PixelFormats.L16> source, System.Span<TPixel> destinationPixels) { }
        public void FromL16Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<byte> sourceBytes, System.Span<TPixel> destinationPixels, int count) { }
        public virtual void FromL8(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<SixLabors.ImageSharp.PixelFormats.L8> source, System.Span<TPixel> destinationPixels) { }
        public void FromL8Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<byte> sourceBytes, System.Span<TPixel> destinationPixels, int count) { }
        public virtual void FromLa16(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<SixLabors.ImageSharp.PixelFormats.La16> source, System.Span<TPixel> destinationPixels) { }
        public void FromLa16Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<byte> sourceBytes, System.Span<TPixel> destinationPixels, int count) { }
        public virtual void FromLa32(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<SixLabors.ImageSharp.PixelFormats.La32> source, System.Span<TPixel> destinationPixels) { }
        public void FromLa32Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<byte> sourceBytes, System.Span<TPixel> destinationPixels, int count) { }
        public virtual void FromRgb24(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<SixLabors.ImageSharp.PixelFormats.Rgb24> source, System.Span<TPixel> destinationPixels) { }
        public void FromRgb24Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<byte> sourceBytes, System.Span<TPixel> destinationPixels, int count) { }
        public virtual void FromRgb48(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<SixLabors.ImageSharp.PixelFormats.Rgb48> source, System.Span<TPixel> destinationPixels) { }
        public void FromRgb48Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<byte> sourceBytes, System.Span<TPixel> destinationPixels, int count) { }
        public virtual void FromRgba32(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<SixLabors.ImageSharp.PixelFormats.Rgba32> source, System.Span<TPixel> destinationPixels) { }
        public void FromRgba32Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<byte> sourceBytes, System.Span<TPixel> destinationPixels, int count) { }
        public virtual void FromRgba64(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<SixLabors.ImageSharp.PixelFormats.Rgba64> source, System.Span<TPixel> destinationPixels) { }
        public void FromRgba64Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<byte> sourceBytes, System.Span<TPixel> destinationPixels, int count) { }
        public void FromVector4Destructive(SixLabors.ImageSharp.Configuration configuration, System.Span<System.Numerics.Vector4> sourceVectors, System.Span<TPixel> destinationPixels) { }
        public virtual void FromVector4Destructive(SixLabors.ImageSharp.Configuration configuration, System.Span<System.Numerics.Vector4> sourceVectors, System.Span<TPixel> destinationPixels, SixLabors.ImageSharp.PixelFormats.PixelConversionModifiers modifiers) { }
        public SixLabors.ImageSharp.PixelFormats.PixelBlender<TPixel> GetPixelBlender(SixLabors.ImageSharp.GraphicsOptions options) { }
        public virtual SixLabors.ImageSharp.PixelFormats.PixelBlender<TPixel> GetPixelBlender(SixLabors.ImageSharp.PixelFormats.PixelColorBlendingMode colorMode, SixLabors.ImageSharp.PixelFormats.PixelAlphaCompositionMode alphaMode) { }
        public virtual SixLabors.ImageSharp.Formats.PixelTypeInfo GetPixelTypeInfo() { }
        public virtual void To<TDestinationPixel>(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<TDestinationPixel> destinationPixels)
            where TDestinationPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TDestinationPixel> { }
        public virtual void ToAbgr32(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<SixLabors.ImageSharp.PixelFormats.Abgr32> destinationPixels) { }
        public void ToAbgr32Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<byte> destBytes, int count) { }
        public virtual void ToArgb32(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<SixLabors.ImageSharp.PixelFormats.Argb32> destinationPixels) { }
        public void ToArgb32Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<byte> destBytes, int count) { }
        public virtual void ToBgr24(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<SixLabors.ImageSharp.PixelFormats.Bgr24> destinationPixels) { }
        public void ToBgr24Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<byte> destBytes, int count) { }
        public virtual void ToBgra32(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<SixLabors.ImageSharp.PixelFormats.Bgra32> destinationPixels) { }
        public void ToBgra32Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<byte> destBytes, int count) { }
        public virtual void ToBgra5551(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<SixLabors.ImageSharp.PixelFormats.Bgra5551> destinationPixels) { }
        public void ToBgra5551Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<byte> destBytes, int count) { }
        public virtual void ToL16(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<SixLabors.ImageSharp.PixelFormats.L16> destinationPixels) { }
        public void ToL16Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<byte> destBytes, int count) { }
        public virtual void ToL8(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<SixLabors.ImageSharp.PixelFormats.L8> destinationPixels) { }
        public void ToL8Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<byte> destBytes, int count) { }
        public virtual void ToLa16(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<SixLabors.ImageSharp.PixelFormats.La16> destinationPixels) { }
        public void ToLa16Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<byte> destBytes, int count) { }
        public virtual void ToLa32(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<SixLabors.ImageSharp.PixelFormats.La32> destinationPixels) { }
        public void ToLa32Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<byte> destBytes, int count) { }
        public virtual void ToRgb24(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<SixLabors.ImageSharp.PixelFormats.Rgb24> destinationPixels) { }
        public void ToRgb24Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<byte> destBytes, int count) { }
        public virtual void ToRgb48(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<SixLabors.ImageSharp.PixelFormats.Rgb48> destinationPixels) { }
        public void ToRgb48Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<byte> destBytes, int count) { }
        public virtual void ToRgba32(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<SixLabors.ImageSharp.PixelFormats.Rgba32> destinationPixels) { }
        public void ToRgba32Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<byte> destBytes, int count) { }
        public virtual void ToRgba64(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<SixLabors.ImageSharp.PixelFormats.Rgba64> destinationPixels) { }
        public void ToRgba64Bytes(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<byte> destBytes, int count) { }
        public void ToVector4(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<System.Numerics.Vector4> destinationVectors) { }
        public virtual void ToVector4(SixLabors.ImageSharp.Configuration configuration, System.ReadOnlySpan<TPixel> sourcePixels, System.Span<System.Numerics.Vector4> destinationVectors, SixLabors.ImageSharp.PixelFormats.PixelConversionModifiers modifiers) { }
    }
    public struct Rg32 : SixLabors.ImageSharp.PixelFormats.IPackedVector<uint>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Rg32>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Rg32>
    {
        public Rg32(System.Numerics.Vector2 vector) { }
        public Rg32(float x, float y) { }
        public uint PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Rg32> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Rg32 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector2 ToVector2() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Rg32 left, SixLabors.ImageSharp.PixelFormats.Rg32 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Rg32 left, SixLabors.ImageSharp.PixelFormats.Rg32 right) { }
    }
    public struct Rgb24 : SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Rgb24>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Rgb24>
    {
        public byte B;
        public byte G;
        public byte R;
        public Rgb24(byte r, byte g, byte b) { }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Rgb24> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Rgb24 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static SixLabors.ImageSharp.PixelFormats.Rgb24 op_Implicit(SixLabors.ImageSharp.Color color) { }
        public static SixLabors.ImageSharp.PixelFormats.Rgb24 op_Implicit(SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
        public static SixLabors.ImageSharp.Color op_Implicit(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Rgb24 left, SixLabors.ImageSharp.PixelFormats.Rgb24 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Rgb24 left, SixLabors.ImageSharp.PixelFormats.Rgb24 right) { }
    }
    public struct Rgb48 : SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Rgb48>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Rgb48>
    {
        public ushort B;
        public ushort G;
        public ushort R;
        public Rgb48(ushort r, ushort g, ushort b) { }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Rgb48> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Rgb48 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Rgb48 left, SixLabors.ImageSharp.PixelFormats.Rgb48 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Rgb48 left, SixLabors.ImageSharp.PixelFormats.Rgb48 right) { }
    }
    public struct Rgba1010102 : SixLabors.ImageSharp.PixelFormats.IPackedVector<uint>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Rgba1010102>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Rgba1010102>
    {
        public Rgba1010102(System.Numerics.Vector4 vector) { }
        public Rgba1010102(float x, float y, float z, float w) { }
        public uint PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Rgba1010102> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Rgba1010102 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Rgba1010102 left, SixLabors.ImageSharp.PixelFormats.Rgba1010102 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Rgba1010102 left, SixLabors.ImageSharp.PixelFormats.Rgba1010102 right) { }
    }
    public struct Rgba32 : SixLabors.ImageSharp.PixelFormats.IPackedVector<uint>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Rgba32>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Rgba32>
    {
        public byte A;
        public byte B;
        public byte G;
        public byte R;
        public Rgba32(System.Numerics.Vector3 vector) { }
        public Rgba32(System.Numerics.Vector4 vector) { }
        public Rgba32(uint packed) { }
        public Rgba32(byte r, byte g, byte b) { }
        public Rgba32(byte r, byte g, byte b, byte a) { }
        public Rgba32(float r, float g, float b, float a = 1) { }
        public SixLabors.ImageSharp.PixelFormats.Bgr24 Bgr { get; set; }
        public uint PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.Rgb24 Rgb { get; set; }
        public uint Rgba { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Rgba32> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Rgba32 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public string ToHex() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static SixLabors.ImageSharp.PixelFormats.Rgba32 ParseHex(string hex) { }
        public static bool TryParseHex(string hex, out SixLabors.ImageSharp.PixelFormats.Rgba32 result) { }
        public static SixLabors.ImageSharp.PixelFormats.Rgba32 op_Implicit(SixLabors.ImageSharp.Color color) { }
        public static SixLabors.ImageSharp.PixelFormats.Rgba32 op_Implicit(SixLabors.ImageSharp.ColorSpaces.Rgb color) { }
        public static SixLabors.ImageSharp.Color op_Implicit(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Rgba32 left, SixLabors.ImageSharp.PixelFormats.Rgba32 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Rgba32 left, SixLabors.ImageSharp.PixelFormats.Rgba32 right) { }
    }
    public struct Rgba64 : SixLabors.ImageSharp.PixelFormats.IPackedVector<ulong>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Rgba64>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Rgba64>
    {
        public ushort A;
        public ushort B;
        public ushort G;
        public ushort R;
        public Rgba64(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public Rgba64(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public Rgba64(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public Rgba64(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public Rgba64(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public Rgba64(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public Rgba64(System.Numerics.Vector4 vector) { }
        public Rgba64(ushort r, ushort g, ushort b, ushort a) { }
        public ulong PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.Rgb48 Rgb { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Rgba64> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Rgba64 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public SixLabors.ImageSharp.PixelFormats.Abgr32 ToAbgr32() { }
        public SixLabors.ImageSharp.PixelFormats.Argb32 ToArgb32() { }
        public SixLabors.ImageSharp.PixelFormats.Bgr24 ToBgr24() { }
        public SixLabors.ImageSharp.PixelFormats.Bgra32 ToBgra32() { }
        public SixLabors.ImageSharp.PixelFormats.Rgb24 ToRgb24() { }
        public SixLabors.ImageSharp.PixelFormats.Rgba32 ToRgba32() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static SixLabors.ImageSharp.PixelFormats.Rgba64 op_Implicit(SixLabors.ImageSharp.Color color) { }
        public static SixLabors.ImageSharp.Color op_Implicit(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Rgba64 left, SixLabors.ImageSharp.PixelFormats.Rgba64 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Rgba64 left, SixLabors.ImageSharp.PixelFormats.Rgba64 right) { }
    }
    public struct RgbaVector : SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.RgbaVector>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.RgbaVector>
    {
        public float A;
        public float B;
        public float G;
        public float R;
        public RgbaVector(float r, float g, float b, float a = 1) { }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.RgbaVector> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.RgbaVector other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public string ToHex() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static SixLabors.ImageSharp.PixelFormats.RgbaVector FromHex(string hex) { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.RgbaVector left, SixLabors.ImageSharp.PixelFormats.RgbaVector right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.RgbaVector left, SixLabors.ImageSharp.PixelFormats.RgbaVector right) { }
    }
    public struct Short2 : SixLabors.ImageSharp.PixelFormats.IPackedVector<uint>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Short2>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Short2>
    {
        public Short2(System.Numerics.Vector2 vector) { }
        public Short2(float x, float y) { }
        public uint PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Short2> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Short2 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector2 ToVector2() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Short2 left, SixLabors.ImageSharp.PixelFormats.Short2 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Short2 left, SixLabors.ImageSharp.PixelFormats.Short2 right) { }
    }
    public struct Short4 : SixLabors.ImageSharp.PixelFormats.IPackedVector<ulong>, SixLabors.ImageSharp.PixelFormats.IPixel, SixLabors.ImageSharp.PixelFormats.IPixel<SixLabors.ImageSharp.PixelFormats.Short4>, System.IEquatable<SixLabors.ImageSharp.PixelFormats.Short4>
    {
        public Short4(System.Numerics.Vector4 vector) { }
        public Short4(float x, float y, float z, float w) { }
        public ulong PackedValue { get; set; }
        public SixLabors.ImageSharp.PixelFormats.PixelOperations<SixLabors.ImageSharp.PixelFormats.Short4> CreatePixelOperations() { }
        public bool Equals(SixLabors.ImageSharp.PixelFormats.Short4 other) { }
        public override bool Equals(object obj) { }
        public void FromAbgr32(SixLabors.ImageSharp.PixelFormats.Abgr32 source) { }
        public void FromArgb32(SixLabors.ImageSharp.PixelFormats.Argb32 source) { }
        public void FromBgr24(SixLabors.ImageSharp.PixelFormats.Bgr24 source) { }
        public void FromBgra32(SixLabors.ImageSharp.PixelFormats.Bgra32 source) { }
        public void FromBgra5551(SixLabors.ImageSharp.PixelFormats.Bgra5551 source) { }
        public void FromL16(SixLabors.ImageSharp.PixelFormats.L16 source) { }
        public void FromL8(SixLabors.ImageSharp.PixelFormats.L8 source) { }
        public void FromLa16(SixLabors.ImageSharp.PixelFormats.La16 source) { }
        public void FromLa32(SixLabors.ImageSharp.PixelFormats.La32 source) { }
        public void FromRgb24(SixLabors.ImageSharp.PixelFormats.Rgb24 source) { }
        public void FromRgb48(SixLabors.ImageSharp.PixelFormats.Rgb48 source) { }
        public void FromRgba32(SixLabors.ImageSharp.PixelFormats.Rgba32 source) { }
        public void FromRgba64(SixLabors.ImageSharp.PixelFormats.Rgba64 source) { }
        public void FromScaledVector4(System.Numerics.Vector4 vector) { }
        public void FromVector4(System.Numerics.Vector4 vector) { }
        public override int GetHashCode() { }
        public void ToRgba32(ref SixLabors.ImageSharp.PixelFormats.Rgba32 dest) { }
        public System.Numerics.Vector4 ToScaledVector4() { }
        public override string ToString() { }
        public System.Numerics.Vector4 ToVector4() { }
        public static bool operator !=(SixLabors.ImageSharp.PixelFormats.Short4 left, SixLabors.ImageSharp.PixelFormats.Short4 right) { }
        public static bool operator ==(SixLabors.ImageSharp.PixelFormats.Short4 left, SixLabors.ImageSharp.PixelFormats.Short4 right) { }
    }
}
namespace SixLabors.ImageSharp.Processing
{
    public static class AdaptiveThresholdExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext AdaptiveThreshold(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext AdaptiveThreshold(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float thresholdLimit) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext AdaptiveThreshold(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Color upper, SixLabors.ImageSharp.Color lower) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext AdaptiveThreshold(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Color upper, SixLabors.ImageSharp.Color lower, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext AdaptiveThreshold(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Color upper, SixLabors.ImageSharp.Color lower, float thresholdLimit) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext AdaptiveThreshold(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Color upper, SixLabors.ImageSharp.Color lower, float thresholdLimit, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public class AffineTransformBuilder
    {
        public AffineTransformBuilder() { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder AppendMatrix(System.Numerics.Matrix3x2 matrix) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder AppendRotationDegrees(float degrees) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder AppendRotationDegrees(float degrees, System.Numerics.Vector2 origin) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder AppendRotationRadians(float radians) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder AppendRotationRadians(float radians, System.Numerics.Vector2 origin) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder AppendScale(SixLabors.ImageSharp.SizeF scales) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder AppendScale(System.Numerics.Vector2 scales) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder AppendScale(float scale) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder AppendSkewDegrees(float degreesX, float degreesY) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder AppendSkewDegrees(float degreesX, float degreesY, System.Numerics.Vector2 origin) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder AppendSkewRadians(float radiansX, float radiansY) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder AppendSkewRadians(float radiansX, float radiansY, System.Numerics.Vector2 origin) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder AppendTranslation(SixLabors.ImageSharp.PointF position) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder AppendTranslation(System.Numerics.Vector2 position) { }
        public System.Numerics.Matrix3x2 BuildMatrix(SixLabors.ImageSharp.Rectangle sourceRectangle) { }
        public System.Numerics.Matrix3x2 BuildMatrix(SixLabors.ImageSharp.Size sourceSize) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder PrependMatrix(System.Numerics.Matrix3x2 matrix) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder PrependRotationDegrees(float degrees) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder PrependRotationDegrees(float degrees, System.Numerics.Vector2 origin) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder PrependRotationRadians(float radians) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder PrependRotationRadians(float radians, System.Numerics.Vector2 origin) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder PrependScale(SixLabors.ImageSharp.SizeF scale) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder PrependScale(System.Numerics.Vector2 scales) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder PrependScale(float scale) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder PrependSkewDegrees(float degreesX, float degreesY) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder PrependSkewDegrees(float degreesX, float degreesY, System.Numerics.Vector2 origin) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder PrependSkewRadians(float radiansX, float radiansY) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder PrependSkewRadians(float radiansX, float radiansY, System.Numerics.Vector2 origin) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder PrependTranslation(SixLabors.ImageSharp.PointF position) { }
        public SixLabors.ImageSharp.Processing.AffineTransformBuilder PrependTranslation(System.Numerics.Vector2 position) { }
    }
    public enum AnchorPositionMode
    {
        Center = 0,
        Top = 1,
        Bottom = 2,
        Left = 3,
        Right = 4,
        TopLeft = 5,
        TopRight = 6,
        BottomRight = 7,
        BottomLeft = 8,
    }
    public static class AutoOrientExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext AutoOrient(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
    }
    public static class BackgroundColorExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BackgroundColor(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Color color) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BackgroundColor(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Color color, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BackgroundColor(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.GraphicsOptions options, SixLabors.ImageSharp.Color color) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BackgroundColor(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.GraphicsOptions options, SixLabors.ImageSharp.Color color, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class BinaryDitherExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BinaryDither(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BinaryDither(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BinaryDither(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither, SixLabors.ImageSharp.Color upperColor, SixLabors.ImageSharp.Color lowerColor) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BinaryDither(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither, SixLabors.ImageSharp.Color upperColor, SixLabors.ImageSharp.Color lowerColor, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class BinaryThresholdExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BinaryThreshold(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float threshold) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BinaryThreshold(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float threshold, SixLabors.ImageSharp.Processing.BinaryThresholdMode mode) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BinaryThreshold(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float threshold, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BinaryThreshold(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float threshold, SixLabors.ImageSharp.Color upperColor, SixLabors.ImageSharp.Color lowerColor) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BinaryThreshold(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float threshold, SixLabors.ImageSharp.Processing.BinaryThresholdMode mode, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BinaryThreshold(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float threshold, SixLabors.ImageSharp.Color upperColor, SixLabors.ImageSharp.Color lowerColor, SixLabors.ImageSharp.Processing.BinaryThresholdMode mode) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BinaryThreshold(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float threshold, SixLabors.ImageSharp.Color upperColor, SixLabors.ImageSharp.Color lowerColor, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BinaryThreshold(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float threshold, SixLabors.ImageSharp.Color upperColor, SixLabors.ImageSharp.Color lowerColor, SixLabors.ImageSharp.Processing.BinaryThresholdMode mode, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public enum BinaryThresholdMode
    {
        Luminance = 0,
        Saturation = 1,
        MaxChroma = 2,
    }
    public static class BlackWhiteExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BlackWhite(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BlackWhite(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class BokehBlurExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BokehBlur(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BokehBlur(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BokehBlur(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int radius, int components, float gamma) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BokehBlur(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int radius, int components, float gamma, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class BoxBlurExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BoxBlur(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BoxBlur(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int radius) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BoxBlur(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int radius, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext BoxBlur(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int radius, SixLabors.ImageSharp.Rectangle rectangle, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeX, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeY) { }
    }
    public static class BrightnessExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Brightness(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float amount) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Brightness(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float amount, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class ColorBlindnessExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext ColorBlindness(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.ColorBlindnessMode colorBlindness) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext ColorBlindness(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.ColorBlindnessMode colorBlindnessMode, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public enum ColorBlindnessMode
    {
        Achromatomaly = 0,
        Achromatopsia = 1,
        Deuteranomaly = 2,
        Deuteranopia = 3,
        Protanomaly = 4,
        Protanopia = 5,
        Tritanomaly = 6,
        Tritanopia = 7,
    }
    public static class ContrastExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Contrast(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float amount) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Contrast(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float amount, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class CropExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Crop(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Rectangle cropRectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Crop(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int width, int height) { }
    }
    public static class DetectEdgesExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DetectEdges(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DetectEdges(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel kernel) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DetectEdges(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel kernel) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DetectEdges(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel kernel) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DetectEdges(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DetectEdges(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel kernel, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DetectEdges(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel kernel, bool grayscale) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DetectEdges(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel kernel, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DetectEdges(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel kernel, bool grayscale) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DetectEdges(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel kernel, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DetectEdges(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel kernel, bool grayscale) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DetectEdges(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel kernel, bool grayscale, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DetectEdges(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel kernel, bool grayscale, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DetectEdges(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel kernel, bool grayscale, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class DitherExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Dither(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Dither(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Dither(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Dither(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Dither(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither, System.ReadOnlyMemory<SixLabors.ImageSharp.Color> palette) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Dither(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither, float ditherScale) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Dither(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither, System.ReadOnlyMemory<SixLabors.ImageSharp.Color> palette, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Dither(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither, float ditherScale, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Dither(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither, float ditherScale, System.ReadOnlyMemory<SixLabors.ImageSharp.Color> palette) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Dither(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither, float ditherScale, System.ReadOnlyMemory<SixLabors.ImageSharp.Color> palette, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class DrawImageExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DrawImage(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Image image, SixLabors.ImageSharp.GraphicsOptions options) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DrawImage(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Image image, float opacity) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DrawImage(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Image image, SixLabors.ImageSharp.PixelFormats.PixelColorBlendingMode colorBlending, float opacity) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DrawImage(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Image image, SixLabors.ImageSharp.Point location, SixLabors.ImageSharp.GraphicsOptions options) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DrawImage(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Image image, SixLabors.ImageSharp.Point location, float opacity) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DrawImage(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Image image, SixLabors.ImageSharp.PixelFormats.PixelColorBlendingMode colorBlending, SixLabors.ImageSharp.PixelFormats.PixelAlphaCompositionMode alphaComposition, float opacity) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DrawImage(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Image image, SixLabors.ImageSharp.Point location, SixLabors.ImageSharp.PixelFormats.PixelColorBlendingMode colorBlending, float opacity) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext DrawImage(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Image image, SixLabors.ImageSharp.Point location, SixLabors.ImageSharp.PixelFormats.PixelColorBlendingMode colorBlending, SixLabors.ImageSharp.PixelFormats.PixelAlphaCompositionMode alphaComposition, float opacity) { }
    }
    public static class EntropyCropExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext EntropyCrop(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext EntropyCrop(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float threshold) { }
    }
    public static class FilterExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Filter(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.ColorMatrix matrix) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Filter(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.ColorMatrix matrix, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class FlipExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Flip(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.FlipMode flipMode) { }
    }
    public enum FlipMode
    {
        None = 0,
        Horizontal = 1,
        Vertical = 2,
    }
    public static class GaussianBlurExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext GaussianBlur(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext GaussianBlur(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float sigma) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext GaussianBlur(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float sigma, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext GaussianBlur(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float sigma, SixLabors.ImageSharp.Rectangle rectangle, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeX, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeY) { }
    }
    public static class GaussianSharpenExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext GaussianSharpen(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext GaussianSharpen(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float sigma) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext GaussianSharpen(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float sigma, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext GaussianSharpen(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float sigma, SixLabors.ImageSharp.Rectangle rectangle, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeX, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeY) { }
    }
    public static class GlowExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Glow(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Glow(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Color color) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Glow(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.GraphicsOptions options) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Glow(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Glow(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float radius) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Glow(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.GraphicsOptions options, SixLabors.ImageSharp.Color color) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Glow(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.GraphicsOptions options, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Glow(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.GraphicsOptions options, float radius) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Glow(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Color color, float radius, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Glow(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.GraphicsOptions options, SixLabors.ImageSharp.Color color, float radius, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class GrayscaleExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Grayscale(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Grayscale(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.GrayscaleMode mode) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Grayscale(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Grayscale(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float amount) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Grayscale(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.GrayscaleMode mode, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Grayscale(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.GrayscaleMode mode, float amount) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Grayscale(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float amount, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Grayscale(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.GrayscaleMode mode, float amount, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public enum GrayscaleMode
    {
        Bt709 = 0,
        Bt601 = 1,
    }
    public static class HistogramEqualizationExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext HistogramEqualization(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext HistogramEqualization(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Normalization.HistogramEqualizationOptions options) { }
    }
    public static class HueExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Hue(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float degrees) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Hue(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float degrees, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public interface IImageProcessingContext
    {
        SixLabors.ImageSharp.Configuration Configuration { get; }
        System.Collections.Generic.IDictionary<object, object> Properties { get; }
        SixLabors.ImageSharp.Processing.IImageProcessingContext ApplyProcessor(SixLabors.ImageSharp.Processing.Processors.IImageProcessor processor);
        SixLabors.ImageSharp.Processing.IImageProcessingContext ApplyProcessor(SixLabors.ImageSharp.Processing.Processors.IImageProcessor processor, SixLabors.ImageSharp.Rectangle rectangle);
        SixLabors.ImageSharp.Size GetCurrentSize();
    }
    public static class InvertExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Invert(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Invert(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class KnownDitherings
    {
        public static SixLabors.ImageSharp.Processing.Processors.Dithering.IDither Atkinson { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Dithering.IDither Bayer16x16 { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Dithering.IDither Bayer2x2 { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Dithering.IDither Bayer4x4 { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Dithering.IDither Bayer8x8 { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Dithering.IDither Burks { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Dithering.IDither FloydSteinberg { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Dithering.IDither JarvisJudiceNinke { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Dithering.IDither Ordered3x3 { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Dithering.IDither Sierra2 { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Dithering.IDither Sierra3 { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Dithering.IDither SierraLite { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Dithering.IDither StevensonArce { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Dithering.IDither Stucki { get; }
    }
    public static class KnownEdgeDetectorKernels
    {
        public static SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel Kayyali { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel Kirsch { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel Laplacian3x3 { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel Laplacian5x5 { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel LaplacianOfGaussian { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel Prewitt { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel RobertsCross { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel Robinson { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel Scharr { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel Sobel { get; }
    }
    public static class KnownFilterMatrices
    {
        public static SixLabors.ImageSharp.ColorMatrix AchromatomalyFilter { get; }
        public static SixLabors.ImageSharp.ColorMatrix AchromatopsiaFilter { get; }
        public static SixLabors.ImageSharp.ColorMatrix BlackWhiteFilter { get; }
        public static SixLabors.ImageSharp.ColorMatrix DeuteranomalyFilter { get; }
        public static SixLabors.ImageSharp.ColorMatrix DeuteranopiaFilter { get; }
        public static SixLabors.ImageSharp.ColorMatrix KodachromeFilter { get; }
        public static SixLabors.ImageSharp.ColorMatrix LomographFilter { get; }
        public static SixLabors.ImageSharp.ColorMatrix PolaroidFilter { get; }
        public static SixLabors.ImageSharp.ColorMatrix ProtanomalyFilter { get; }
        public static SixLabors.ImageSharp.ColorMatrix ProtanopiaFilter { get; }
        public static SixLabors.ImageSharp.ColorMatrix TritanomalyFilter { get; }
        public static SixLabors.ImageSharp.ColorMatrix TritanopiaFilter { get; }
        public static SixLabors.ImageSharp.ColorMatrix CreateBrightnessFilter(float amount) { }
        public static SixLabors.ImageSharp.ColorMatrix CreateContrastFilter(float amount) { }
        public static SixLabors.ImageSharp.ColorMatrix CreateGrayscaleBt601Filter(float amount) { }
        public static SixLabors.ImageSharp.ColorMatrix CreateGrayscaleBt709Filter(float amount) { }
        public static SixLabors.ImageSharp.ColorMatrix CreateHueFilter(float degrees) { }
        public static SixLabors.ImageSharp.ColorMatrix CreateInvertFilter(float amount) { }
        public static SixLabors.ImageSharp.ColorMatrix CreateLightnessFilter(float amount) { }
        public static SixLabors.ImageSharp.ColorMatrix CreateOpacityFilter(float amount) { }
        public static SixLabors.ImageSharp.ColorMatrix CreateSaturateFilter(float amount) { }
        public static SixLabors.ImageSharp.ColorMatrix CreateSepiaFilter(float amount) { }
    }
    public static class KnownQuantizers
    {
        public static SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer Octree { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer WebSafe { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer Werner { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer Wu { get; }
    }
    public static class KnownResamplers
    {
        public static SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler Bicubic { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler Box { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler CatmullRom { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler Hermite { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler Lanczos2 { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler Lanczos3 { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler Lanczos5 { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler Lanczos8 { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler MitchellNetravali { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler NearestNeighbor { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler Robidoux { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler RobidouxSharp { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler Spline { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler Triangle { get; }
        public static SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler Welch { get; }
    }
    public static class KodachromeExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Kodachrome(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Kodachrome(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class LightnessExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Lightness(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float amount) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Lightness(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float amount, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class LomographExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Lomograph(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Lomograph(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class MedianBlurExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext MedianBlur(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int radius, bool preserveAlpha) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext MedianBlur(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int radius, bool preserveAlpha, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class OilPaintExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext OilPaint(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext OilPaint(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext OilPaint(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int levels, int brushSize) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext OilPaint(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int levels, int brushSize, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class OpacityExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Opacity(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float amount) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Opacity(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float amount, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class PadExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Pad(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int width, int height) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Pad(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int width, int height, SixLabors.ImageSharp.Color color) { }
    }
    public static class PixelRowDelegateExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext ProcessPixelRowsAsVector4(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.PixelRowOperation rowOperation) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext ProcessPixelRowsAsVector4(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.PixelRowOperation<SixLabors.ImageSharp.Point> rowOperation) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext ProcessPixelRowsAsVector4(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.PixelRowOperation rowOperation, SixLabors.ImageSharp.PixelFormats.PixelConversionModifiers modifiers) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext ProcessPixelRowsAsVector4(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.PixelRowOperation rowOperation, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext ProcessPixelRowsAsVector4(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.PixelRowOperation<SixLabors.ImageSharp.Point> rowOperation, SixLabors.ImageSharp.PixelFormats.PixelConversionModifiers modifiers) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext ProcessPixelRowsAsVector4(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.PixelRowOperation<SixLabors.ImageSharp.Point> rowOperation, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext ProcessPixelRowsAsVector4(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.PixelRowOperation rowOperation, SixLabors.ImageSharp.Rectangle rectangle, SixLabors.ImageSharp.PixelFormats.PixelConversionModifiers modifiers) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext ProcessPixelRowsAsVector4(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.PixelRowOperation<SixLabors.ImageSharp.Point> rowOperation, SixLabors.ImageSharp.Rectangle rectangle, SixLabors.ImageSharp.PixelFormats.PixelConversionModifiers modifiers) { }
    }
    public delegate void PixelRowOperation(System.Span<System.Numerics.Vector4> span);
    public delegate void PixelRowOperation<in T>(System.Span<System.Numerics.Vector4> span, T value);
    public static class PixelateExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Pixelate(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Pixelate(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int size) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Pixelate(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int size, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class PolaroidExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Polaroid(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Polaroid(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class ProcessingExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext ApplyProcessors(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, params SixLabors.ImageSharp.Processing.Processors.IImageProcessor[] operations) { }
        public static SixLabors.ImageSharp.Memory.Buffer2D<ulong> CalculateIntegralImage<TPixel>(this SixLabors.ImageSharp.ImageFrame<TPixel> source)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Memory.Buffer2D<ulong> CalculateIntegralImage<TPixel>(this SixLabors.ImageSharp.Image<TPixel> source)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Memory.Buffer2D<ulong> CalculateIntegralImage<TPixel>(this SixLabors.ImageSharp.ImageFrame<TPixel> source, SixLabors.ImageSharp.Rectangle bounds)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Memory.Buffer2D<ulong> CalculateIntegralImage<TPixel>(this SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle bounds)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image Clone(this SixLabors.ImageSharp.Image source, System.Action<SixLabors.ImageSharp.Processing.IImageProcessingContext> operation) { }
        public static SixLabors.ImageSharp.Image Clone(this SixLabors.ImageSharp.Image source, SixLabors.ImageSharp.Configuration configuration, System.Action<SixLabors.ImageSharp.Processing.IImageProcessingContext> operation) { }
        public static SixLabors.ImageSharp.Image<TPixel> Clone<TPixel>(this SixLabors.ImageSharp.Image<TPixel> source, params SixLabors.ImageSharp.Processing.Processors.IImageProcessor[] operations)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> Clone<TPixel>(this SixLabors.ImageSharp.Image<TPixel> source, System.Action<SixLabors.ImageSharp.Processing.IImageProcessingContext> operation)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> Clone<TPixel>(this SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Configuration configuration, params SixLabors.ImageSharp.Processing.Processors.IImageProcessor[] operations)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.Image<TPixel> Clone<TPixel>(this SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Configuration configuration, System.Action<SixLabors.ImageSharp.Processing.IImageProcessingContext> operation)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static void Mutate(this SixLabors.ImageSharp.Image source, System.Action<SixLabors.ImageSharp.Processing.IImageProcessingContext> operation) { }
        public static void Mutate(this SixLabors.ImageSharp.Image source, SixLabors.ImageSharp.Configuration configuration, System.Action<SixLabors.ImageSharp.Processing.IImageProcessingContext> operation) { }
        public static void Mutate<TPixel>(this SixLabors.ImageSharp.Image<TPixel> source, params SixLabors.ImageSharp.Processing.Processors.IImageProcessor[] operations)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static void Mutate<TPixel>(this SixLabors.ImageSharp.Image<TPixel> source, System.Action<SixLabors.ImageSharp.Processing.IImageProcessingContext> operation)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static void Mutate<TPixel>(this SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Configuration configuration, params SixLabors.ImageSharp.Processing.Processors.IImageProcessor[] operations)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static void Mutate<TPixel>(this SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Configuration configuration, System.Action<SixLabors.ImageSharp.Processing.IImageProcessingContext> operation)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public class ProjectiveTransformBuilder
    {
        public ProjectiveTransformBuilder() { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder AppendMatrix(System.Numerics.Matrix4x4 matrix) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder AppendRotationDegrees(float degrees) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder AppendRotationRadians(float radians) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder AppendScale(SixLabors.ImageSharp.SizeF scales) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder AppendScale(System.Numerics.Vector2 scales) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder AppendScale(float scale) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder AppendSkewDegrees(float degreesX, float degreesY, System.Numerics.Vector2 origin) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder AppendSkewRadians(float radiansX, float radiansY) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder AppendSkewRadians(float radiansX, float radiansY, System.Numerics.Vector2 origin) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder AppendTaper(SixLabors.ImageSharp.Processing.TaperSide side, SixLabors.ImageSharp.Processing.TaperCorner corner, float fraction) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder AppendTranslation(SixLabors.ImageSharp.PointF position) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder AppendTranslation(System.Numerics.Vector2 position) { }
        public System.Numerics.Matrix4x4 BuildMatrix(SixLabors.ImageSharp.Rectangle sourceRectangle) { }
        public System.Numerics.Matrix4x4 BuildMatrix(SixLabors.ImageSharp.Size sourceSize) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder PrependMatrix(System.Numerics.Matrix4x4 matrix) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder PrependRotationDegrees(float degrees) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder PrependRotationRadians(float radians) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder PrependScale(SixLabors.ImageSharp.SizeF scale) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder PrependScale(System.Numerics.Vector2 scales) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder PrependScale(float scale) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder PrependSkewDegrees(float degreesX, float degreesY, System.Numerics.Vector2 origin) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder PrependSkewRadians(float radiansX, float radiansY) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder PrependSkewRadians(float radiansX, float radiansY, System.Numerics.Vector2 origin) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder PrependTaper(SixLabors.ImageSharp.Processing.TaperSide side, SixLabors.ImageSharp.Processing.TaperCorner corner, float fraction) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder PrependTranslation(SixLabors.ImageSharp.PointF position) { }
        public SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder PrependTranslation(System.Numerics.Vector2 position) { }
    }
    public static class QuantizeExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Quantize(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Quantize(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer quantizer) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Quantize(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Quantize(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer quantizer, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class ResizeExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Resize(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.ResizeOptions options) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Resize(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Size size) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Resize(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Size size, bool compand) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Resize(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int width, int height) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Resize(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Size size, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler, bool compand) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Resize(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int width, int height, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Resize(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int width, int height, bool compand) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Resize(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int width, int height, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler, bool compand) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Resize(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int width, int height, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler, SixLabors.ImageSharp.Rectangle targetRectangle, bool compand) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Resize(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, int width, int height, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler, SixLabors.ImageSharp.Rectangle sourceRectangle, SixLabors.ImageSharp.Rectangle targetRectangle, bool compand) { }
    }
    public enum ResizeMode
    {
        Crop = 0,
        Pad = 1,
        BoxPad = 2,
        Max = 3,
        Min = 4,
        Stretch = 5,
        Manual = 6,
    }
    public class ResizeOptions
    {
        public ResizeOptions() { }
        public SixLabors.ImageSharp.PointF? CenterCoordinates { get; set; }
        public bool Compand { get; set; }
        public SixLabors.ImageSharp.Processing.ResizeMode Mode { get; set; }
        public SixLabors.ImageSharp.Color PadColor { get; set; }
        public SixLabors.ImageSharp.Processing.AnchorPositionMode Position { get; set; }
        public bool PremultiplyAlpha { get; set; }
        public SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler Sampler { get; set; }
        public SixLabors.ImageSharp.Size Size { get; set; }
        public SixLabors.ImageSharp.Rectangle? TargetRectangle { get; set; }
    }
    public static class RotateExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Rotate(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.RotateMode rotateMode) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Rotate(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float degrees) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Rotate(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float degrees, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler) { }
    }
    public static class RotateFlipExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext RotateFlip(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.RotateMode rotateMode, SixLabors.ImageSharp.Processing.FlipMode flipMode) { }
    }
    public enum RotateMode
    {
        None = 0,
        Rotate90 = 90,
        Rotate180 = 180,
        Rotate270 = 270,
    }
    public static class SaturateExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Saturate(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float amount) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Saturate(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float amount, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class SepiaExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Sepia(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Sepia(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Sepia(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float amount) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Sepia(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float amount, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
    public static class SkewExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Skew(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float degreesX, float degreesY) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Skew(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float degreesX, float degreesY, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler) { }
    }
    public static class SwizzleExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Swizzle<TSwizzler>(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, TSwizzler swizzler)
            where TSwizzler :  struct, SixLabors.ImageSharp.Processing.Processors.Transforms.ISwizzler { }
    }
    public enum TaperCorner
    {
        LeftOrTop = 0,
        RightOrBottom = 1,
        Both = 2,
    }
    public enum TaperSide
    {
        Left = 0,
        Top = 1,
        Right = 2,
        Bottom = 3,
    }
    public static class TransformExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Transform(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.AffineTransformBuilder builder) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Transform(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder builder) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Transform(this SixLabors.ImageSharp.Processing.IImageProcessingContext ctx, SixLabors.ImageSharp.Processing.AffineTransformBuilder builder, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Transform(this SixLabors.ImageSharp.Processing.IImageProcessingContext ctx, SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder builder, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Transform(this SixLabors.ImageSharp.Processing.IImageProcessingContext ctx, SixLabors.ImageSharp.Rectangle sourceRectangle, SixLabors.ImageSharp.Processing.AffineTransformBuilder builder, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Transform(this SixLabors.ImageSharp.Processing.IImageProcessingContext ctx, SixLabors.ImageSharp.Rectangle sourceRectangle, SixLabors.ImageSharp.Processing.ProjectiveTransformBuilder builder, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Transform(this SixLabors.ImageSharp.Processing.IImageProcessingContext ctx, SixLabors.ImageSharp.Rectangle sourceRectangle, System.Numerics.Matrix3x2 transform, SixLabors.ImageSharp.Size targetDimensions, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Transform(this SixLabors.ImageSharp.Processing.IImageProcessingContext ctx, SixLabors.ImageSharp.Rectangle sourceRectangle, System.Numerics.Matrix4x4 transform, SixLabors.ImageSharp.Size targetDimensions, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler) { }
    }
    public static class VignetteExtensions
    {
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Vignette(this SixLabors.ImageSharp.Processing.IImageProcessingContext source) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Vignette(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Color color) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Vignette(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.GraphicsOptions options) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Vignette(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Vignette(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.GraphicsOptions options, SixLabors.ImageSharp.Color color) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Vignette(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.GraphicsOptions options, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Vignette(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, float radiusX, float radiusY) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Vignette(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.GraphicsOptions options, float radiusX, float radiusY) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Vignette(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.Color color, float radiusX, float radiusY, SixLabors.ImageSharp.Rectangle rectangle) { }
        public static SixLabors.ImageSharp.Processing.IImageProcessingContext Vignette(this SixLabors.ImageSharp.Processing.IImageProcessingContext source, SixLabors.ImageSharp.GraphicsOptions options, SixLabors.ImageSharp.Color color, float radiusX, float radiusY, SixLabors.ImageSharp.Rectangle rectangle) { }
    }
}
namespace SixLabors.ImageSharp.Processing.Processors.Binarization
{
    public class AdaptiveThresholdProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public AdaptiveThresholdProcessor() { }
        public AdaptiveThresholdProcessor(float thresholdLimit) { }
        public AdaptiveThresholdProcessor(SixLabors.ImageSharp.Color upper, SixLabors.ImageSharp.Color lower) { }
        public AdaptiveThresholdProcessor(SixLabors.ImageSharp.Color upper, SixLabors.ImageSharp.Color lower, float thresholdLimit) { }
        public SixLabors.ImageSharp.Color Lower { get; set; }
        public float ThresholdLimit { get; set; }
        public SixLabors.ImageSharp.Color Upper { get; set; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public class BinaryThresholdProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public BinaryThresholdProcessor(float threshold) { }
        public BinaryThresholdProcessor(float threshold, SixLabors.ImageSharp.Processing.BinaryThresholdMode mode) { }
        public BinaryThresholdProcessor(float threshold, SixLabors.ImageSharp.Color upperColor, SixLabors.ImageSharp.Color lowerColor) { }
        public BinaryThresholdProcessor(float threshold, SixLabors.ImageSharp.Color upperColor, SixLabors.ImageSharp.Color lowerColor, SixLabors.ImageSharp.Processing.BinaryThresholdMode mode) { }
        public SixLabors.ImageSharp.Color LowerColor { get; }
        public SixLabors.ImageSharp.Processing.BinaryThresholdMode Mode { get; }
        public float Threshold { get; }
        public SixLabors.ImageSharp.Color UpperColor { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
}
namespace SixLabors.ImageSharp.Processing.Processors
{
    public abstract class CloningImageProcessor : SixLabors.ImageSharp.Processing.Processors.ICloningImageProcessor, SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        protected CloningImageProcessor() { }
        public abstract SixLabors.ImageSharp.Processing.Processors.ICloningImageProcessor<TPixel> CreatePixelSpecificCloningProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
    }
    public abstract class CloningImageProcessor<TPixel> : SixLabors.ImageSharp.Processing.Processors.ICloningImageProcessor<TPixel>, SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel>, System.IDisposable
        where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>
    {
        protected CloningImageProcessor(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle) { }
        protected SixLabors.ImageSharp.Configuration Configuration { get; }
        protected SixLabors.ImageSharp.Image<TPixel> Source { get; }
        protected SixLabors.ImageSharp.Rectangle SourceRectangle { get; }
        protected virtual void AfterFrameApply(SixLabors.ImageSharp.ImageFrame<TPixel> source, SixLabors.ImageSharp.ImageFrame<TPixel> destination) { }
        protected virtual void AfterImageApply(SixLabors.ImageSharp.Image<TPixel> destination) { }
        protected virtual void BeforeFrameApply(SixLabors.ImageSharp.ImageFrame<TPixel> source, SixLabors.ImageSharp.ImageFrame<TPixel> destination) { }
        protected virtual void BeforeImageApply(SixLabors.ImageSharp.Image<TPixel> destination) { }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        protected abstract SixLabors.ImageSharp.Size GetDestinationSize();
        protected abstract void OnFrameApply(SixLabors.ImageSharp.ImageFrame<TPixel> source, SixLabors.ImageSharp.ImageFrame<TPixel> destination);
    }
    public interface ICloningImageProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        SixLabors.ImageSharp.Processing.Processors.ICloningImageProcessor<TPixel> CreatePixelSpecificCloningProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
    }
    public interface ICloningImageProcessor<TPixel> : SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel>, System.IDisposable
        where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>
    {
        SixLabors.ImageSharp.Image<TPixel> CloneAndExecute();
    }
    public interface IImageProcessor
    {
        SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
    }
    public interface IImageProcessor<TPixel> : System.IDisposable
        where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>
    {
        void Execute();
    }
    public abstract class ImageProcessor<TPixel> : SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel>, System.IDisposable
        where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>
    {
        protected ImageProcessor(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle) { }
        protected SixLabors.ImageSharp.Configuration Configuration { get; }
        protected SixLabors.ImageSharp.Image<TPixel> Source { get; }
        protected SixLabors.ImageSharp.Rectangle SourceRectangle { get; }
        protected virtual void AfterFrameApply(SixLabors.ImageSharp.ImageFrame<TPixel> source) { }
        protected virtual void AfterImageApply() { }
        public void Apply(SixLabors.ImageSharp.ImageFrame<TPixel> source) { }
        protected virtual void BeforeFrameApply(SixLabors.ImageSharp.ImageFrame<TPixel> source) { }
        protected virtual void BeforeImageApply() { }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        protected abstract void OnFrameApply(SixLabors.ImageSharp.ImageFrame<TPixel> source);
    }
}
namespace SixLabors.ImageSharp.Processing.Processors.Convolution
{
    public sealed class BokehBlurProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public const int DefaultComponents = 2;
        public const float DefaultGamma = 3F;
        public const int DefaultRadius = 32;
        public BokehBlurProcessor() { }
        public BokehBlurProcessor(int radius, int components, float gamma) { }
        public int Components { get; }
        public float Gamma { get; }
        public int Radius { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public enum BorderWrappingMode : byte
    {
        Repeat = 0,
        Wrap = 1,
        Mirror = 2,
        Bounce = 3,
    }
    public sealed class BoxBlurProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public const int DefaultRadius = 7;
        public BoxBlurProcessor() { }
        public BoxBlurProcessor(int radius) { }
        public BoxBlurProcessor(int radius, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeX, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeY) { }
        public SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode BorderWrapModeX { get; }
        public SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode BorderWrapModeY { get; }
        public int Radius { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public readonly struct EdgeDetector2DKernel : System.IEquatable<SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel>
    {
        public static readonly SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel KayyaliKernel;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel PrewittKernel;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel RobertsCrossKernel;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel ScharrKernel;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel SobelKernel;
        public EdgeDetector2DKernel(SixLabors.ImageSharp.DenseMatrix<float> kernelX, SixLabors.ImageSharp.DenseMatrix<float> kernelY) { }
        public SixLabors.ImageSharp.DenseMatrix<float> KernelX { get; }
        public SixLabors.ImageSharp.DenseMatrix<float> KernelY { get; }
        public bool Equals(SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public static bool operator !=(SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel left, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel right) { }
        public static bool operator ==(SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel left, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel right) { }
    }
    public sealed class EdgeDetector2DProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public EdgeDetector2DProcessor(SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel kernel, bool grayscale) { }
        public bool Grayscale { get; }
        public SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetector2DKernel Kernel { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public readonly struct EdgeDetectorCompassKernel : System.IEquatable<SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel>
    {
        public static readonly SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel Kirsch;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel Robinson;
        public EdgeDetectorCompassKernel(SixLabors.ImageSharp.DenseMatrix<float> north, SixLabors.ImageSharp.DenseMatrix<float> northWest, SixLabors.ImageSharp.DenseMatrix<float> west, SixLabors.ImageSharp.DenseMatrix<float> southWest, SixLabors.ImageSharp.DenseMatrix<float> south, SixLabors.ImageSharp.DenseMatrix<float> southEast, SixLabors.ImageSharp.DenseMatrix<float> east, SixLabors.ImageSharp.DenseMatrix<float> northEast) { }
        public SixLabors.ImageSharp.DenseMatrix<float> East { get; }
        public SixLabors.ImageSharp.DenseMatrix<float> North { get; }
        public SixLabors.ImageSharp.DenseMatrix<float> NorthEast { get; }
        public SixLabors.ImageSharp.DenseMatrix<float> NorthWest { get; }
        public SixLabors.ImageSharp.DenseMatrix<float> South { get; }
        public SixLabors.ImageSharp.DenseMatrix<float> SouthEast { get; }
        public SixLabors.ImageSharp.DenseMatrix<float> SouthWest { get; }
        public SixLabors.ImageSharp.DenseMatrix<float> West { get; }
        public bool Equals(SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public static bool operator !=(SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel left, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel right) { }
        public static bool operator ==(SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel left, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel right) { }
    }
    public sealed class EdgeDetectorCompassProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public EdgeDetectorCompassProcessor(SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel kernel, bool grayscale) { }
        public bool Grayscale { get; }
        public SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorCompassKernel Kernel { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public readonly struct EdgeDetectorKernel : System.IEquatable<SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel>
    {
        public static readonly SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel Laplacian3x3;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel Laplacian5x5;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel LaplacianOfGaussian;
        public EdgeDetectorKernel(SixLabors.ImageSharp.DenseMatrix<float> kernelXY) { }
        public SixLabors.ImageSharp.DenseMatrix<float> KernelXY { get; }
        public bool Equals(SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public static bool operator !=(SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel left, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel right) { }
        public static bool operator ==(SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel left, SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel right) { }
    }
    public sealed class EdgeDetectorProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public EdgeDetectorProcessor(SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel kernel, bool grayscale) { }
        public bool Grayscale { get; }
        public SixLabors.ImageSharp.Processing.Processors.Convolution.EdgeDetectorKernel Kernel { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class GaussianBlurProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public const float DefaultSigma = 3F;
        public GaussianBlurProcessor() { }
        public GaussianBlurProcessor(int radius) { }
        public GaussianBlurProcessor(float sigma) { }
        public GaussianBlurProcessor(float sigma, int radius) { }
        public GaussianBlurProcessor(float sigma, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeX, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeY) { }
        public GaussianBlurProcessor(float sigma, int radius, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeX, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeY) { }
        public SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode BorderWrapModeX { get; }
        public SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode BorderWrapModeY { get; }
        public int Radius { get; }
        public float Sigma { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class GaussianSharpenProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public const float DefaultSigma = 3F;
        public GaussianSharpenProcessor() { }
        public GaussianSharpenProcessor(int radius) { }
        public GaussianSharpenProcessor(float sigma) { }
        public GaussianSharpenProcessor(float sigma, int radius) { }
        public GaussianSharpenProcessor(float sigma, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeX, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeY) { }
        public GaussianSharpenProcessor(float sigma, int radius, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeX, SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode borderWrapModeY) { }
        public SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode BorderWrapModeX { get; }
        public SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode BorderWrapModeY { get; }
        public int Radius { get; }
        public float Sigma { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class MedianBlurProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public MedianBlurProcessor(int radius, bool preserveAlpha) { }
        public SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode BorderWrapModeX { get; }
        public SixLabors.ImageSharp.Processing.Processors.Convolution.BorderWrappingMode BorderWrapModeY { get; }
        public bool PreserveAlpha { get; }
        public int Radius { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
}
namespace SixLabors.ImageSharp.Processing.Processors.Dithering
{
    public readonly struct ErrorDither : SixLabors.ImageSharp.Processing.Processors.Dithering.IDither, System.IEquatable<SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither>, System.IEquatable<SixLabors.ImageSharp.Processing.Processors.Dithering.IDither>
    {
        public static readonly SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither Atkinson;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither Burkes;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither FloydSteinberg;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither JarvisJudiceNinke;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither Sierra2;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither Sierra3;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither SierraLite;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither StevensonArce;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither Stucki;
        public ErrorDither(in SixLabors.ImageSharp.DenseMatrix<float> matrix, int offset) { }
        public void ApplyPaletteDither<TPaletteDitherImageProcessor, TPixel>(in TPaletteDitherImageProcessor processor, SixLabors.ImageSharp.ImageFrame<TPixel> source, SixLabors.ImageSharp.Rectangle bounds)
            where TPaletteDitherImageProcessor :  struct, SixLabors.ImageSharp.Processing.Processors.Dithering.IPaletteDitherImageProcessor<TPixel>
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public void ApplyQuantizationDither<TFrameQuantizer, TPixel>(ref TFrameQuantizer quantizer, SixLabors.ImageSharp.ImageFrame<TPixel> source, SixLabors.ImageSharp.IndexedImageFrame<TPixel> destination, SixLabors.ImageSharp.Rectangle bounds)
            where TFrameQuantizer :  struct, SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel>
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public bool Equals(SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither other) { }
        public bool Equals(SixLabors.ImageSharp.Processing.Processors.Dithering.IDither? other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public static bool operator !=(SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither left, SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither right) { }
        public static bool operator !=(SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither left, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither right) { }
        public static bool operator !=(SixLabors.ImageSharp.Processing.Processors.Dithering.IDither left, SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither right) { }
        public static bool operator ==(SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither left, SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither right) { }
        public static bool operator ==(SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither left, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither right) { }
        public static bool operator ==(SixLabors.ImageSharp.Processing.Processors.Dithering.IDither left, SixLabors.ImageSharp.Processing.Processors.Dithering.ErrorDither right) { }
    }
    public interface IDither
    {
        void ApplyPaletteDither<TPaletteDitherImageProcessor, TPixel>(in TPaletteDitherImageProcessor processor, SixLabors.ImageSharp.ImageFrame<TPixel> source, SixLabors.ImageSharp.Rectangle bounds)
            where TPaletteDitherImageProcessor :  struct, SixLabors.ImageSharp.Processing.Processors.Dithering.IPaletteDitherImageProcessor<TPixel>
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
        void ApplyQuantizationDither<TFrameQuantizer, TPixel>(ref TFrameQuantizer quantizer, SixLabors.ImageSharp.ImageFrame<TPixel> source, SixLabors.ImageSharp.IndexedImageFrame<TPixel> destination, SixLabors.ImageSharp.Rectangle bounds)
            where TFrameQuantizer :  struct, SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel>
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
    }
    public interface IPaletteDitherImageProcessor<TPixel>
        where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>
    {
        SixLabors.ImageSharp.Configuration Configuration { get; }
        float DitherScale { get; }
        System.ReadOnlyMemory<TPixel> Palette { get; }
        TPixel GetPaletteColor(TPixel color);
    }
    public readonly struct OrderedDither : SixLabors.ImageSharp.Processing.Processors.Dithering.IDither, System.IEquatable<SixLabors.ImageSharp.Processing.Processors.Dithering.IDither>, System.IEquatable<SixLabors.ImageSharp.Processing.Processors.Dithering.OrderedDither>
    {
        public static readonly SixLabors.ImageSharp.Processing.Processors.Dithering.OrderedDither Bayer16x16;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Dithering.OrderedDither Bayer2x2;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Dithering.OrderedDither Bayer4x4;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Dithering.OrderedDither Bayer8x8;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Dithering.OrderedDither Ordered3x3;
        public OrderedDither(uint length) { }
        public void ApplyPaletteDither<TPaletteDitherImageProcessor, TPixel>(in TPaletteDitherImageProcessor processor, SixLabors.ImageSharp.ImageFrame<TPixel> source, SixLabors.ImageSharp.Rectangle bounds)
            where TPaletteDitherImageProcessor :  struct, SixLabors.ImageSharp.Processing.Processors.Dithering.IPaletteDitherImageProcessor<TPixel>
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public void ApplyQuantizationDither<TFrameQuantizer, TPixel>(ref TFrameQuantizer quantizer, SixLabors.ImageSharp.ImageFrame<TPixel> source, SixLabors.ImageSharp.IndexedImageFrame<TPixel> destination, SixLabors.ImageSharp.Rectangle bounds)
            where TFrameQuantizer :  struct, SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel>
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public bool Equals(SixLabors.ImageSharp.Processing.Processors.Dithering.IDither? other) { }
        public bool Equals(SixLabors.ImageSharp.Processing.Processors.Dithering.OrderedDither other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public static bool operator !=(SixLabors.ImageSharp.Processing.Processors.Dithering.IDither left, SixLabors.ImageSharp.Processing.Processors.Dithering.OrderedDither right) { }
        public static bool operator !=(SixLabors.ImageSharp.Processing.Processors.Dithering.OrderedDither left, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither right) { }
        public static bool operator !=(SixLabors.ImageSharp.Processing.Processors.Dithering.OrderedDither left, SixLabors.ImageSharp.Processing.Processors.Dithering.OrderedDither right) { }
        public static bool operator ==(SixLabors.ImageSharp.Processing.Processors.Dithering.IDither left, SixLabors.ImageSharp.Processing.Processors.Dithering.OrderedDither right) { }
        public static bool operator ==(SixLabors.ImageSharp.Processing.Processors.Dithering.OrderedDither left, SixLabors.ImageSharp.Processing.Processors.Dithering.IDither right) { }
        public static bool operator ==(SixLabors.ImageSharp.Processing.Processors.Dithering.OrderedDither left, SixLabors.ImageSharp.Processing.Processors.Dithering.OrderedDither right) { }
    }
    public sealed class PaletteDitherProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public PaletteDitherProcessor(SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither) { }
        public PaletteDitherProcessor(SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither, System.ReadOnlyMemory<SixLabors.ImageSharp.Color> palette) { }
        public PaletteDitherProcessor(SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither, float ditherScale) { }
        public PaletteDitherProcessor(SixLabors.ImageSharp.Processing.Processors.Dithering.IDither dither, float ditherScale, System.ReadOnlyMemory<SixLabors.ImageSharp.Color> palette) { }
        public SixLabors.ImageSharp.Processing.Processors.Dithering.IDither Dither { get; }
        public float DitherScale { get; }
        public System.ReadOnlyMemory<SixLabors.ImageSharp.Color> Palette { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
}
namespace SixLabors.ImageSharp.Processing.Processors.Drawing
{
    public class DrawImageProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public DrawImageProcessor(SixLabors.ImageSharp.Image image, SixLabors.ImageSharp.Point location, SixLabors.ImageSharp.PixelFormats.PixelColorBlendingMode colorBlendingMode, SixLabors.ImageSharp.PixelFormats.PixelAlphaCompositionMode alphaCompositionMode, float opacity) { }
        public SixLabors.ImageSharp.PixelFormats.PixelAlphaCompositionMode AlphaCompositionMode { get; }
        public SixLabors.ImageSharp.PixelFormats.PixelColorBlendingMode ColorBlendingMode { get; }
        public SixLabors.ImageSharp.Image Image { get; }
        public SixLabors.ImageSharp.Point Location { get; }
        public float Opacity { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixelBg> CreatePixelSpecificProcessor<TPixelBg>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixelBg> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixelBg :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixelBg> { }
    }
}
namespace SixLabors.ImageSharp.Processing.Processors.Effects
{
    public interface IPixelRowDelegate
    {
        void Invoke(System.Span<System.Numerics.Vector4> span, SixLabors.ImageSharp.Point offset);
    }
    public sealed class OilPaintingProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public OilPaintingProcessor(int levels, int brushSize) { }
        public int BrushSize { get; }
        public int Levels { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class PixelateProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public PixelateProcessor(int size) { }
        public int Size { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
}
namespace SixLabors.ImageSharp.Processing.Processors.Filters
{
    public sealed class AchromatomalyProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public AchromatomalyProcessor() { }
    }
    public sealed class AchromatopsiaProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public AchromatopsiaProcessor() { }
    }
    public sealed class BlackWhiteProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public BlackWhiteProcessor() { }
    }
    public sealed class BrightnessProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public BrightnessProcessor(float amount) { }
        public float Amount { get; }
    }
    public sealed class ContrastProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public ContrastProcessor(float amount) { }
        public float Amount { get; }
    }
    public sealed class DeuteranomalyProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public DeuteranomalyProcessor() { }
    }
    public sealed class DeuteranopiaProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public DeuteranopiaProcessor() { }
    }
    public class FilterProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public FilterProcessor(SixLabors.ImageSharp.ColorMatrix matrix) { }
        public SixLabors.ImageSharp.ColorMatrix Matrix { get; }
        public virtual SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class GrayscaleBt601Processor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public GrayscaleBt601Processor(float amount) { }
        public float Amount { get; }
    }
    public sealed class GrayscaleBt709Processor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public GrayscaleBt709Processor(float amount) { }
        public float Amount { get; }
    }
    public sealed class HueProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public HueProcessor(float degrees) { }
        public float Degrees { get; }
    }
    public sealed class InvertProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public InvertProcessor(float amount) { }
        public float Amount { get; }
    }
    public sealed class KodachromeProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public KodachromeProcessor() { }
    }
    public sealed class LightnessProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public LightnessProcessor(float amount) { }
        public float Amount { get; }
    }
    public sealed class LomographProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public LomographProcessor(SixLabors.ImageSharp.GraphicsOptions graphicsOptions) { }
        public SixLabors.ImageSharp.GraphicsOptions GraphicsOptions { get; }
        public override SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class OpacityProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public OpacityProcessor(float amount) { }
        public float Amount { get; }
    }
    public sealed class PolaroidProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public PolaroidProcessor(SixLabors.ImageSharp.GraphicsOptions graphicsOptions) { }
        public SixLabors.ImageSharp.GraphicsOptions GraphicsOptions { get; }
        public override SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class ProtanomalyProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public ProtanomalyProcessor() { }
    }
    public sealed class ProtanopiaProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public ProtanopiaProcessor() { }
    }
    public sealed class SaturateProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public SaturateProcessor(float amount) { }
        public float Amount { get; }
    }
    public sealed class SepiaProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public SepiaProcessor(float amount) { }
        public float Amount { get; }
    }
    public sealed class TritanomalyProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public TritanomalyProcessor() { }
    }
    public sealed class TritanopiaProcessor : SixLabors.ImageSharp.Processing.Processors.Filters.FilterProcessor
    {
        public TritanopiaProcessor() { }
    }
}
namespace SixLabors.ImageSharp.Processing.Processors.Normalization
{
    public class AdaptiveHistogramEqualizationProcessor : SixLabors.ImageSharp.Processing.Processors.Normalization.HistogramEqualizationProcessor
    {
        public AdaptiveHistogramEqualizationProcessor(int luminanceLevels, bool clipHistogram, int clipLimit, int numberOfTiles) { }
        public int NumberOfTiles { get; }
        public override SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public class AdaptiveHistogramEqualizationSlidingWindowProcessor : SixLabors.ImageSharp.Processing.Processors.Normalization.HistogramEqualizationProcessor
    {
        public AdaptiveHistogramEqualizationSlidingWindowProcessor(int luminanceLevels, bool clipHistogram, int clipLimit, int numberOfTiles) { }
        public int NumberOfTiles { get; }
        public override SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public class AutoLevelProcessor : SixLabors.ImageSharp.Processing.Processors.Normalization.HistogramEqualizationProcessor
    {
        public AutoLevelProcessor(int luminanceLevels, bool clipHistogram, int clipLimit, bool syncChannels) { }
        public bool SyncChannels { get; }
        public override SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public class GlobalHistogramEqualizationProcessor : SixLabors.ImageSharp.Processing.Processors.Normalization.HistogramEqualizationProcessor
    {
        public GlobalHistogramEqualizationProcessor(int luminanceLevels, bool clipHistogram, int clipLimit) { }
        public override SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public enum HistogramEqualizationMethod
    {
        Global = 0,
        AdaptiveTileInterpolation = 1,
        AdaptiveSlidingWindow = 2,
        AutoLevel = 3,
    }
    public class HistogramEqualizationOptions
    {
        public HistogramEqualizationOptions() { }
        public bool ClipHistogram { get; set; }
        public int ClipLimit { get; set; }
        public int LuminanceLevels { get; set; }
        public SixLabors.ImageSharp.Processing.Processors.Normalization.HistogramEqualizationMethod Method { get; set; }
        public int NumberOfTiles { get; set; }
        public bool SyncChannels { get; set; }
    }
    public abstract class HistogramEqualizationProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        protected HistogramEqualizationProcessor(int luminanceLevels, bool clipHistogram, int clipLimit) { }
        public bool ClipHistogram { get; }
        public int ClipLimit { get; }
        public int LuminanceLevels { get; }
        public abstract SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
        public static SixLabors.ImageSharp.Processing.Processors.Normalization.HistogramEqualizationProcessor FromOptions(SixLabors.ImageSharp.Processing.Processors.Normalization.HistogramEqualizationOptions options) { }
    }
}
namespace SixLabors.ImageSharp.Processing.Processors.Overlays
{
    public sealed class BackgroundColorProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public BackgroundColorProcessor(SixLabors.ImageSharp.GraphicsOptions options, SixLabors.ImageSharp.Color color) { }
        public SixLabors.ImageSharp.Color Color { get; }
        public SixLabors.ImageSharp.GraphicsOptions GraphicsOptions { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class GlowProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public GlowProcessor(SixLabors.ImageSharp.GraphicsOptions options, SixLabors.ImageSharp.Color color) { }
        public SixLabors.ImageSharp.Color GlowColor { get; }
        public SixLabors.ImageSharp.GraphicsOptions GraphicsOptions { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class VignetteProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public VignetteProcessor(SixLabors.ImageSharp.GraphicsOptions options, SixLabors.ImageSharp.Color color) { }
        public SixLabors.ImageSharp.GraphicsOptions GraphicsOptions { get; }
        public SixLabors.ImageSharp.Color VignetteColor { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
}
namespace SixLabors.ImageSharp.Processing.Processors.Quantization
{
    public class DefaultPixelSamplingStrategy : SixLabors.ImageSharp.Processing.Processors.Quantization.IPixelSamplingStrategy
    {
        public DefaultPixelSamplingStrategy() { }
        public DefaultPixelSamplingStrategy(int maximumPixels, double minimumScanRatio) { }
        public long MaximumPixels { get; }
        public double MinimumScanRatio { get; }
        public System.Collections.Generic.IEnumerable<SixLabors.ImageSharp.Memory.Buffer2DRegion<TPixel>> EnumeratePixelRegions<TPixel>(SixLabors.ImageSharp.ImageFrame<TPixel> frame)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public System.Collections.Generic.IEnumerable<SixLabors.ImageSharp.Memory.Buffer2DRegion<TPixel>> EnumeratePixelRegions<TPixel>(SixLabors.ImageSharp.Image<TPixel> image)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public class ExtensivePixelSamplingStrategy : SixLabors.ImageSharp.Processing.Processors.Quantization.IPixelSamplingStrategy
    {
        public ExtensivePixelSamplingStrategy() { }
        public System.Collections.Generic.IEnumerable<SixLabors.ImageSharp.Memory.Buffer2DRegion<TPixel>> EnumeratePixelRegions<TPixel>(SixLabors.ImageSharp.ImageFrame<TPixel> frame)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public System.Collections.Generic.IEnumerable<SixLabors.ImageSharp.Memory.Buffer2DRegion<TPixel>> EnumeratePixelRegions<TPixel>(SixLabors.ImageSharp.Image<TPixel> image)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public interface IPixelSamplingStrategy
    {
        System.Collections.Generic.IEnumerable<SixLabors.ImageSharp.Memory.Buffer2DRegion<TPixel>> EnumeratePixelRegions<TPixel>(SixLabors.ImageSharp.ImageFrame<TPixel> frame)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
        System.Collections.Generic.IEnumerable<SixLabors.ImageSharp.Memory.Buffer2DRegion<TPixel>> EnumeratePixelRegions<TPixel>(SixLabors.ImageSharp.Image<TPixel> image)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
    }
    public interface IQuantizer
    {
        SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions Options { get; }
        SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel> CreatePixelSpecificQuantizer<TPixel>(SixLabors.ImageSharp.Configuration configuration)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
        SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel> CreatePixelSpecificQuantizer<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions options)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
    }
    public interface IQuantizer<TPixel> : System.IDisposable
        where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>
    {
        SixLabors.ImageSharp.Configuration Configuration { get; }
        SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions Options { get; }
        System.ReadOnlyMemory<TPixel> Palette { get; }
        void AddPaletteColors(SixLabors.ImageSharp.Memory.Buffer2DRegion<TPixel> pixelRegion);
        byte GetQuantizedColor(TPixel color, out TPixel match);
        SixLabors.ImageSharp.IndexedImageFrame<TPixel> QuantizeFrame(SixLabors.ImageSharp.ImageFrame<TPixel> source, SixLabors.ImageSharp.Rectangle bounds);
    }
    public class OctreeQuantizer : SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer
    {
        public OctreeQuantizer() { }
        public OctreeQuantizer(SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions options) { }
        public SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions Options { get; }
        public SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel> CreatePixelSpecificQuantizer<TPixel>(SixLabors.ImageSharp.Configuration configuration)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel> CreatePixelSpecificQuantizer<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions options)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public struct OctreeQuantizer<TPixel> : SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel>, System.IDisposable
        where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>
    {
        public OctreeQuantizer(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions options) { }
        public SixLabors.ImageSharp.Configuration Configuration { get; }
        public SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions Options { get; }
        public System.ReadOnlyMemory<TPixel> Palette { get; }
        public void AddPaletteColors(SixLabors.ImageSharp.Memory.Buffer2DRegion<TPixel> pixelRegion) { }
        public void Dispose() { }
        public byte GetQuantizedColor(TPixel color, out TPixel match) { }
        public SixLabors.ImageSharp.IndexedImageFrame<TPixel> QuantizeFrame(SixLabors.ImageSharp.ImageFrame<TPixel> source, SixLabors.ImageSharp.Rectangle bounds) { }
    }
    public class PaletteQuantizer : SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer
    {
        public PaletteQuantizer(System.ReadOnlyMemory<SixLabors.ImageSharp.Color> palette) { }
        public PaletteQuantizer(System.ReadOnlyMemory<SixLabors.ImageSharp.Color> palette, SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions options) { }
        public SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions Options { get; }
        public SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel> CreatePixelSpecificQuantizer<TPixel>(SixLabors.ImageSharp.Configuration configuration)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel> CreatePixelSpecificQuantizer<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions options)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public class QuantizeProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public QuantizeProcessor(SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer quantizer) { }
        public SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer Quantizer { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public static class QuantizerConstants
    {
        public const int MaxColors = 256;
        public const float MaxDitherScale = 1F;
        public const int MinColors = 1;
        public const float MinDitherScale = 0F;
        public static SixLabors.ImageSharp.Processing.Processors.Dithering.IDither DefaultDither { get; }
    }
    public class QuantizerOptions
    {
        public QuantizerOptions() { }
        public SixLabors.ImageSharp.Processing.Processors.Dithering.IDither Dither { get; set; }
        public float DitherScale { get; set; }
        public int MaxColors { get; set; }
    }
    public static class QuantizerUtilities
    {
        public static void BuildPalette<TPixel>(this SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel> quantizer, SixLabors.ImageSharp.Processing.Processors.Quantization.IPixelSamplingStrategy pixelSamplingStrategy, SixLabors.ImageSharp.ImageFrame<TPixel> source)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static void BuildPalette<TPixel>(this SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel> quantizer, SixLabors.ImageSharp.Processing.Processors.Quantization.IPixelSamplingStrategy pixelSamplingStrategy, SixLabors.ImageSharp.Image<TPixel> source)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.IndexedImageFrame<TPixel> BuildPaletteAndQuantizeFrame<TPixel>(this SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel> quantizer, SixLabors.ImageSharp.ImageFrame<TPixel> source, SixLabors.ImageSharp.Rectangle bounds)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static void CheckPaletteState<TPixel>(in System.ReadOnlyMemory<TPixel> palette)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public static SixLabors.ImageSharp.IndexedImageFrame<TPixel> QuantizeFrame<TFrameQuantizer, TPixel>(ref TFrameQuantizer quantizer, SixLabors.ImageSharp.ImageFrame<TPixel> source, SixLabors.ImageSharp.Rectangle bounds)
            where TFrameQuantizer :  struct, SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel>
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public class WebSafePaletteQuantizer : SixLabors.ImageSharp.Processing.Processors.Quantization.PaletteQuantizer
    {
        public WebSafePaletteQuantizer() { }
        public WebSafePaletteQuantizer(SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions options) { }
    }
    public class WernerPaletteQuantizer : SixLabors.ImageSharp.Processing.Processors.Quantization.PaletteQuantizer
    {
        public WernerPaletteQuantizer() { }
        public WernerPaletteQuantizer(SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions options) { }
    }
    public class WuQuantizer : SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer
    {
        public WuQuantizer() { }
        public WuQuantizer(SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions options) { }
        public SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions Options { get; }
        public SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel> CreatePixelSpecificQuantizer<TPixel>(SixLabors.ImageSharp.Configuration configuration)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public SixLabors.ImageSharp.Processing.Processors.Quantization.IQuantizer<TPixel> CreatePixelSpecificQuantizer<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Processing.Processors.Quantization.QuantizerOptions options)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
}
namespace SixLabors.ImageSharp.Processing.Processors.Transforms
{
    public class AffineTransformProcessor : SixLabors.ImageSharp.Processing.Processors.CloningImageProcessor
    {
        public AffineTransformProcessor(System.Numerics.Matrix3x2 matrix, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler, SixLabors.ImageSharp.Size targetDimensions) { }
        public SixLabors.ImageSharp.Size DestinationSize { get; }
        public SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler Sampler { get; }
        public System.Numerics.Matrix3x2 TransformMatrix { get; }
        public override SixLabors.ImageSharp.Processing.Processors.ICloningImageProcessor<TPixel> CreatePixelSpecificCloningProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class AutoOrientProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public AutoOrientProcessor() { }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public readonly struct BicubicResampler : SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler
    {
        public float Radius { get; }
        public void ApplyTransform<TPixel>(SixLabors.ImageSharp.Processing.Processors.Transforms.IResamplingTransformImageProcessor<TPixel> processor)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public float GetValue(float x) { }
    }
    public readonly struct BoxResampler : SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler
    {
        public float Radius { get; }
        public void ApplyTransform<TPixel>(SixLabors.ImageSharp.Processing.Processors.Transforms.IResamplingTransformImageProcessor<TPixel> processor)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public float GetValue(float x) { }
    }
    public sealed class CropProcessor : SixLabors.ImageSharp.Processing.Processors.CloningImageProcessor
    {
        public CropProcessor(SixLabors.ImageSharp.Rectangle cropRectangle, SixLabors.ImageSharp.Size sourceSize) { }
        public SixLabors.ImageSharp.Rectangle CropRectangle { get; }
        public override SixLabors.ImageSharp.Processing.Processors.ICloningImageProcessor<TPixel> CreatePixelSpecificCloningProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public readonly struct CubicResampler : SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler
    {
        public static readonly SixLabors.ImageSharp.Processing.Processors.Transforms.CubicResampler CatmullRom;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Transforms.CubicResampler Hermite;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Transforms.CubicResampler MitchellNetravali;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Transforms.CubicResampler Robidoux;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Transforms.CubicResampler RobidouxSharp;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Transforms.CubicResampler Spline;
        public CubicResampler(float radius, float bspline, float cardinal) { }
        public float Radius { get; }
        public void ApplyTransform<TPixel>(SixLabors.ImageSharp.Processing.Processors.Transforms.IResamplingTransformImageProcessor<TPixel> processor)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public float GetValue(float x) { }
    }
    public sealed class DegenerateTransformException : System.Exception
    {
        public DegenerateTransformException() { }
        public DegenerateTransformException(string message) { }
        public DegenerateTransformException(string message, System.Exception innerException) { }
    }
    public sealed class EntropyCropProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public EntropyCropProcessor() { }
        public EntropyCropProcessor(float threshold) { }
        public float Threshold { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class FlipProcessor : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
    {
        public FlipProcessor(SixLabors.ImageSharp.Processing.FlipMode flipMode) { }
        public SixLabors.ImageSharp.Processing.FlipMode FlipMode { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public interface IResampler
    {
        float Radius { get; }
        void ApplyTransform<TPixel>(SixLabors.ImageSharp.Processing.Processors.Transforms.IResamplingTransformImageProcessor<TPixel> processor)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>;
        float GetValue(float x);
    }
    public interface IResamplingTransformImageProcessor<TPixel> : SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel>, System.IDisposable
        where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel>
    {
        void ApplyTransform<TResampler>(in TResampler sampler)
            where TResampler :  struct, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler;
    }
    public interface ISwizzler
    {
        SixLabors.ImageSharp.Size DestinationSize { get; }
        SixLabors.ImageSharp.Point Transform(SixLabors.ImageSharp.Point point);
    }
    public readonly struct LanczosResampler : SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler
    {
        public static readonly SixLabors.ImageSharp.Processing.Processors.Transforms.LanczosResampler Lanczos2;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Transforms.LanczosResampler Lanczos3;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Transforms.LanczosResampler Lanczos5;
        public static readonly SixLabors.ImageSharp.Processing.Processors.Transforms.LanczosResampler Lanczos8;
        public LanczosResampler(float radius) { }
        public float Radius { get; }
        public void ApplyTransform<TPixel>(SixLabors.ImageSharp.Processing.Processors.Transforms.IResamplingTransformImageProcessor<TPixel> processor)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public float GetValue(float x) { }
    }
    public readonly struct NearestNeighborResampler : SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler
    {
        public float Radius { get; }
        public void ApplyTransform<TPixel>(SixLabors.ImageSharp.Processing.Processors.Transforms.IResamplingTransformImageProcessor<TPixel> processor)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public float GetValue(float x) { }
    }
    public sealed class ProjectiveTransformProcessor : SixLabors.ImageSharp.Processing.Processors.CloningImageProcessor
    {
        public ProjectiveTransformProcessor(System.Numerics.Matrix4x4 matrix, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler, SixLabors.ImageSharp.Size targetDimensions) { }
        public SixLabors.ImageSharp.Size DestinationSize { get; }
        public SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler Sampler { get; }
        public System.Numerics.Matrix4x4 TransformMatrix { get; }
        public override SixLabors.ImageSharp.Processing.Processors.ICloningImageProcessor<TPixel> CreatePixelSpecificCloningProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public class ResizeProcessor : SixLabors.ImageSharp.Processing.Processors.CloningImageProcessor
    {
        public ResizeProcessor(SixLabors.ImageSharp.Processing.ResizeOptions options, SixLabors.ImageSharp.Size sourceSize) { }
        public int DestinationHeight { get; }
        public SixLabors.ImageSharp.Rectangle DestinationRectangle { get; }
        public int DestinationWidth { get; }
        public SixLabors.ImageSharp.Processing.ResizeOptions Options { get; }
        public override SixLabors.ImageSharp.Processing.Processors.ICloningImageProcessor<TPixel> CreatePixelSpecificCloningProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class RotateProcessor : SixLabors.ImageSharp.Processing.Processors.Transforms.AffineTransformProcessor
    {
        public RotateProcessor(float degrees, SixLabors.ImageSharp.Size sourceSize) { }
        public RotateProcessor(float degrees, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler, SixLabors.ImageSharp.Size sourceSize) { }
        public float Degrees { get; }
        public override SixLabors.ImageSharp.Processing.Processors.ICloningImageProcessor<TPixel> CreatePixelSpecificCloningProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public sealed class SkewProcessor : SixLabors.ImageSharp.Processing.Processors.Transforms.AffineTransformProcessor
    {
        public SkewProcessor(float degreesX, float degreesY, SixLabors.ImageSharp.Size sourceSize) { }
        public SkewProcessor(float degreesX, float degreesY, SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler sampler, SixLabors.ImageSharp.Size sourceSize) { }
        public float DegreesX { get; }
        public float DegreesY { get; }
    }
    public sealed class SwizzleProcessor<TSwizzler> : SixLabors.ImageSharp.Processing.Processors.IImageProcessor
        where TSwizzler :  struct, SixLabors.ImageSharp.Processing.Processors.Transforms.ISwizzler
    {
        public SwizzleProcessor(TSwizzler swizzler) { }
        public TSwizzler Swizzler { get; }
        public SixLabors.ImageSharp.Processing.Processors.IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(SixLabors.ImageSharp.Configuration configuration, SixLabors.ImageSharp.Image<TPixel> source, SixLabors.ImageSharp.Rectangle sourceRectangle)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
    }
    public readonly struct TriangleResampler : SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler
    {
        public float Radius { get; }
        public void ApplyTransform<TPixel>(SixLabors.ImageSharp.Processing.Processors.Transforms.IResamplingTransformImageProcessor<TPixel> processor)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public float GetValue(float x) { }
    }
    public readonly struct WelchResampler : SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler
    {
        public float Radius { get; }
        public void ApplyTransform<TPixel>(SixLabors.ImageSharp.Processing.Processors.Transforms.IResamplingTransformImageProcessor<TPixel> processor)
            where TPixel :  unmanaged, SixLabors.ImageSharp.PixelFormats.IPixel<TPixel> { }
        public float GetValue(float x) { }
    }
}